From 3135dc8e5af9a3904c33badda120c309539003e7 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <michael.i.doherty@intel.com>
Date: Mon, 15 Aug 2016 15:32:21 -0700
Subject: [PATCH 3/3] Make the majority of the codebase PEP8 compliant

Conforming to modern Python community guidelines such as PEP8 enables rapid
testing, deployment and development of WALinuxAgeny by immediately knowing
that the code changes are valid, having first passed through the 'pep8'
and 'flake8' tooling.

Signed-off-by: Ikey Doherty <michael.i.doherty@intel.com>
---
 azurelinuxagent/agent.py                         |  36 ++--
 azurelinuxagent/common/__init__.py               |   1 -
 azurelinuxagent/common/conf.py                   |  39 +++-
 azurelinuxagent/common/dhcp.py                   |   2 +-
 azurelinuxagent/common/event.py                  |  46 +++--
 azurelinuxagent/common/exception.py              |  29 ++-
 azurelinuxagent/common/future.py                 |   3 +-
 azurelinuxagent/common/logger.py                 |  30 ++-
 azurelinuxagent/common/osutil/coreos.py          |  21 +-
 azurelinuxagent/common/osutil/debian.py          |   3 +-
 azurelinuxagent/common/osutil/default.py         | 161 +++++++++------
 azurelinuxagent/common/osutil/factory.py         |  13 +-
 azurelinuxagent/common/osutil/freebsd.py         |  43 ++--
 azurelinuxagent/common/osutil/redhat.py          |  19 +-
 azurelinuxagent/common/osutil/suse.py            |  17 +-
 azurelinuxagent/common/osutil/ubuntu.py          |  15 +-
 azurelinuxagent/common/protocol/__init__.py      |   5 +-
 azurelinuxagent/common/protocol/hostplugin.py    |   1 +
 azurelinuxagent/common/protocol/metadata.py      |  52 ++---
 azurelinuxagent/common/protocol/ovfenv.py        |  19 +-
 azurelinuxagent/common/protocol/restapi.py       |  70 ++++++-
 azurelinuxagent/common/protocol/util.py          |  57 +++---
 azurelinuxagent/common/protocol/wire.py          | 106 ++++++----
 azurelinuxagent/common/rdma.py                   |  70 ++++---
 azurelinuxagent/common/utils/__init__.py         |   1 -
 azurelinuxagent/common/utils/cryptutil.py        |  25 +--
 azurelinuxagent/common/utils/fileutil.py         |  22 +-
 azurelinuxagent/common/utils/flexible_version.py |  61 +++---
 azurelinuxagent/common/utils/restutil.py         |  55 +++--
 azurelinuxagent/common/utils/shellutil.py        |  34 ++-
 azurelinuxagent/common/utils/textutil.py         |  17 +-
 azurelinuxagent/common/version.py                |   1 +
 azurelinuxagent/daemon/main.py                   |  22 +-
 azurelinuxagent/daemon/resourcedisk/__init__.py  |   3 +-
 azurelinuxagent/daemon/resourcedisk/factory.py   |   8 +-
 azurelinuxagent/daemon/resourcedisk/freebsd.py   |  45 ++--
 azurelinuxagent/daemon/scvmm.py                  |  24 ++-
 azurelinuxagent/distro/__init__.py               |   1 -
 azurelinuxagent/distro/suse/__init__.py          |   1 -
 azurelinuxagent/ga/__init__.py                   |   1 -
 azurelinuxagent/ga/env.py                        |  21 +-
 azurelinuxagent/ga/exthandlers.py                | 249 ++++++++++++----------
 azurelinuxagent/ga/monitor.py                    |  17 +-
 azurelinuxagent/ga/update.py                     | 250 ++++++++++++++---------
 azurelinuxagent/pa/__init__.py                   |   1 -
 azurelinuxagent/pa/deprovision/coreos.py         |   8 +-
 azurelinuxagent/pa/deprovision/default.py        |  18 +-
 azurelinuxagent/pa/deprovision/ubuntu.py         |  10 +-
 azurelinuxagent/pa/provision/default.py          |  41 ++--
 azurelinuxagent/pa/provision/factory.py          |  10 +-
 azurelinuxagent/pa/provision/ubuntu.py           |  11 +-
 azurelinuxagent/pa/rdma/centos.py                |  11 +-
 azurelinuxagent/pa/rdma/factory.py               |   4 +-
 azurelinuxagent/pa/rdma/suse.py                  |   2 +-
 bin/waagent                                      |   3 +-
 makepkg.py                                       |   7 +-
 setup.py                                         |  65 +++---
 tests/common/dhcp/test_dhcp.py                   |   1 +
 tests/common/osutil/test_default.py              |  62 ++++--
 tests/common/test_version.py                     |   1 +
 tests/daemon/test_daemon.py                      |  13 +-
 tests/distro/test_resourceDisk.py                |   2 +
 tests/distro/test_scvmm.py                       |  16 +-
 tests/ga/test_extension.py                       | 136 +++++++-----
 tests/ga/test_monitor.py                         |   3 +-
 tests/ga/test_update.py                          | 225 +++++++++++++-------
 tests/pa/test_provision.py                       |  12 +-
 tests/protocol/mockmetadata.py                   |  13 +-
 tests/protocol/mockwiredata.py                   |  35 ++--
 tests/protocol/test_hostplugin.py                |   1 +
 tests/protocol/test_metadata.py                  |   6 +-
 tests/protocol/test_protocol_util.py             |  18 +-
 tests/protocol/test_restapi.py                   |   8 +-
 tests/protocol/test_wire.py                      |  17 +-
 tests/test_import.py                             |   2 +
 tests/tools.py                                   |  20 +-
 tests/utils/test_file_util.py                    |  14 +-
 tests/utils/test_flexible_version.py             |  91 ++++++---
 tests/utils/test_rest_util.py                    |  59 +++---
 tests/utils/test_shell_util.py                   |   4 +-
 tests/utils/test_text_util.py                    |  11 +-
 81 files changed, 1670 insertions(+), 1007 deletions(-)

diff --git a/azurelinuxagent/agent.py b/azurelinuxagent/agent.py
index 1309d94..c6019f1 100644
--- a/azurelinuxagent/agent.py
+++ b/azurelinuxagent/agent.py
@@ -29,34 +29,36 @@ import azurelinuxagent.common.logger as logger
 import azurelinuxagent.common.event as event
 import azurelinuxagent.common.conf as conf
 from azurelinuxagent.common.version import AGENT_NAME, AGENT_LONG_VERSION, \
-                                     DISTRO_NAME, DISTRO_VERSION, \
-                                     PY_VERSION_MAJOR, PY_VERSION_MINOR, \
-                                     PY_VERSION_MICRO
+    DISTRO_NAME, DISTRO_VERSION, \
+    PY_VERSION_MAJOR, PY_VERSION_MINOR, \
+    PY_VERSION_MICRO
 from azurelinuxagent.common.osutil import get_osutil
 
+
 class Agent(object):
+
     def __init__(self, verbose):
         """
         Initialize agent running environment.
         """
         self.osutil = get_osutil()
-        #Init stdout log
+        # Init stdout log
         level = logger.LogLevel.VERBOSE if verbose else logger.LogLevel.INFO
         logger.add_logger_appender(logger.AppenderType.STDOUT, level)
 
-        #Init config
+        # Init config
         conf_file_path = self.osutil.get_agent_conf_file_path()
         conf.load_conf_from_file(conf_file_path)
 
-        #Init log
+        # Init log
         verbose = verbose or conf.get_logs_verbose()
         level = logger.LogLevel.VERBOSE if verbose else logger.LogLevel.INFO
         logger.add_logger_appender(logger.AppenderType.FILE, level,
-                                 path="/var/log/waagent.log")
+                                   path="/var/log/waagent.log")
         logger.add_logger_appender(logger.AppenderType.CONSOLE, level,
-                                 path="/dev/console")
+                                   path="/dev/console")
 
-        #Init event reporter
+        # Init event reporter
         event_dir = os.path.join(conf.get_lib_dir(), "events")
         event.init_event_logger(event_dir)
         event.enable_unhandled_err_dump("WALA")
@@ -102,6 +104,7 @@ class Agent(object):
         update_handler = get_update_handler()
         update_handler.run()
 
+
 def main(args=[]):
     """
     Parse command line arguments, exit with usage() on error.
@@ -134,6 +137,7 @@ def main(args=[]):
         except Exception as e:
             logger.error(u"Failed to run '{0}': {1}", command, e)
 
+
 def parse_args(sys_args):
     """
     Parse command line arguments
@@ -167,25 +171,29 @@ def parse_args(sys_args):
             break
     return cmd, force, verbose
 
+
 def version():
     """
     Show agent version
     """
     print(("{0} running on {1} {2}".format(AGENT_LONG_VERSION, DISTRO_NAME,
-                                          DISTRO_VERSION)))
+                                           DISTRO_VERSION)))
     print("Python: {0}.{1}.{2}".format(PY_VERSION_MAJOR, PY_VERSION_MINOR,
                                        PY_VERSION_MICRO))
+
+
 def usage():
     """
     Show agent usage
     """
     print("")
     print((("usage: {0} [-verbose] [-force] [-help] "
-           "-deprovision[+user]|-register-service|-version|-daemon|-start|"
-           "-run-exthandlers]"
-           "").format(sys.argv[0])))
+            "-deprovision[+user]|-register-service|-version|-daemon|-start|"
+            "-run-exthandlers]"
+            "").format(sys.argv[0])))
     print("")
 
+
 def start():
     """
     Start agent daemon in a background process and set stdout/stderr to
@@ -194,5 +202,5 @@ def start():
     devnull = open(os.devnull, 'w')
     subprocess.Popen([sys.argv[0], '-daemon'], stdout=devnull, stderr=devnull)
 
-if __name__ == '__main__' :
+if __name__ == '__main__':
     main()
diff --git a/azurelinuxagent/common/__init__.py b/azurelinuxagent/common/__init__.py
index 1ea2f38..2ef4c16 100644
--- a/azurelinuxagent/common/__init__.py
+++ b/azurelinuxagent/common/__init__.py
@@ -14,4 +14,3 @@
 #
 # Requires Python 2.4+ and Openssl 1.0+
 #
-
diff --git a/azurelinuxagent/common/conf.py b/azurelinuxagent/common/conf.py
index 1a3b0da..f3b0f91 100644
--- a/azurelinuxagent/common/conf.py
+++ b/azurelinuxagent/common/conf.py
@@ -24,10 +24,12 @@ import os
 import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.common.exception import AgentConfigError
 
+
 class ConfigurationProvider(object):
     """
     Parse amd store key:values in /etc/waagent.conf.
     """
+
     def __init__(self):
         self.values = dict()
 
@@ -66,11 +68,12 @@ class ConfigurationProvider(object):
 
 __conf__ = ConfigurationProvider()
 
+
 def load_conf_from_file(conf_file_path, conf=__conf__):
     """
     Load conf file from: conf_file_path
     """
-    if os.path.isfile(conf_file_path) == False:
+    if not os.path.isfile(conf_file_path):
         raise AgentConfigError(("Missing configuration in {0}"
                                 "").format(conf_file_path))
     try:
@@ -80,102 +83,134 @@ def load_conf_from_file(conf_file_path, conf=__conf__):
         raise AgentConfigError(("Failed to load conf file:{0}, {1}"
                                 "").format(conf_file_path, err))
 
+
 def enable_rdma(conf=__conf__):
     return conf.get_switch("OS.EnableRDMA", False)
 
+
 def get_logs_verbose(conf=__conf__):
     return conf.get_switch("Logs.Verbose", False)
 
+
 def get_lib_dir(conf=__conf__):
     return conf.get("Lib.Dir", "/var/lib/waagent")
 
+
 def get_dvd_mount_point(conf=__conf__):
     return conf.get("DVD.MountPoint", "/mnt/cdrom/secure")
 
+
 def get_agent_pid_file_path(conf=__conf__):
     return conf.get("Pid.File", "/var/run/waagent.pid")
 
+
 def get_ext_log_dir(conf=__conf__):
     return conf.get("Extension.LogDir", "/var/log/azure")
 
+
 def get_openssl_cmd(conf=__conf__):
     return conf.get("OS.OpensslPath", "/usr/bin/openssl")
 
+
 def get_home_dir(conf=__conf__):
     return conf.get("OS.HomeDir", "/home")
 
+
 def get_passwd_file_path(conf=__conf__):
     return conf.get("OS.PasswordPath", "/etc/shadow")
 
+
 def get_sudoers_dir(conf=__conf__):
     return conf.get("OS.SudoersDir", "/etc/sudoers.d")
 
+
 def get_sshd_conf_file_path(conf=__conf__):
     return conf.get("OS.SshdConfigPath", "/etc/ssh/sshd_config")
 
+
 def get_root_device_scsi_timeout(conf=__conf__):
     return conf.get("OS.RootDeviceScsiTimeout", None)
 
+
 def get_ssh_host_keypair_type(conf=__conf__):
     return conf.get("Provisioning.SshHostKeyPairType", "rsa")
 
+
 def get_provision_enabled(conf=__conf__):
     return conf.get_switch("Provisioning.Enabled", True)
 
+
 def get_allow_reset_sys_user(conf=__conf__):
     return conf.get_switch("Provisioning.AllowResetSysUser", False)
 
+
 def get_regenerate_ssh_host_key(conf=__conf__):
     return conf.get_switch("Provisioning.RegenerateSshHostKeyPair", False)
 
+
 def get_delete_root_password(conf=__conf__):
     return conf.get_switch("Provisioning.DeleteRootPassword", False)
 
+
 def get_decode_customdata(conf=__conf__):
     return conf.get_switch("Provisioning.DecodeCustomData", False)
 
+
 def get_execute_customdata(conf=__conf__):
     return conf.get_switch("Provisioning.ExecuteCustomData", False)
 
+
 def get_password_cryptid(conf=__conf__):
     return conf.get("Provisioning.PasswordCryptId", "6")
 
+
 def get_password_crypt_salt_len(conf=__conf__):
     return conf.get_int("Provisioning.PasswordCryptSaltLength", 10)
 
+
 def get_monitor_hostname(conf=__conf__):
     return conf.get_switch("Provisioning.MonitorHostName", False)
 
+
 def get_httpproxy_host(conf=__conf__):
     return conf.get("HttpProxy.Host", None)
 
+
 def get_httpproxy_port(conf=__conf__):
     return conf.get("HttpProxy.Port", None)
 
+
 def get_detect_scvmm_env(conf=__conf__):
     return conf.get_switch("DetectScvmmEnv", False)
 
+
 def get_resourcedisk_format(conf=__conf__):
     return conf.get_switch("ResourceDisk.Format", False)
 
+
 def get_resourcedisk_enable_swap(conf=__conf__):
     return conf.get_switch("ResourceDisk.EnableSwap", False)
 
+
 def get_resourcedisk_mountpoint(conf=__conf__):
     return conf.get("ResourceDisk.MountPoint", "/mnt/resource")
 
+
 def get_resourcedisk_filesystem(conf=__conf__):
     return conf.get("ResourceDisk.Filesystem", "ext3")
 
+
 def get_resourcedisk_swap_size_mb(conf=__conf__):
     return conf.get_int("ResourceDisk.SwapSizeMB", 0)
 
+
 def get_autoupdate_gafamily(conf=__conf__):
     return conf.get("AutoUpdate.GAFamily", "Prod")
 
+
 def get_autoupdate_enabled(conf=__conf__):
     return conf.get_switch("AutoUpdate.Enabled", True)
 
+
 def get_autoupdate_frequency(conf=__conf__):
     return conf.get_int("Autoupdate.Frequency", 3600)
-
diff --git a/azurelinuxagent/common/dhcp.py b/azurelinuxagent/common/dhcp.py
index d5c90cb..f0a1bc7 100644
--- a/azurelinuxagent/common/dhcp.py
+++ b/azurelinuxagent/common/dhcp.py
@@ -380,7 +380,7 @@ def build_dhcp_request(mac_addr, request_broadcast):
         # set broadcast flag to true to request the dhcp sever
         # to respond to a boradcast address,
         # this is useful when user dhclient fails.
-        request[0x0A] = 0x80;
+        request[0x0A] = 0x80
 
     # fill in ClientHardwareAddress
     for a in range(0, 6):
diff --git a/azurelinuxagent/common/event.py b/azurelinuxagent/common/event.py
index 374b0e7..fc6faad 100644
--- a/azurelinuxagent/common/event.py
+++ b/azurelinuxagent/common/event.py
@@ -28,15 +28,15 @@ import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.exception import EventError, ProtocolError
 from azurelinuxagent.common.future import ustr
 from azurelinuxagent.common.protocol.restapi import TelemetryEventParam, \
-                                             TelemetryEventList, \
-                                             TelemetryEvent, \
-                                             set_properties, get_properties
+    TelemetryEventList, \
+    TelemetryEvent, \
+    set_properties, get_properties
 from azurelinuxagent.common.version import DISTRO_NAME, DISTRO_VERSION, \
-                                     DISTRO_CODE_NAME, AGENT_VERSION
+    DISTRO_CODE_NAME, AGENT_VERSION
 
 
 class WALAEventOperation:
-    HeartBeat="HeartBeat"
+    HeartBeat = "HeartBeat"
     Provision = "Provision"
     Install = "Install"
     UnInstall = "UnInstall"
@@ -45,10 +45,12 @@ class WALAEventOperation:
     Download = "Download"
     Upgrade = "Upgrade"
     Update = "Update"
-    ActivateResourceDisk="ActivateResourceDisk"
-    UnhandledError="UnhandledError"
+    ActivateResourceDisk = "ActivateResourceDisk"
+    UnhandledError = "UnhandledError"
+
 
 class EventLogger(object):
+
     def __init__(self):
         self.event_dir = None
 
@@ -61,24 +63,27 @@ class EventLogger(object):
             os.mkdir(self.event_dir)
             os.chmod(self.event_dir, 0o700)
         if len(os.listdir(self.event_dir)) > 1000:
-            raise EventError("Too many files under: {0}".format(self.event_dir))
+            raise EventError("Too many files under: {0}".format(
+                self.event_dir))
 
-        filename = os.path.join(self.event_dir, ustr(int(time.time()*1000000)))
+        filename = os.path.join(
+            self.event_dir, ustr(int(time.time() * 1000000)))
         try:
-            with open(filename+".tmp",'wb+') as hfile:
+            with open(filename + ".tmp", 'wb+') as hfile:
                 hfile.write(data.encode("utf-8"))
-            os.rename(filename+".tmp", filename+".tld")
+            os.rename(filename + ".tmp", filename + ".tld")
         except IOError as e:
             raise EventError("Failed to write events to file:{0}", e)
 
-    def add_event(self, name, op="", is_success=True, duration=0, version=AGENT_VERSION,
-                  message="", evt_type="", is_internal=False):
+    def add_event(self, name, op="", is_success=True, duration=0,
+                  version=AGENT_VERSION, message="", evt_type="",
+                  is_internal=False):
         event = TelemetryEvent(1, "69B669B9-4AF8-4C50-BDC4-6006FA76E975")
         event.parameters.append(TelemetryEventParam('Name', name))
         event.parameters.append(TelemetryEventParam('Version', str(version)))
         event.parameters.append(TelemetryEventParam('IsInternal', is_internal))
         event.parameters.append(TelemetryEventParam('Operation', op))
-        event.parameters.append(TelemetryEventParam('OperationSuccess', 
+        event.parameters.append(TelemetryEventParam('OperationSuccess',
                                                     is_success))
         event.parameters.append(TelemetryEventParam('Message', message))
         event.parameters.append(TelemetryEventParam('Duration', duration))
@@ -92,6 +97,7 @@ class EventLogger(object):
 
 __event_logger__ = EventLogger()
 
+
 def add_event(name, op="", is_success=True, duration=0, version=AGENT_VERSION,
               message="", evt_type="", is_internal=False,
               reporter=__event_logger__):
@@ -101,13 +107,16 @@ def add_event(name, op="", is_success=True, duration=0, version=AGENT_VERSION,
     if reporter.event_dir is None:
         logger.warn("Event reporter is not initialized.")
         return
-    reporter.add_event(name, op=op, is_success=is_success, duration=duration,
-                       version=str(version), message=message, evt_type=evt_type,
-                       is_internal=is_internal)
+    reporter.add_event(
+        name, op=op, is_success=is_success, duration=duration,
+        version=str(version),
+        message=message, evt_type=evt_type, is_internal=is_internal)
+
 
 def init_event_logger(event_dir, reporter=__event_logger__):
     reporter.event_dir = event_dir
 
+
 def dump_unhandled_err(name):
     if hasattr(sys, 'last_type') and hasattr(sys, 'last_value') and \
             hasattr(sys, 'last_traceback'):
@@ -116,9 +125,10 @@ def dump_unhandled_err(name):
         last_traceback = getattr(sys, 'last_traceback')
         error = traceback.format_exception(last_type, last_value,
                                            last_traceback)
-        message= "".join(error)
+        message = "".join(error)
         add_event(name, is_success=False, message=message,
                   op=WALAEventOperation.UnhandledError)
 
+
 def enable_unhandled_err_dump(name):
     atexit.register(dump_unhandled_err, name)
diff --git a/azurelinuxagent/common/exception.py b/azurelinuxagent/common/exception.py
index 457490c..d333a02 100644
--- a/azurelinuxagent/common/exception.py
+++ b/azurelinuxagent/common/exception.py
@@ -20,104 +20,131 @@
 Defines all exceptions
 """
 
+
 class AgentError(Exception):
     """
     Base class of agent error.
     """
+
     def __init__(self, errno, msg, inner=None):
         msg = u"({0}){1}".format(errno, msg)
         if inner is not None:
             msg = u"{0} \n  inner error: {1}".format(msg, inner)
         super(AgentError, self).__init__(msg)
 
+
 class AgentConfigError(AgentError):
     """
     When configure file is not found or malformed.
     """
+
     def __init__(self, msg=None, inner=None):
         super(AgentConfigError, self).__init__('000001', msg, inner)
 
+
 class AgentNetworkError(AgentError):
     """
     When network is not avaiable.
     """
+
     def __init__(self, msg=None, inner=None):
         super(AgentNetworkError, self).__init__('000002', msg, inner)
 
+
 class ExtensionError(AgentError):
     """
     When failed to execute an extension
     """
+
     def __init__(self, msg=None, inner=None):
         super(ExtensionError, self).__init__('000003', msg, inner)
 
+
 class ProvisionError(AgentError):
     """
     When provision failed
     """
+
     def __init__(self, msg=None, inner=None):
         super(ProvisionError, self).__init__('000004', msg, inner)
 
+
 class ResourceDiskError(AgentError):
     """
     Mount resource disk failed
     """
+
     def __init__(self, msg=None, inner=None):
         super(ResourceDiskError, self).__init__('000005', msg, inner)
 
+
 class DhcpError(AgentError):
     """
     Failed to handle dhcp response
     """
+
     def __init__(self, msg=None, inner=None):
         super(DhcpError, self).__init__('000006', msg, inner)
 
+
 class OSUtilError(AgentError):
     """
     Failed to perform operation to OS configuration
     """
+
     def __init__(self, msg=None, inner=None):
         super(OSUtilError, self).__init__('000007', msg, inner)
 
+
 class ProtocolError(AgentError):
     """
     Azure protocol error
     """
+
     def __init__(self, msg=None, inner=None):
         super(ProtocolError, self).__init__('000008', msg, inner)
 
+
 class ProtocolNotFoundError(ProtocolError):
     """
     Azure protocol endpoint not found
     """
+
     def __init__(self, msg=None, inner=None):
         super(ProtocolNotFoundError, self).__init__(msg, inner)
 
+
 class HttpError(AgentError):
     """
     Http request failure
     """
+
     def __init__(self, msg=None, inner=None):
         super(HttpError, self).__init__('000009', msg, inner)
 
+
 class EventError(AgentError):
     """
     Event reporting error
     """
+
     def __init__(self, msg=None, inner=None):
         super(EventError, self).__init__('000010', msg, inner)
 
+
 class CryptError(AgentError):
     """
     Encrypt/Decrypt error
     """
+
     def __init__(self, msg=None, inner=None):
         super(CryptError, self).__init__('000011', msg, inner)
 
+
 class UpdateError(AgentError):
     """
     Update Guest Agent error
     """
+
     def __init__(self, msg=None, inner=None):
         super(UpdateError, self).__init__('000012', msg, inner)
-
diff --git a/azurelinuxagent/common/future.py b/azurelinuxagent/common/future.py
index 8509732..46a9c7f 100644
--- a/azurelinuxagent/common/future.py
+++ b/azurelinuxagent/common/future.py
@@ -4,7 +4,7 @@ import sys
 Add alies for python2 and python3 libs and fucntions.
 """
 
-if sys.version_info[0]== 3:
+if sys.version_info[0] == 3:
     import http.client as httpclient
     from urllib.parse import urlparse
 
@@ -28,4 +28,3 @@ elif sys.version_info[0] == 2:
 
 else:
     raise ImportError("Unknown python version:{0}".format(sys.version_info))
-
diff --git a/azurelinuxagent/common/logger.py b/azurelinuxagent/common/logger.py
index c1eb18f..9df9c75 100644
--- a/azurelinuxagent/common/logger.py
+++ b/azurelinuxagent/common/logger.py
@@ -22,10 +22,12 @@ import sys
 from azurelinuxagent.common.future import ustr
 from datetime import datetime
 
+
 class Logger(object):
     """
     Logger class
     """
+
     def __init__(self, logger=None, prefix=None):
         self.appenders = []
         if logger is not None:
@@ -45,8 +47,8 @@ class Logger(object):
         self.log(LogLevel.ERROR, msg_format, *args)
 
     def log(self, level, msg_format, *args):
-        #if msg_format is not unicode convert it to unicode
-        if type(msg_format) is not ustr:
+        # if msg_format is not unicode convert it to unicode
+        if not isinstance(msg_format, ustr):
             msg_format = ustr(msg_format, errors="backslashreplace")
         if len(args) > 0:
             msg = msg_format.format(*args)
@@ -55,12 +57,12 @@ class Logger(object):
         time = datetime.now().strftime(u'%Y/%m/%d %H:%M:%S.%f')
         level_str = LogLevel.STRINGS[level]
         if self.prefix is not None:
-            log_item = u"{0} {1} {2} {3}\n".format(time, level_str, self.prefix,
-                                                   msg)
+            log_item = u"{0} {1} {2} {3}\n".format(
+                time, level_str, self.prefix, msg)
         else:
             log_item = u"{0} {1} {2}\n".format(time, level_str, msg)
 
-        log_item = ustr(log_item.encode('ascii', "backslashreplace"), 
+        log_item = ustr(log_item.encode('ascii', "backslashreplace"),
                         encoding="ascii")
         for appender in self.appenders:
             appender.write(level, log_item)
@@ -69,7 +71,9 @@ class Logger(object):
         appender = _create_logger_appender(appender_type, level, path)
         self.appenders.append(appender)
 
+
 class ConsoleAppender(object):
+
     def __init__(self, level, path):
         self.level = level
         self.path = path
@@ -82,7 +86,9 @@ class ConsoleAppender(object):
             except IOError:
                 pass
 
+
 class FileAppender(object):
+
     def __init__(self, level, path):
         self.level = level
         self.path = path
@@ -95,7 +101,9 @@ class FileAppender(object):
             except IOError:
                 pass
 
+
 class StdoutAppender(object):
+
     def __init__(self, level):
         self.level = level
 
@@ -106,9 +114,10 @@ class StdoutAppender(object):
             except IOError:
                 pass
 
-#Initialize logger instance
+# Initialize logger instance
 DEFAULT_LOGGER = Logger()
 
+
 class LogLevel(object):
     VERBOSE = 0
     INFO = 1
@@ -121,29 +130,37 @@ class LogLevel(object):
         "ERROR"
     ]
 
+
 class AppenderType(object):
     FILE = 0
     CONSOLE = 1
     STDOUT = 2
 
+
 def add_logger_appender(appender_type, level=LogLevel.INFO, path=None):
     DEFAULT_LOGGER.add_appender(appender_type, level, path)
 
+
 def verbose(msg_format, *args):
     DEFAULT_LOGGER.verbose(msg_format, *args)
 
+
 def info(msg_format, *args):
     DEFAULT_LOGGER.info(msg_format, *args)
 
+
 def warn(msg_format, *args):
     DEFAULT_LOGGER.warn(msg_format, *args)
 
+
 def error(msg_format, *args):
     DEFAULT_LOGGER.error(msg_format, *args)
 
+
 def log(level, msg_format, *args):
     DEFAULT_LOGGER.log(level, msg_format, args)
 
+
 def _create_logger_appender(appender_type, level=LogLevel.INFO, path=None):
     if appender_type == AppenderType.CONSOLE:
         return ConsoleAppender(level, path)
@@ -153,4 +170,3 @@ def _create_logger_appender(appender_type, level=LogLevel.INFO, path=None):
         return StdoutAppender(level)
     else:
         raise ValueError("Unknown appender type")
-
diff --git a/azurelinuxagent/common/osutil/coreos.py b/azurelinuxagent/common/osutil/coreos.py
index e26fd97..83f1c2c 100644
--- a/azurelinuxagent/common/osutil/coreos.py
+++ b/azurelinuxagent/common/osutil/coreos.py
@@ -32,12 +32,14 @@ import azurelinuxagent.common.utils.shellutil as shellutil
 import azurelinuxagent.common.utils.textutil as textutil
 from azurelinuxagent.common.osutil.default import DefaultOSUtil
 
+
 class CoreOSUtil(DefaultOSUtil):
+
     def __init__(self):
         super(CoreOSUtil, self).__init__()
         self.agent_conf_file_path = '/usr/share/oem/waagent.conf'
-        self.waagent_path='/usr/share/oem/bin/waagent'
-        self.python_path='/usr/share/oem/python/bin'
+        self.waagent_path = '/usr/share/oem/bin/waagent'
+        self.python_path = '/usr/share/oem/python/bin'
         if 'PATH' in os.environ:
             path = "{0}:{1}".format(os.environ['PATH'], self.python_path)
         else:
@@ -52,15 +54,15 @@ class CoreOSUtil(DefaultOSUtil):
         os.environ['PYTHONPATH'] = py_path
 
     def is_sys_user(self, username):
-       #User 'core' is not a sysuser
-       if username == 'core':
-           return False
-       return super(CoreOSUtil, self).is_sys_user(username)
+        # User 'core' is not a sysuser
+        if username == 'core':
+            return False
+        return super(CoreOSUtil, self).is_sys_user(username)
 
     def is_dhcp_enabled(self):
         return True
 
-    def start_network(self) :
+    def start_network(self):
         return shellutil.run("systemctl start systemd-networkd", chk_err=False)
 
     def restart_if(self, iface):
@@ -83,10 +85,9 @@ class CoreOSUtil(DefaultOSUtil):
         return shellutil.run("systemctl stop wagent", chk_err=False)
 
     def get_dhcp_pid(self):
-        ret= shellutil.run_get_output("pidof systemd-networkd")
+        ret = shellutil.run_get_output("pidof systemd-networkd")
         return ret[1] if ret[0] == 0 else None
 
     def conf_sshd(self, disable_password):
-        #In CoreOS, /etc/sshd_config is mount readonly. Skip the setting
+        # In CoreOS, /etc/sshd_config is mount readonly. Skip the setting
         pass
-
diff --git a/azurelinuxagent/common/osutil/debian.py b/azurelinuxagent/common/osutil/debian.py
index f455572..0ac0746 100644
--- a/azurelinuxagent/common/osutil/debian.py
+++ b/azurelinuxagent/common/osutil/debian.py
@@ -32,7 +32,9 @@ import azurelinuxagent.common.utils.shellutil as shellutil
 import azurelinuxagent.common.utils.textutil as textutil
 from azurelinuxagent.common.osutil.default import DefaultOSUtil
 
+
 class DebianOSUtil(DefaultOSUtil):
+
     def __init__(self):
         super(DebianOSUtil, self).__init__()
 
@@ -44,4 +46,3 @@ class DebianOSUtil(DefaultOSUtil):
 
     def start_agent_service(self):
         return shellutil.run("service azurelinuxagent start", chk_err=False)
-
diff --git a/azurelinuxagent/common/osutil/default.py b/azurelinuxagent/common/osutil/default.py
index c243c85..00630eb 100644
--- a/azurelinuxagent/common/osutil/default.py
+++ b/azurelinuxagent/common/osutil/default.py
@@ -37,8 +37,8 @@ import azurelinuxagent.common.utils.shellutil as shellutil
 import azurelinuxagent.common.utils.textutil as textutil
 from azurelinuxagent.common.utils.cryptutil import CryptUtil
 
-__RULES_FILES__ = [ "/lib/udev/rules.d/75-persistent-net-generator.rules",
-                    "/etc/udev/rules.d/70-persistent-net.rules" ]
+__RULES_FILES__ = ["/lib/udev/rules.d/75-persistent-net-generator.rules",
+                   "/etc/udev/rules.d/70-persistent-net.rules"]
 
 """
 Define distro specific behavior. OSUtil class defines default behavior
@@ -46,11 +46,12 @@ for all distros. Each concrete distro classes could overwrite default behavior
 if needed.
 """
 
+
 class DefaultOSUtil(object):
 
     def __init__(self):
         self.agent_conf_file_path = '/etc/waagent.conf'
-        self.selinux=None
+        self.selinux = None
 
     def get_agent_conf_file_path(self):
         return self.agent_conf_file_path
@@ -63,7 +64,7 @@ class DefaultOSUtil(object):
 
     def is_sys_user(self, username):
         """
-        Check whether use is a system user. 
+        Check whether use is a system user.
         If reset sys user is allowed in conf, return False
         Otherwise, check whether UID is less than UID_MIN
         """
@@ -79,9 +80,9 @@ class DefaultOSUtil(object):
                 uidmin = int(uidmin_def.split()[1])
         except IOError as e:
             pass
-        if uidmin == None:
+        if uidmin is None:
             uidmin = 100
-        if userentry != None and userentry[2] < uidmin:
+        if userentry is not None and userentry[2] < uidmin:
             return True
         else:
             return False
@@ -137,7 +138,7 @@ class DefaultOSUtil(object):
             fileutil.append_file(sudoers_wagent, sudoer)
             fileutil.chmod(sudoers_wagent, 0o440)
         else:
-            #Remove user from sudoers
+            # Remove user from sudoers
             if os.path.isfile(sudoers_wagent):
                 try:
                     content = fileutil.read_file(sudoers_wagent)
@@ -181,7 +182,8 @@ class DefaultOSUtil(object):
         crytputil = CryptUtil(conf.get_openssl_cmd())
         pub = crytputil.get_pubkey_from_prv(prv_path)
         fileutil.write_file(pub_path, pub)
-        self.set_selinux_context(pub_path, 'unconfined_u:object_r:ssh_home_t:s0')
+        self.set_selinux_context(
+            pub_path, 'unconfined_u:object_r:ssh_home_t:s0')
         self.set_selinux_context(path, 'unconfined_u:object_r:ssh_home_t:s0')
         os.chmod(path, 0o644)
         os.chmod(pub_path, 0o600)
@@ -230,7 +232,7 @@ class DefaultOSUtil(object):
         """
         Checks and sets self.selinux = True if SELinux is available on system.
         """
-        if self.selinux == None:
+        if self.selinux is None:
             if shellutil.run("which getenforce", chk_err=False) == 0:
                 self.selinux = True
             else:
@@ -253,9 +255,11 @@ class DefaultOSUtil(object):
         and returns resulting exit code.
         """
         if self.is_selinux_system():
-            if state: s = '1'
-            else: s='0'
-            return shellutil.run("setenforce "+s)
+            if state:
+                s = '1'
+            else:
+                s = '0'
+            return shellutil.run("setenforce " + s)
 
     def set_selinux_context(self, path, con):
         """
@@ -273,36 +277,38 @@ class DefaultOSUtil(object):
         conf_file_path = conf.get_sshd_conf_file_path()
         conf_file = fileutil.read_file(conf_file_path).split("\n")
         textutil.set_ssh_config(conf_file, "PasswordAuthentication", option)
-        textutil.set_ssh_config(conf_file, "ChallengeResponseAuthentication", option)
+        textutil.set_ssh_config(
+            conf_file, "ChallengeResponseAuthentication", option)
         textutil.set_ssh_config(conf_file, "ClientAliveInterval", "180")
         fileutil.write_file(conf_file_path, "\n".join(conf_file))
         logger.info("{0} SSH password-based authentication methods."
                     .format("Disabled" if disable_password else "Enabled"))
         logger.info("Configured SSH client probing to keep connections alive.")
 
-
     def get_dvd_device(self, dev_dir='/dev'):
-        pattern=r'(sr[0-9]|hd[c-z]|cdrom[0-9]|cd[0-9])'
+        pattern = r'(sr[0-9]|hd[c-z]|cdrom[0-9]|cd[0-9])'
         for dvd in [re.match(pattern, dev) for dev in os.listdir(dev_dir)]:
             if dvd is not None:
                 return "/dev/{0}".format(dvd.group(0))
         raise OSUtilError("Failed to get dvd device")
 
-    def mount_dvd(self, max_retry=6, chk_err=True, dvd_device=None, mount_point=None):
+    def mount_dvd(self, max_retry=6, chk_err=True, dvd_device=None,
+                  mount_point=None):
         if dvd_device is None:
             dvd_device = self.get_dvd_device()
         if mount_point is None:
             mount_point = conf.get_dvd_mount_point()
         mountlist = shellutil.run_get_output("mount")[1]
         existing = self.get_mount_point(mountlist, dvd_device)
-        if existing is not None: #Already mounted
+        if existing is not None:  # Already mounted
             logger.info("{0} is already mounted at {1}", dvd_device, existing)
             return
         if not os.path.isdir(mount_point):
             os.makedirs(mount_point)
 
         for retry in range(0, max_retry):
-            retcode = self.mount(dvd_device, mount_point, option="-o ro -t udf,iso9660",
+            retcode = self.mount(dvd_device, mount_point,
+                                 option="-o ro -t udf,iso9660",
                                  chk_err=chk_err)
             if retcode == 0:
                 logger.info("Successfully mounted dvd")
@@ -355,7 +361,8 @@ class DefaultOSUtil(object):
         for retry in range(0, max_retry):
             ret = shellutil.run("lsmod | grep ata_piix", chk_err=False)
             if ret == 0:
-                logger.info("Module driver for ATAPI CD-ROM is already present.")
+                logger.info(
+                    "Module driver for ATAPI CD-ROM is already present.")
                 return True
             if retry < max_retry - 1:
                 time.sleep(1)
@@ -369,14 +376,13 @@ class DefaultOSUtil(object):
         return shellutil.run("umount {0}".format(mount_point), chk_err=chk_err)
 
     def allow_dhcp_broadcast(self):
-        #Open DHCP port if iptables is enabled.
+        # Open DHCP port if iptables is enabled.
         # We supress error logging on error.
         shellutil.run("iptables -D INPUT -p udp --dport 68 -j ACCEPT",
                       chk_err=False)
         shellutil.run("iptables -I INPUT -p udp --dport 68 -j ACCEPT",
                       chk_err=False)
 
-
     def remove_rules_files(self, rules_files=__RULES_FILES__):
         lib_dir = conf.get_lib_dir()
         for src in rules_files:
@@ -404,9 +410,9 @@ class DefaultOSUtil(object):
         Convienience function, returns mac addr bound to
         first non-loopback interface.
         """
-        ifname=''
-        while len(ifname) < 2 :
-            ifname=self.get_first_if()[0]
+        ifname = ''
+        while len(ifname) < 2:
+            ifname = self.get_first_if()[0]
         addr = self.get_if_mac(ifname)
         return textutil.hexstr_to_bytearray(addr)
 
@@ -417,34 +423,36 @@ class DefaultOSUtil(object):
         sock = socket.socket(socket.AF_INET,
                              socket.SOCK_DGRAM,
                              socket.IPPROTO_UDP)
-        param = struct.pack('256s', (ifname[:15]+('\0'*241)).encode('latin-1'))
+        param = struct.pack(
+            '256s', (ifname[: 15] + ('\0' * 241)).encode('latin-1'))
         info = fcntl.ioctl(sock.fileno(), 0x8927, param)
-        return ''.join(['%02X' % textutil.str_to_ord(char) for char in info[18:24]])
+        return ''.join(['%02X' % textutil.str_to_ord(char)
+                        for char in info[18: 24]])
 
     def get_first_if(self):
         """
         Return the interface name, and ip addr of the
         first active non-loopback interface.
         """
-        iface=''
-        expected=16 # how many devices should I expect...
-        struct_size=40 # for 64bit the size is 40 bytes
+        iface = ''
+        expected = 16  # how many devices should I expect...
+        struct_size = 40  # for 64bit the size is 40 bytes
         sock = socket.socket(socket.AF_INET,
                              socket.SOCK_DGRAM,
                              socket.IPPROTO_UDP)
-        buff=array.array('B', b'\0' * (expected * struct_size))
+        buff = array.array('B', b'\0' * (expected * struct_size))
         param = struct.pack('iL',
-                            expected*struct_size,
+                            expected * struct_size,
                             buff.buffer_info()[0])
         ret = fcntl.ioctl(sock.fileno(), 0x8912, param)
-        retsize=(struct.unpack('iL', ret)[0])
+        retsize = (struct.unpack('iL', ret)[0])
         if retsize == (expected * struct_size):
             logger.warn(('SIOCGIFCONF returned more than {0} up '
                          'network interfaces.'), expected)
         sock = buff.tostring()
         primary = bytearray(self.get_primary_interface(), encoding='utf-8')
         for i in range(0, struct_size * expected, struct_size):
-            iface=sock[i:i+16].split(b'\0', 1)[0]
+            iface = sock[i:i + 16].split(b'\0', 1)[0]
             if len(iface) == 0 or self.is_loopback(iface) or iface != primary:
                 # test the next one
                 logger.info('interface [{0}] skipped'.format(iface))
@@ -454,7 +462,7 @@ class DefaultOSUtil(object):
                 logger.info('interface [{0}] selected'.format(iface))
                 break
 
-        return iface.decode('latin-1'), socket.inet_ntoa(sock[i+20:i+24])
+        return iface.decode('latin-1'), socket.inet_ntoa(sock[i + 20:i + 24])
 
     def get_primary_interface(self):
         """
@@ -482,7 +490,9 @@ class DefaultOSUtil(object):
         logger.info("examine /proc/net/route for primary interface")
         with open('/proc/net/route') as routing_table:
             idx = 0
-            for header in filter(lambda h: len(h) > 0, routing_table.readline().strip(" \n").split("\t")):
+            for header in filter(
+                    lambda h: len(h) > 0,
+                    routing_table.readline().strip(" \n"). split("\t")):
                 if header == hdr_iface:
                     idx_iface = idx
                 elif header == hdr_dest:
@@ -494,7 +504,8 @@ class DefaultOSUtil(object):
                 idx = idx + 1
             for entry in routing_table.readlines():
                 route = entry.strip(" \n").split("\t")
-                if route[idx_dest] == DEFAULT_DEST and int(route[idx_flags]) & RTF_GATEWAY == RTF_GATEWAY:
+                if route[idx_dest] == DEFAULT_DEST and int(
+                        route[idx_flags]) & RTF_GATEWAY == RTF_GATEWAY:
                     metric = int(route[idx_metric])
                     iface = route[idx_iface]
                     if primary is None or metric < primary_metric:
@@ -507,7 +518,6 @@ class DefaultOSUtil(object):
         logger.info('primary interface is [{0}]'.format(primary))
         return primary
 
-
     def is_primary_interface(self, ifname):
         """
         Indicate whether the specified interface is the primary.
@@ -516,13 +526,17 @@ class DefaultOSUtil(object):
         """
         return self.get_primary_interface() == ifname
 
-
     def is_loopback(self, ifname):
-        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
-        result = fcntl.ioctl(s.fileno(), 0x8913, struct.pack('256s', ifname[:15]))
+        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM,
+                          socket.IPPROTO_UDP)
+        result = fcntl.ioctl(
+            s.fileno(),
+            0x8913, struct.pack('256s', ifname[: 15]))
         flags, = struct.unpack('H', result[16:18])
         isloopback = flags & 8 == 8
-        logger.info('interface [{0}] has flags [{1}], is loopback [{2}]'.format(ifname, flags, isloopback))
+        logger.info(
+            'interface [{0}] has flags [{1}], is loopback [{2}]'.format(
+                ifname, flags, isloopback))
         return isloopback
 
     def get_dhcp_lease_endpoint(self):
@@ -564,7 +578,8 @@ class DefaultOSUtil(object):
                         has_option_245 = False
                         expired = True
                     elif HEADER_DNS in line:
-                        cached_endpoint = line.replace(HEADER_DNS, '').strip(" ;")
+                        cached_endpoint = line.replace(
+                            HEADER_DNS, '').strip(" ;")
                     elif HEADER_OPTION in line:
                         has_option_245 = True
                     elif HEADER_EXPIRE in line:
@@ -572,18 +587,25 @@ class DefaultOSUtil(object):
                             expired = False
                         else:
                             try:
-                                expire_string = line.split(" ", 4)[-1].strip(";")
-                                expire_date = datetime.datetime.strptime(expire_string, FORMAT_DATETIME)
+                                expire_string = line.split(
+                                    " ", 4)[-1].strip(";")
+                                expire_date = datetime.datetime.strptime(
+                                    expire_string, FORMAT_DATETIME)
                                 if expire_date > datetime.datetime.utcnow():
                                     expired = False
                             except:
-                                logger.error("could not parse expiry token '{0}'".format(line))
+                                logger.error(
+                                    "could not parse expiry token '{0}'".
+                                    format(line))
                     elif FOOTER_LEASE in line:
-                        logger.info("dhcp entry:{0}, 245:{1}, expired:{2}".format(
-                            cached_endpoint, has_option_245, expired))
-                        if not expired and cached_endpoint is not None and has_option_245:
+                        logger.info(
+                            "dhcp entry:{0}, 245:{1}, expired:{2}".format(
+                                cached_endpoint, has_option_245, expired))
+                        if (not expired and cached_endpoint is not None and
+                                has_option_245):
                             endpoint = cached_endpoint
-                            logger.info("found endpoint [{0}]".format(endpoint))
+                            logger.info(
+                                "found endpoint [{0}]".format(endpoint))
                             # we want to return the last valid entry, so
                             # keep searching
         if endpoint is not None:
@@ -596,7 +618,7 @@ class DefaultOSUtil(object):
         routes = shellutil.run_get_output("route -n")[1]
         for route in routes.split("\n"):
             if route.startswith("0.0.0.0 ") or route.startswith("default "):
-               return False
+                return False
         return True
 
     def get_if_name(self):
@@ -606,8 +628,9 @@ class DefaultOSUtil(object):
         return self.get_first_if()[1]
 
     def set_route_for_dhcp_broadcast(self, ifname):
-        return shellutil.run("route add 255.255.255.255 dev {0}".format(ifname),
-                             chk_err=False)
+        return shellutil.run(
+            "route add 255.255.255.255 dev {0}".format(ifname),
+            chk_err=False)
 
     def remove_route_for_dhcp_broadcast(self, ifname):
         shellutil.run("route del 255.255.255.255 dev {0}".format(ifname),
@@ -649,7 +672,7 @@ class DefaultOSUtil(object):
         return shellutil.run(cmd, chk_err=False)
 
     def get_dhcp_pid(self):
-        ret= shellutil.run_get_output("pidof dhclient")
+        ret = shellutil.run_get_output("pidof dhclient")
         return ret[1] if ret[0] == 0 else None
 
     def set_hostname(self, hostname):
@@ -658,24 +681,28 @@ class DefaultOSUtil(object):
 
     def set_dhcp_hostname(self, hostname):
         autosend = r'^[^#]*?send\s*host-name.*?(<hostname>|gethostname[(,)])'
-        dhclient_files = ['/etc/dhcp/dhclient.conf', '/etc/dhcp3/dhclient.conf', '/etc/dhclient.conf']
+        dhclient_files = ['/etc/dhcp/dhclient.conf',
+                          '/etc/dhcp3/dhclient.conf', '/etc/dhclient.conf']
         for conf_file in dhclient_files:
             if not os.path.isfile(conf_file):
                 continue
             if fileutil.findstr_in_file(conf_file, autosend):
-                #Return if auto send host-name is configured
+                # Return if auto send host-name is configured
                 return
             fileutil.update_conf_file(conf_file,
                                       'send host-name',
                                       'send host-name "{0}";'.format(hostname))
 
     def restart_if(self, ifname, retries=3, wait=5):
-        retry_limit=retries+1
+        retry_limit = retries + 1
         for attempt in range(1, retry_limit):
-            return_code=shellutil.run("ifdown {0} && ifup {0}".format(ifname))
+            return_code = shellutil.run(
+                "ifdown {0} && ifup {0}".format(ifname))
             if return_code == 0:
                 return
-            logger.warn("failed to restart {0}: return code {1}".format(ifname, return_code))
+            logger.warn(
+                "failed to restart {0}: return code {1}".format(
+                    ifname, return_code))
             if attempt < retry_limit:
                 logger.info("retrying in {0} seconds".format(wait))
                 time.sleep(wait)
@@ -718,7 +745,7 @@ class DefaultOSUtil(object):
             for entry in mountlist.split('\n'):
                 if(re.search(device, entry)):
                     tokens = entry.split()
-                    #Return the 3rd column of this line
+                    # Return the 3rd column of this line
                     return tokens[2] if len(tokens) > 2 else None
         return None
 
@@ -735,14 +762,15 @@ class DefaultOSUtil(object):
         device = None
         path = "/sys/bus/vmbus/devices/"
         for vmbus in os.listdir(path):
-            deviceid = fileutil.read_file(os.path.join(path, vmbus, "device_id"))
+            deviceid = fileutil.read_file(
+                os.path.join(path, vmbus, "device_id"))
             guid = deviceid.lstrip('{').split('-')
             if guid[0] == g0 and guid[1] == "000" + ustr(port_id):
                 for root, dirs, files in os.walk(path + vmbus):
                     if root.endswith("/block"):
                         device = dirs[0]
                         break
-                    else : #older distros
+                    else:  # older distros
                         for d in dirs:
                             if ':' in d and "block" == d.split(':')[0]:
                                 device = d.split(':')[1]
@@ -764,25 +792,26 @@ class DefaultOSUtil(object):
         cmd = "grep MemTotal /proc/meminfo |awk '{print $2}'"
         ret = shellutil.run_get_output(cmd)
         if ret[0] == 0:
-            return int(ret[1])/1024
+            return int(ret[1]) / 1024
         else:
             raise OSUtilError("Failed to get total memory: {0}".format(ret[1]))
 
     def get_processor_cores(self):
-        ret = shellutil.run_get_output("grep 'processor.*:' /proc/cpuinfo |wc -l")
+        ret = shellutil.run_get_output(
+            "grep 'processor.*:' /proc/cpuinfo |wc -l")
         if ret[0] == 0:
             return int(ret[1])
         else:
             raise OSUtilError("Failed to get processor cores")
 
     def set_admin_access_to_ip(self, dest_ip):
-        #This allows root to access dest_ip
-        rm_old= "iptables -D OUTPUT -d {0} -j ACCEPT -m owner --uid-owner 0"
+        # This allows root to access dest_ip
+        rm_old = "iptables -D OUTPUT -d {0} -j ACCEPT -m owner --uid-owner 0"
         rule = "iptables -A OUTPUT -d {0} -j ACCEPT -m owner --uid-owner 0"
         shellutil.run(rm_old.format(dest_ip), chk_err=False)
         shellutil.run(rule.format(dest_ip))
 
-        #This blocks all other users to access dest_ip
+        # This blocks all other users to access dest_ip
         rm_old = "iptables -D OUTPUT -d {0} -j DROP"
         rule = "iptables -A OUTPUT -d {0} -j DROP"
         shellutil.run(rm_old.format(dest_ip), chk_err=False)
diff --git a/azurelinuxagent/common/osutil/factory.py b/azurelinuxagent/common/osutil/factory.py
index 35875f4..1e477f1 100644
--- a/azurelinuxagent/common/osutil/factory.py
+++ b/azurelinuxagent/common/osutil/factory.py
@@ -18,7 +18,7 @@
 import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.utils.textutil import Version
 from azurelinuxagent.common.version import DISTRO_NAME, DISTRO_VERSION, \
-                                     DISTRO_FULL_NAME
+    DISTRO_FULL_NAME
 
 from .default import DefaultOSUtil
 from .clearlinux import ClearLinuxUtil
@@ -28,7 +28,8 @@ from .freebsd import FreeBSDOSUtil
 from .redhat import RedhatOSUtil, Redhat6xOSUtil
 from .suse import SUSEOSUtil, SUSE11OSUtil
 from .ubuntu import UbuntuOSUtil, Ubuntu12OSUtil, Ubuntu14OSUtil, \
-                    UbuntuSnappyOSUtil
+    UbuntuSnappyOSUtil
+
 
 def get_osutil(distro_name=DISTRO_NAME, distro_version=DISTRO_VERSION,
                distro_full_name=DISTRO_FULL_NAME):
@@ -39,7 +40,7 @@ def get_osutil(distro_name=DISTRO_NAME, distro_version=DISTRO_VERSION,
            Version(distro_version) == Version("12.10"):
             return Ubuntu12OSUtil()
         elif Version(distro_version) == Version("14.04") or \
-             Version(distro_version) == Version("14.10"):
+                Version(distro_version) == Version("14.10"):
             return Ubuntu14OSUtil()
         elif distro_full_name == "Snappy Ubuntu Core":
             return UbuntuSnappyOSUtil()
@@ -48,7 +49,7 @@ def get_osutil(distro_name=DISTRO_NAME, distro_version=DISTRO_VERSION,
     if distro_name == "coreos":
         return CoreOSUtil()
     if distro_name == "suse":
-        if distro_full_name=='SUSE Linux Enterprise Server' and \
+        if distro_full_name == 'SUSE Linux Enterprise Server' and \
            Version(distro_version) < Version('12') or \
            distro_full_name == 'openSUSE' and \
            Version(distro_version) < Version('13.2'):
@@ -66,7 +67,7 @@ def get_osutil(distro_name=DISTRO_NAME, distro_version=DISTRO_VERSION,
     elif distro_name == "freebsd":
         return FreeBSDOSUtil()
     else:
-        logger.warn("Unable to load distro implemetation for {0}.", distro_name)
+        logger.warn(
+            "Unable to load distro implemetation for {0}.", distro_name)
         logger.warn("Use default distro implemetation instead.")
         return DefaultOSUtil()
-
diff --git a/azurelinuxagent/common/osutil/freebsd.py b/azurelinuxagent/common/osutil/freebsd.py
index ddf8db6..18e67e9 100644
--- a/azurelinuxagent/common/osutil/freebsd.py
+++ b/azurelinuxagent/common/osutil/freebsd.py
@@ -25,6 +25,7 @@ from azurelinuxagent.common.osutil.default import DefaultOSUtil
 
 
 class FreeBSDOSUtil(DefaultOSUtil):
+
     def __init__(self):
         super(FreeBSDOSUtil, self).__init__()
         self._scsi_disks_timeout_set = False
@@ -79,7 +80,9 @@ class FreeBSDOSUtil(DefaultOSUtil):
     def del_root_password(self):
         err = shellutil.run('pw mod user root -w no')
         if err:
-            raise OSUtilError("Failed to delete root password: Failed to update password database.")
+            raise OSUtilError(
+                "Failed to delete root password: Failed to update password "
+                "database.")
 
     def get_if_mac(self, ifname):
         data = self._get_net_info()
@@ -96,8 +99,9 @@ class FreeBSDOSUtil(DefaultOSUtil):
 
     def is_missing_default_route(self):
         """
-        For FreeBSD, the default broadcast goes to current default gw, not a all-ones broadcast address, need to
-        specify the route manually to get it work in a VNET environment.
+        For FreeBSD, the default broadcast goes to current default gw, not a
+        all-ones broadcast address, need to specify the route manually to get
+        it work in a VNET environment.
         SEE ALSO: man ip(4) IP_ONESBCAST,
         """
         return True
@@ -106,16 +110,22 @@ class FreeBSDOSUtil(DefaultOSUtil):
         return True
 
     def start_dhcp_service(self):
-        shellutil.run("/etc/rc.d/dhclient start {0}".format(self.get_if_name()), chk_err=False)
+        shellutil.run(
+            "/etc/rc.d/dhclient start {0}".format(self.get_if_name()),
+            chk_err=False)
 
     def allow_dhcp_broadcast(self):
         pass
 
     def set_route_for_dhcp_broadcast(self, ifname):
-        return shellutil.run("route add 255.255.255.255 -iface {0}".format(ifname), chk_err=False)
+        return shellutil.run(
+            "route add 255.255.255.255 -iface {0}".format(ifname),
+            chk_err=False)
 
     def remove_route_for_dhcp_broadcast(self, ifname):
-        shellutil.run("route delete 255.255.255.255 -iface {0}".format(ifname), chk_err=False)
+        shellutil.run(
+            "route delete 255.255.255.255 -iface {0}".format(ifname),
+            chk_err=False)
 
     def get_dhcp_pid(self):
         ret = shellutil.run_get_output("pgrep -n dhclient")
@@ -129,7 +139,9 @@ class FreeBSDOSUtil(DefaultOSUtil):
 
     def restart_if(self, ifname):
         # Restart dhclient only to publish hostname
-        shellutil.run("/etc/rc.d/dhclient restart {0}".format(ifname), chk_err=False)
+        shellutil.run(
+            "/etc/rc.d/dhclient restart {0}".format(ifname),
+            chk_err=False)
 
     def get_total_mem(self):
         cmd = "sysctl hw.physmem |awk '{print $2}'"
@@ -137,12 +149,13 @@ class FreeBSDOSUtil(DefaultOSUtil):
         if ret:
             raise OSUtilError("Failed to get total memory: {0}".format(output))
         try:
-            return int(output)/1024/1024
+            return int(output) / 1024 / 1024
         except ValueError:
             raise OSUtilError("Failed to get total memory: {0}".format(output))
 
     def get_processor_cores(self):
-        ret, output = shellutil.run_get_output("sysctl hw.ncpu |awk '{print $2}'")
+        ret, output = shellutil.run_get_output(
+            "sysctl hw.ncpu |awk '{print $2}'")
         if ret:
             raise OSUtilError("Failed to get processor cores.")
 
@@ -155,9 +168,11 @@ class FreeBSDOSUtil(DefaultOSUtil):
         if self._scsi_disks_timeout_set:
             return
 
-        ret, output = shellutil.run_get_output('sysctl kern.cam.da.default_timeout={0}'.format(timeout))
+        ret, output = shellutil.run_get_output(
+            'sysctl kern.cam.da.default_timeout={0}'.format(timeout))
         if ret:
-            raise OSUtilError("Failed set SCSI disks timeout: {0}".format(output))
+            raise OSUtilError(
+                "Failed set SCSI disks timeout: {0}".format(output))
         self._scsi_disks_timeout_set = True
 
     def check_pid_alive(self, pid):
@@ -176,7 +191,8 @@ class FreeBSDOSUtil(DefaultOSUtil):
         inet = ''
         mac = ''
 
-        err, output = shellutil.run_get_output('ifconfig -l ether', chk_err=False)
+        err, output = shellutil.run_get_output(
+            'ifconfig -l ether', chk_err=False)
         if err:
             raise OSUtilError("Can't find ether interface:{0}".format(output))
         ifaces = output.split()
@@ -184,7 +200,8 @@ class FreeBSDOSUtil(DefaultOSUtil):
             raise OSUtilError("Can't find ether interface.")
         iface = ifaces[0]
 
-        err, output = shellutil.run_get_output('ifconfig ' + iface, chk_err=False)
+        err, output = shellutil.run_get_output(
+            'ifconfig ' + iface, chk_err=False)
         if err:
             raise OSUtilError("Can't get info for interface:{0}".format(iface))
 
diff --git a/azurelinuxagent/common/osutil/redhat.py b/azurelinuxagent/common/osutil/redhat.py
index 03084b6..c135103 100644
--- a/azurelinuxagent/common/osutil/redhat.py
+++ b/azurelinuxagent/common/osutil/redhat.py
@@ -36,7 +36,9 @@ import azurelinuxagent.common.utils.textutil as textutil
 from azurelinuxagent.common.utils.cryptutil import CryptUtil
 from azurelinuxagent.common.osutil.default import DefaultOSUtil
 
+
 class Redhat6xOSUtil(DefaultOSUtil):
+
     def __init__(self):
         super(Redhat6xOSUtil, self).__init__()
 
@@ -57,7 +59,7 @@ class Redhat6xOSUtil(DefaultOSUtil):
 
     def unregister_agent_service(self):
         return shellutil.run("chkconfig --del waagent", chk_err=False)
-    
+
     def openssl_to_openssh(self, input_file, output_file):
         pubkey = fileutil.read_file(input_file)
         try:
@@ -67,9 +69,9 @@ class Redhat6xOSUtil(DefaultOSUtil):
             raise OSUtilError(ustr(e))
         fileutil.write_file(output_file, ssh_rsa_pubkey)
 
-    #Override
+    # Override
     def get_dhcp_pid(self):
-        ret= shellutil.run_get_output("pidof dhclient")
+        ret = shellutil.run_get_output("pidof dhclient")
         return ret[1] if ret[0] == 0 else None
 
     def set_hostname(self, hostname):
@@ -88,9 +90,12 @@ class Redhat6xOSUtil(DefaultOSUtil):
                                   'DHCP_HOSTNAME={0}'.format(hostname))
 
     def get_dhcp_lease_endpoint(self):
-        return self.get_endpoint_from_leases_path('/var/lib/dhclient/dhclient-*.leases')
+        return self.get_endpoint_from_leases_path(
+            '/var/lib/dhclient/dhclient-*.leases')
+
 
 class RedhatOSUtil(Redhat6xOSUtil):
+
     def __init__(self):
         super(RedhatOSUtil, self).__init__()
 
@@ -118,5 +123,7 @@ class RedhatOSUtil(Redhat6xOSUtil):
         DefaultOSUtil.openssl_to_openssh(self, input_file, output_file)
 
     def get_dhcp_lease_endpoint(self):
-        # centos7 has this weird naming with double hyphen like /var/lib/dhclient/dhclient--eth0.lease
-        return self.get_endpoint_from_leases_path('/var/lib/dhclient/dhclient-*.lease')
+        # centos7 has this weird naming with double hyphen like
+        # /var/lib/dhclient/dhclient--eth0.lease
+        return self.get_endpoint_from_leases_path(
+            '/var/lib/dhclient/dhclient-*.lease')
diff --git a/azurelinuxagent/common/osutil/suse.py b/azurelinuxagent/common/osutil/suse.py
index f0ed0c0..21df42c 100644
--- a/azurelinuxagent/common/osutil/suse.py
+++ b/azurelinuxagent/common/osutil/suse.py
@@ -29,20 +29,23 @@ import azurelinuxagent.common.logger as logger
 import azurelinuxagent.common.utils.fileutil as fileutil
 import azurelinuxagent.common.utils.shellutil as shellutil
 import azurelinuxagent.common.utils.textutil as textutil
-from azurelinuxagent.common.version import DISTRO_NAME, DISTRO_VERSION, DISTRO_FULL_NAME
+from azurelinuxagent.common.version import DISTRO_NAME, \
+    DISTRO_VERSION, DISTRO_FULL_NAME
 from azurelinuxagent.common.osutil.default import DefaultOSUtil
 
+
 class SUSE11OSUtil(DefaultOSUtil):
+
     def __init__(self):
         super(SUSE11OSUtil, self).__init__()
-        self.dhclient_name='dhcpcd'
+        self.dhclient_name = 'dhcpcd'
 
     def set_hostname(self, hostname):
         fileutil.write_file('/etc/HOSTNAME', hostname)
         shellutil.run("hostname {0}".format(hostname), chk_err=False)
 
     def get_dhcp_pid(self):
-        ret= shellutil.run_get_output("pidof {0}".format(self.dhclient_name))
+        ret = shellutil.run_get_output("pidof {0}".format(self.dhclient_name))
         return ret[1] if ret[0] == 0 else None
 
     def is_dhcp_enabled(self):
@@ -56,7 +59,7 @@ class SUSE11OSUtil(DefaultOSUtil):
         cmd = "/sbin/service {0} start".format(self.dhclient_name)
         return shellutil.run(cmd, chk_err=False)
 
-    def start_network(self) :
+    def start_network(self):
         return shellutil.run("/sbin/service start network", chk_err=False)
 
     def restart_ssh_service(self):
@@ -74,7 +77,9 @@ class SUSE11OSUtil(DefaultOSUtil):
     def unregister_agent_service(self):
         return shellutil.run("/sbin/insserv -r waagent", chk_err=False)
 
+
 class SUSEOSUtil(SUSE11OSUtil):
+
     def __init__(self):
         super(SUSEOSUtil, self).__init__()
         self.dhclient_name = 'wickedd-dhcp4'
@@ -87,7 +92,7 @@ class SUSEOSUtil(SUSE11OSUtil):
         cmd = "systemctl start {0}".format(self.dhclient_name)
         return shellutil.run(cmd, chk_err=False)
 
-    def start_network(self) :
+    def start_network(self):
         return shellutil.run("systemctl start network", chk_err=False)
 
     def restart_ssh_service(self):
@@ -104,5 +109,3 @@ class SUSEOSUtil(SUSE11OSUtil):
 
     def unregister_agent_service(self):
         return shellutil.run("systemctl disable waagent", chk_err=False)
-
-
diff --git a/azurelinuxagent/common/osutil/ubuntu.py b/azurelinuxagent/common/osutil/ubuntu.py
index 4032cf4..f3e5d40 100644
--- a/azurelinuxagent/common/osutil/ubuntu.py
+++ b/azurelinuxagent/common/osutil/ubuntu.py
@@ -19,7 +19,9 @@
 import azurelinuxagent.common.utils.shellutil as shellutil
 from azurelinuxagent.common.osutil.default import DefaultOSUtil
 
+
 class Ubuntu14OSUtil(DefaultOSUtil):
+
     def __init__(self):
         super(Ubuntu14OSUtil, self).__init__()
 
@@ -39,18 +41,23 @@ class Ubuntu14OSUtil(DefaultOSUtil):
         pass
 
     def get_dhcp_lease_endpoint(self):
-        return self.get_endpoint_from_leases_path('/var/lib/dhcp/dhclient.*.leases')
+        return self.get_endpoint_from_leases_path(
+            '/var/lib/dhcp/dhclient.*.leases')
+
 
 class Ubuntu12OSUtil(Ubuntu14OSUtil):
+
     def __init__(self):
         super(Ubuntu12OSUtil, self).__init__()
 
-    #Override
+    # Override
     def get_dhcp_pid(self):
-        ret= shellutil.run_get_output("pidof dhclient3")
+        ret = shellutil.run_get_output("pidof dhclient3")
         return ret[1] if ret[0] == 0 else None
 
+
 class UbuntuOSUtil(Ubuntu14OSUtil):
+
     def __init__(self):
         super(UbuntuOSUtil, self).__init__()
 
@@ -60,7 +67,9 @@ class UbuntuOSUtil(Ubuntu14OSUtil):
     def unregister_agent_service(self):
         return shellutil.run("systemctl mask walinuxagent", chk_err=False)
 
+
 class UbuntuSnappyOSUtil(Ubuntu14OSUtil):
+
     def __init__(self):
         super(UbuntuSnappyOSUtil, self).__init__()
         self.conf_file_path = '/apps/walinuxagent/current/waagent.conf'
diff --git a/azurelinuxagent/common/protocol/__init__.py b/azurelinuxagent/common/protocol/__init__.py
index fb7c273..c43df5e 100644
--- a/azurelinuxagent/common/protocol/__init__.py
+++ b/azurelinuxagent/common/protocol/__init__.py
@@ -16,6 +16,5 @@
 #
 
 from azurelinuxagent.common.protocol.util import get_protocol_util, \
-                                                 OVF_FILE_NAME, \
-                                                 TAG_FILE_NAME
-
+    OVF_FILE_NAME, \
+    TAG_FILE_NAME
diff --git a/azurelinuxagent/common/protocol/hostplugin.py b/azurelinuxagent/common/protocol/hostplugin.py
index 6569604..2774b94 100644
--- a/azurelinuxagent/common/protocol/hostplugin.py
+++ b/azurelinuxagent/common/protocol/hostplugin.py
@@ -28,6 +28,7 @@ API_VERSION = "2015-09-01"
 
 
 class HostPluginProtocol(object):
+
     def __init__(self, endpoint):
         if endpoint is None:
             raise ProtocolError("Host plugin endpoint not provided")
diff --git a/azurelinuxagent/common/protocol/metadata.py b/azurelinuxagent/common/protocol/metadata.py
index f86f72f..afa9408 100644
--- a/azurelinuxagent/common/protocol/metadata.py
+++ b/azurelinuxagent/common/protocol/metadata.py
@@ -30,23 +30,25 @@ import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.common.utils.cryptutil import CryptUtil
 from azurelinuxagent.common.protocol.restapi import *
 
-METADATA_ENDPOINT='169.254.169.254'
-APIVERSION='2015-05-01-preview'
+METADATA_ENDPOINT = '169.254.169.254'
+APIVERSION = '2015-05-01-preview'
 BASE_URI = "http://{0}/Microsoft.Compute/{1}?api-version={2}{3}"
 
 TRANSPORT_PRV_FILE_NAME = "V2TransportPrivate.pem"
 TRANSPORT_CERT_FILE_NAME = "V2TransportCert.pem"
 
-#TODO remote workarround for azure stack 
+# TODO remote workarround for azure stack
 MAX_PING = 30
 RETRY_PING_INTERVAL = 10
 
+
 def _add_content_type(headers):
     if headers is None:
         headers = {}
     headers["content-type"] = "application/json"
     return headers
 
+
 class MetadataProtocol(Protocol):
 
     def __init__(self, apiversion=APIVERSION, endpoint=METADATA_ENDPOINT):
@@ -65,7 +67,7 @@ class MetadataProtocol(Protocol):
                                                     self.apiversion, "")
         self.vm_status_uri = BASE_URI.format(self.endpoint, "status/vmagent",
                                              self.apiversion, "")
-        self.ext_status_uri = BASE_URI.format(self.endpoint, 
+        self.ext_status_uri = BASE_URI.format(self.endpoint,
                                               "status/extensions/{0}",
                                               self.apiversion, "")
         self.event_uri = BASE_URI.format(self.endpoint, "status/telemetry",
@@ -88,7 +90,7 @@ class MetadataProtocol(Protocol):
         return data, etag
 
     def _put_data(self, url, data, headers=None):
-        headers = _add_content_type(headers) 
+        headers = _add_content_type(headers)
         try:
             resp = restutil.http_put(url, json.dumps(data), headers=headers)
         except HttpError as e:
@@ -97,16 +99,16 @@ class MetadataProtocol(Protocol):
             raise ProtocolError("{0} - PUT: {1}".format(resp.status, url))
 
     def _post_data(self, url, data, headers=None):
-        headers = _add_content_type(headers) 
+        headers = _add_content_type(headers)
         try:
             resp = restutil.http_post(url, json.dumps(data), headers=headers)
         except HttpError as e:
             raise ProtocolError(ustr(e))
         if resp.status != httpclient.CREATED:
             raise ProtocolError("{0} - POST: {1}".format(resp.status, url))
-    
+
     def _get_trans_cert(self):
-        trans_crt_file = os.path.join(conf.get_lib_dir(), 
+        trans_crt_file = os.path.join(conf.get_lib_dir(),
                                       TRANSPORT_CERT_FILE_NAME)
         if not os.path.isfile(trans_crt_file):
             raise ProtocolError("{0} is missing.".format(trans_crt_file))
@@ -115,23 +117,22 @@ class MetadataProtocol(Protocol):
 
     def detect(self):
         self.get_vminfo()
-        trans_prv_file = os.path.join(conf.get_lib_dir(), 
+        trans_prv_file = os.path.join(conf.get_lib_dir(),
                                       TRANSPORT_PRV_FILE_NAME)
-        trans_cert_file = os.path.join(conf.get_lib_dir(), 
+        trans_cert_file = os.path.join(conf.get_lib_dir(),
                                        TRANSPORT_CERT_FILE_NAME)
         cryptutil = CryptUtil(conf.get_openssl_cmd())
         cryptutil.gen_transport_cert(trans_prv_file, trans_cert_file)
 
-        #"Install" the cert and private key to /var/lib/waagent
+        # "Install" the cert and private key to /var/lib/waagent
         thumbprint = cryptutil.get_thumbprint_from_crt(trans_cert_file)
-        prv_file = os.path.join(conf.get_lib_dir(), 
+        prv_file = os.path.join(conf.get_lib_dir(),
                                 "{0}.prv".format(thumbprint))
-        crt_file = os.path.join(conf.get_lib_dir(), 
+        crt_file = os.path.join(conf.get_lib_dir(),
                                 "{0}.crt".format(thumbprint))
         shutil.copyfile(trans_prv_file, prv_file)
         shutil.copyfile(trans_cert_file, crt_file)
 
-
     def get_vminfo(self):
         vminfo = VMInfo()
         data, etag = self._get_data(self.identity_uri)
@@ -139,18 +140,19 @@ class MetadataProtocol(Protocol):
         return vminfo
 
     def get_certs(self):
-        #TODO download and save certs
+        # TODO download and save certs
         return CertList()
 
     def get_vmagent_manifests(self, last_etag=None):
         manifests = VMAgentManifestList()
         data, etag = self._get_data(self.vmagent_uri)
-        if last_etag == None or last_etag < etag:
-            set_properties("vmAgentManifests", manifests.vmAgentManifests, data)
+        if last_etag is None or last_etag < etag:
+            set_properties("vmAgentManifests",
+                           manifests.vmAgentManifests, data)
         return manifests, etag
 
     def get_vmagent_pkgs(self, vmagent_manifest):
-        #Agent package is the same with extension handler
+        # Agent package is the same with extension handler
         vmagent_pkgs = ExtHandlerPackageList()
         data = None
         for manifest_uri in vmagent_manifest.versionsManifestUris:
@@ -173,7 +175,7 @@ class MetadataProtocol(Protocol):
         }
         ext_list = ExtHandlerList()
         data, etag = self._get_data(self.ext_uri, headers=headers)
-        if last_etag == None or last_etag < etag:
+        if last_etag is None or last_etag < etag:
             set_properties("extensionHandlers", ext_list.extHandlers, data)
         return ext_list, etag
 
@@ -198,7 +200,8 @@ class MetadataProtocol(Protocol):
     def report_vm_status(self, vm_status):
         validate_param('vmStatus', vm_status, VMStatus)
         data = get_properties(vm_status)
-        #TODO code field is not implemented for metadata protocol yet. Remove it
+        # TODO code field is not implemented for metadata protocol yet. Remove
+        # it
         handler_statuses = data['vmAgent']['extensionHandlers']
         for handler_status in handler_statuses:
             try:
@@ -215,9 +218,8 @@ class MetadataProtocol(Protocol):
         self._put_data(uri, data)
 
     def report_event(self, events):
-        #TODO disable telemetry for azure stack test
-        #validate_param('events', events, TelemetryEventList)
-        #data = get_properties(events)
-        #self._post_data(self.event_uri, data)
+        # TODO disable telemetry for azure stack test
+        # validate_param('events', events, TelemetryEventList)
+        # data = get_properties(events)
+        # self._post_data(self.event_uri, data)
         pass
-
diff --git a/azurelinuxagent/common/protocol/ovfenv.py b/azurelinuxagent/common/protocol/ovfenv.py
index 4901871..3b31d8d 100644
--- a/azurelinuxagent/common/protocol/ovfenv.py
+++ b/azurelinuxagent/common/protocol/ovfenv.py
@@ -27,20 +27,24 @@ import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.exception import ProtocolError
 from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.utils.fileutil as fileutil
-from azurelinuxagent.common.utils.textutil import parse_doc, findall, find, findtext
+from azurelinuxagent.common.utils.textutil import parse_doc, findall, find, \
+    findtext
 
 OVF_VERSION = "1.0"
 OVF_NAME_SPACE = "http://schemas.dmtf.org/ovf/environment/1"
 WA_NAME_SPACE = "http://schemas.microsoft.com/windowsazure"
 
+
 def _validate_ovf(val, msg):
     if val is None:
         raise ProtocolError("Failed to parse OVF XML: {0}".format(msg))
 
+
 class OvfEnv(object):
     """
     Read, and process provisioning info from provisioning file OvfEnv.xml
     """
+
     def __init__(self, xml_text):
         if xml_text is None:
             raise ValueError("ovf-env is None")
@@ -63,7 +67,7 @@ class OvfEnv(object):
         ovfns = OVF_NAME_SPACE
 
         xml_doc = parse_doc(xml_text)
-        
+
         environment = find(xml_doc, "Environment", namespace=ovfns)
         _validate_ovf(environment, "Environment not found")
 
@@ -76,8 +80,8 @@ class OvfEnv(object):
         if version > OVF_VERSION:
             logger.warn("Newer provisioning configuration detected. "
                         "Please consider updating waagent")
-        
-        conf_set = find(section, "LinuxProvisioningConfigurationSet", 
+
+        conf_set = find(section, "LinuxProvisioningConfigurationSet",
                         namespace=wans)
         _validate_ovf(conf_set, "LinuxProvisioningConfigurationSet not found")
 
@@ -86,12 +90,12 @@ class OvfEnv(object):
 
         self.username = findtext(conf_set, "UserName", namespace=wans)
         _validate_ovf(self.username, "UserName not found")
-        
+
         self.user_password = findtext(conf_set, "UserPassword", namespace=wans)
 
         self.customdata = findtext(conf_set, "CustomData", namespace=wans)
-        
-        auth_option = findtext(conf_set, "DisableSshPasswordAuthentication", 
+
+        auth_option = findtext(conf_set, "DisableSshPasswordAuthentication",
                                namespace=wans)
         if auth_option is not None and auth_option.lower() == "true":
             self.disable_ssh_password_auth = True
@@ -110,4 +114,3 @@ class OvfEnv(object):
             path = findtext(keypair, "Path", namespace=wans)
             fingerprint = findtext(keypair, "Fingerprint", namespace=wans)
             self.ssh_keypairs.append((path, fingerprint))
-
diff --git a/azurelinuxagent/common/protocol/restapi.py b/azurelinuxagent/common/protocol/restapi.py
index 7f00488..55d9fe1 100644
--- a/azurelinuxagent/common/protocol/restapi.py
+++ b/azurelinuxagent/common/protocol/restapi.py
@@ -26,6 +26,7 @@ from azurelinuxagent.common.exception import ProtocolError, HttpError
 from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.utils.restutil as restutil
 
+
 def validate_param(name, val, expected_type):
     if val is None:
         raise ProtocolError("{0} is None".format(name))
@@ -33,13 +34,14 @@ def validate_param(name, val, expected_type):
         raise ProtocolError(("{0} type should be {1} not {2}"
                              "").format(name, expected_type, type(val)))
 
+
 def set_properties(name, obj, data):
     if isinstance(obj, DataContract):
         validate_param("Property '{0}'".format(name), data, dict)
         for prob_name, prob_val in data.items():
             prob_full_name = "{0}.{1}".format(name, prob_name)
             try:
-                prob =  getattr(obj, prob_name)
+                prob = getattr(obj, prob_name)
             except AttributeError:
                 logger.warn("Unknown property: {0}", prob_full_name)
                 continue
@@ -56,6 +58,7 @@ def set_properties(name, obj, data):
     else:
         return data
 
+
 def get_properties(obj):
     if isinstance(obj, DataContract):
         data = {}
@@ -72,17 +75,23 @@ def get_properties(obj):
     else:
         return obj
 
+
 class DataContract(object):
     pass
 
+
 class DataContractList(list):
+
     def __init__(self, item_cls):
         self.item_cls = item_cls
 
 """
 Data contract between guest and host
 """
+
+
 class VMInfo(DataContract):
+
     def __init__(self, subscriptionId=None, vmName=None, containerId=None,
                  roleName=None, roleInstanceName=None, tenantName=None):
         self.subscriptionId = subscriptionId
@@ -92,31 +101,44 @@ class VMInfo(DataContract):
         self.roleInstanceName = roleInstanceName
         self.tenantName = tenantName
 
+
 class Cert(DataContract):
+
     def __init__(self, name=None, thumbprint=None, certificateDataUri=None):
         self.name = name
         self.thumbprint = thumbprint
         self.certificateDataUri = certificateDataUri
 
+
 class CertList(DataContract):
+
     def __init__(self):
         self.certificates = DataContractList(Cert)
 
-#TODO: confirm vmagent manifest schema
+# TODO: confirm vmagent manifest schema
+
+
 class VMAgentManifestUri(DataContract):
+
     def __init__(self, uri=None):
         self.uri = uri
 
+
 class VMAgentManifest(DataContract):
+
     def __init__(self, family=None):
         self.family = family
         self.versionsManifestUris = DataContractList(VMAgentManifestUri)
 
+
 class VMAgentManifestList(DataContract):
+
     def __init__(self):
         self.vmAgentManifests = DataContractList(VMAgentManifest)
 
+
 class Extension(DataContract):
+
     def __init__(self, name=None, sequenceNumber=None, publicSettings=None,
                  protectedSettings=None, certificateThumbprint=None):
         self.name = name
@@ -125,62 +147,84 @@ class Extension(DataContract):
         self.protectedSettings = protectedSettings
         self.certificateThumbprint = certificateThumbprint
 
+
 class ExtHandlerProperties(DataContract):
+
     def __init__(self):
         self.version = None
         self.upgradePolicy = None
         self.state = None
         self.extensions = DataContractList(Extension)
 
+
 class ExtHandlerVersionUri(DataContract):
+
     def __init__(self):
         self.uri = None
 
+
 class ExtHandler(DataContract):
+
     def __init__(self, name=None):
         self.name = name
         self.properties = ExtHandlerProperties()
         self.versionUris = DataContractList(ExtHandlerVersionUri)
 
+
 class ExtHandlerList(DataContract):
+
     def __init__(self):
         self.extHandlers = DataContractList(ExtHandler)
 
+
 class ExtHandlerPackageUri(DataContract):
+
     def __init__(self, uri=None):
         self.uri = uri
 
+
 class ExtHandlerPackage(DataContract):
-    def __init__(self, version = None):
+
+    def __init__(self, version=None):
         self.version = version
         self.uris = DataContractList(ExtHandlerPackageUri)
         # TODO update the naming to align with metadata protocol
         self.isinternal = False
 
+
 class ExtHandlerPackageList(DataContract):
+
     def __init__(self):
         self.versions = DataContractList(ExtHandlerPackage)
 
+
 class VMProperties(DataContract):
+
     def __init__(self, certificateThumbprint=None):
-        #TODO need to confirm the property name
+        # TODO need to confirm the property name
         self.certificateThumbprint = certificateThumbprint
 
+
 class ProvisionStatus(DataContract):
+
     def __init__(self, status=None, subStatus=None, description=None):
         self.status = status
         self.subStatus = subStatus
         self.description = description
         self.properties = VMProperties()
 
+
 class ExtensionSubStatus(DataContract):
+
     def __init__(self, name=None, status=None, code=None, message=None):
         self.name = name
         self.status = status
         self.code = code
         self.message = message
 
+
 class ExtensionStatus(DataContract):
+
     def __init__(self, configurationAppliedTime=None, operation=None,
                  status=None, seq_no=None, code=None, message=None):
         self.configurationAppliedTime = configurationAppliedTime
@@ -191,8 +235,10 @@ class ExtensionStatus(DataContract):
         self.message = message
         self.substatusList = DataContractList(ExtensionSubStatus)
 
+
 class ExtHandlerStatus(DataContract):
-    def __init__(self, name=None, version=None, status=None, code=0, 
+
+    def __init__(self, name=None, version=None, status=None, code=0,
                  message=None):
         self.name = name
         self.version = version
@@ -201,32 +247,43 @@ class ExtHandlerStatus(DataContract):
         self.message = message
         self.extensions = DataContractList(ustr)
 
+
 class VMAgentStatus(DataContract):
+
     def __init__(self, version=None, status=None, message=None):
         self.version = version
         self.status = status
         self.message = message
         self.extensionHandlers = DataContractList(ExtHandlerStatus)
 
+
 class VMStatus(DataContract):
+
     def __init__(self):
         self.vmAgent = VMAgentStatus()
 
+
 class TelemetryEventParam(DataContract):
+
     def __init__(self, name=None, value=None):
         self.name = name
         self.value = value
 
+
 class TelemetryEvent(DataContract):
+
     def __init__(self, eventId=None, providerId=None):
         self.eventId = eventId
         self.providerId = providerId
         self.parameters = DataContractList(TelemetryEventParam)
 
+
 class TelemetryEventList(DataContract):
+
     def __init__(self):
         self.events = DataContractList(TelemetryEvent)
 
+
 class Protocol(DataContract):
 
     def detect(self):
@@ -240,7 +297,7 @@ class Protocol(DataContract):
 
     def get_vmagent_manifests(self):
         raise NotImplementedError()
-    
+
     def get_vmagent_pkgs(self):
         raise NotImplementedError()
 
@@ -269,4 +326,3 @@ class Protocol(DataContract):
 
     def report_event(self, event):
         raise NotImplementedError()
-
diff --git a/azurelinuxagent/common/protocol/util.py b/azurelinuxagent/common/protocol/util.py
index 7e7a74f..ff63028 100644
--- a/azurelinuxagent/common/protocol/util.py
+++ b/azurelinuxagent/common/protocol/util.py
@@ -24,7 +24,7 @@ import threading
 import azurelinuxagent.common.conf as conf
 import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.exception import ProtocolError, OSUtilError, \
-                                      ProtocolNotFoundError, DhcpError
+    ProtocolNotFoundError, DhcpError
 from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.common.osutil import get_osutil
@@ -32,31 +32,34 @@ from azurelinuxagent.common.dhcp import get_dhcp_handler
 from azurelinuxagent.common.protocol.ovfenv import OvfEnv
 from azurelinuxagent.common.protocol.wire import WireProtocol
 from azurelinuxagent.common.protocol.metadata import MetadataProtocol, \
-                                                     METADATA_ENDPOINT
+    METADATA_ENDPOINT
 import azurelinuxagent.common.utils.shellutil as shellutil
 
 OVF_FILE_NAME = "ovf-env.xml"
 
-#Tag file to indicate usage of metadata protocol
-TAG_FILE_NAME = "useMetadataEndpoint.tag" 
+# Tag file to indicate usage of metadata protocol
+TAG_FILE_NAME = "useMetadataEndpoint.tag"
 
 PROTOCOL_FILE_NAME = "Protocol"
 
-#MAX retry times for protocol probing
+# MAX retry times for protocol probing
 MAX_RETRY = 360
 
 PROBE_INTERVAL = 10
 
 ENDPOINT_FILE_NAME = "WireServerEndpoint"
 
+
 def get_protocol_util():
     return ProtocolUtil()
 
+
 class ProtocolUtil(object):
     """
-    ProtocolUtil handles initialization for protocol instance. 2 protocol types 
+    ProtocolUtil handles initialization for protocol instance. 2 protocol types
     are invoked, wire protocol and metadata protocols.
     """
+
     def __init__(self):
         self.lock = threading.Lock()
         self.protocol = None
@@ -78,11 +81,11 @@ class ProtocolUtil(object):
             ovfxml = re.sub("<UserPassword>.*?<", "<UserPassword>*<", ovfxml)
             ovf_file_path = os.path.join(conf.get_lib_dir(), OVF_FILE_NAME)
             fileutil.write_file(ovf_file_path, ovfxml)
-            
+
             if os.path.isfile(tag_file_path_on_dvd):
                 logger.info("Found {0} in provisioning ISO", TAG_FILE_NAME)
                 tag_file_path = os.path.join(conf.get_lib_dir(), TAG_FILE_NAME)
-                shutil.copyfile(tag_file_path_on_dvd, tag_file_path) 
+                shutil.copyfile(tag_file_path_on_dvd, tag_file_path)
 
         except (OSUtilError, IOError) as e:
             raise ProtocolError(ustr(e))
@@ -119,7 +122,7 @@ class ProtocolUtil(object):
             fileutil.write_file(file_path, endpoint)
         except IOError as e:
             raise OSUtilError(ustr(e))
-   
+
     def _detect_wire_protocol(self):
         endpoint = self.dhcp_handler.endpoint
         if endpoint is None:
@@ -129,7 +132,7 @@ class ProtocolUtil(object):
             except DhcpError as e:
                 raise ProtocolError(ustr(e))
             endpoint = self.dhcp_handler.endpoint
-        
+
         try:
             protocol = WireProtocol(endpoint)
             protocol.detect()
@@ -145,14 +148,14 @@ class ProtocolUtil(object):
     def _detect_metadata_protocol(self):
         protocol = MetadataProtocol()
         protocol.detect()
-        
-        #Only allow root access METADATA_ENDPOINT
+
+        # Only allow root access METADATA_ENDPOINT
         self.osutil.set_admin_access_to_ip(METADATA_ENDPOINT)
-        
+
         self.save_protocol("MetadataProtocol")
 
         return protocol
-            
+
     def _detect_protocol(self, protocols):
         """
         Probe protocol endpoints in turn.
@@ -164,15 +167,15 @@ class ProtocolUtil(object):
                 try:
                     if protocol == "WireProtocol":
                         return self._detect_wire_protocol()
-                    
+
                     if protocol == "MetadataProtocol":
                         return self._detect_metadata_protocol()
 
                 except ProtocolError as e:
-                    logger.info("Protocol endpoint not found: {0}, {1}", 
+                    logger.info("Protocol endpoint not found: {0}, {1}",
                                 protocol, e)
 
-            if retry < MAX_RETRY -1:
+            if retry < MAX_RETRY - 1:
                 logger.info("Retry detect protocols: retry={0}", retry)
                 time.sleep(PROBE_INTERVAL)
         raise ProtocolNotFoundError("No protocol found.")
@@ -181,7 +184,7 @@ class ProtocolUtil(object):
         """
         Get protocol instance based on previous detecting result.
         """
-        protocol_file_path = os.path.join(conf.get_lib_dir(), 
+        protocol_file_path = os.path.join(conf.get_lib_dir(),
                                           PROTOCOL_FILE_NAME)
         if not os.path.isfile(protocol_file_path):
             raise ProtocolNotFoundError("No protocol found")
@@ -200,22 +203,23 @@ class ProtocolUtil(object):
         """
         Save protocol endpoint
         """
-        protocol_file_path = os.path.join(conf.get_lib_dir(), PROTOCOL_FILE_NAME)
+        protocol_file_path = os.path.join(
+            conf.get_lib_dir(), PROTOCOL_FILE_NAME)
         try:
             fileutil.write_file(protocol_file_path, protocol_name)
         except IOError as e:
             logger.error("Failed to save protocol endpoint: {0}", e)
 
-
     def clear_protocol(self):
         """
         Cleanup previous saved endpoint.
         """
         logger.info("Clean protocol")
         self.protocol = None
-        protocol_file_path = os.path.join(conf.get_lib_dir(), PROTOCOL_FILE_NAME)
+        protocol_file_path = os.path.join(
+            conf.get_lib_dir(), PROTOCOL_FILE_NAME)
         if not os.path.isfile(protocol_file_path):
-            return 
+            return
 
         try:
             os.remove(protocol_file_path)
@@ -229,7 +233,7 @@ class ProtocolUtil(object):
         :returns: protocol instance
         """
         self.lock.acquire()
-        
+
         try:
             if self.protocol is not None:
                 return self.protocol
@@ -249,18 +253,17 @@ class ProtocolUtil(object):
         finally:
             self.lock.release()
 
-
     def get_protocol_by_file(self):
         """
-        Detect protocol by tag file. 
+        Detect protocol by tag file.
 
-        If a file "useMetadataEndpoint.tag" is found on provision iso, 
+        If a file "useMetadataEndpoint.tag" is found on provision iso,
         metedata protocol will be used. No need to probe for wire protocol
 
         :returns: protocol instance
         """
         self.lock.acquire()
-        
+
         try:
             if self.protocol is not None:
                 return self.protocol
diff --git a/azurelinuxagent/common/protocol/wire.py b/azurelinuxagent/common/protocol/wire.py
index 29a1663..b741917 100644
--- a/azurelinuxagent/common/protocol/wire.py
+++ b/azurelinuxagent/common/protocol/wire.py
@@ -21,8 +21,8 @@ import xml.sax.saxutils as saxutils
 import azurelinuxagent.common.conf as conf
 from azurelinuxagent.common.exception import ProtocolNotFoundError
 from azurelinuxagent.common.future import httpclient, bytebuffer
-from azurelinuxagent.common.utils.textutil import parse_doc, findall, find, findtext, \
-    getattrib, gettext, remove_bom, get_bytes_from_pem
+from azurelinuxagent.common.utils.textutil import parse_doc, findall, \
+    find, findtext, getattrib, gettext, remove_bom, get_bytes_from_pem
 import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.common.utils.cryptutil import CryptUtil
 from azurelinuxagent.common.protocol.restapi import *
@@ -66,10 +66,13 @@ class WireProtocol(Protocol):
     """Slim layer to adapt wire protocol data to metadata protocol interface"""
 
     # TODO: Clean-up goal state processing
-    #   At present, some methods magically update GoalState (e.g., get_vmagent_manifests), others (e.g., get_vmagent_pkgs)
-    #   assume its presence. A better approach would make an explicit update call that returns the incarnation number and
-    #   establishes that number the "context" for all other calls (either by updating the internal state of the protocol or
-    #   by having callers pass the incarnation number to the method).
+    #   At present, some methods magically update GoalState
+    #   (e.g., get_vmagent_manifests), others (e.g., get_vmagent_pkgs) assume
+    #   its presence. A better approach would make an explicit update call that
+    #   returns the incarnation number and establishes that number the
+    #   "context" for all other calls (either by updating the internal state
+    #   of the protocol or by having callers pass the incarnation number to
+    #   the method).
 
     def __init__(self, endpoint):
         if endpoint is None:
@@ -323,6 +326,7 @@ def vm_status_to_v1(vm_status, ext_statuses):
 
 
 class StatusBlob(object):
+
     def __init__(self, client):
         self.vm_status = None
         self.ext_statuses = {}
@@ -387,13 +391,11 @@ class StatusBlob(object):
     def put_block_blob(self, url, data):
         logger.verbose("Upload block blob")
         timestamp = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
-        resp = self.client.call_storage_service(restutil.http_put, url, data,
-                        {
-                            "x-ms-date": timestamp,
-                            "x-ms-blob-type": "BlockBlob",
-                            "Content-Length": ustr(len(data)),
-                            "x-ms-version": self.__class__.__storage_version__
-                        })
+        resp = self.client.call_storage_service(
+            restutil.http_put, url, data,
+            {"x-ms-date": timestamp, "x-ms-blob-type": "BlockBlob",
+             "Content-Length": ustr(len(data)),
+             "x-ms-version": self.__class__.__storage_version__})
         if resp.status != httpclient.CREATED:
             raise UploadError(
                 "Failed to upload block blob: {0}".format(resp.status))
@@ -407,14 +409,12 @@ class StatusBlob(object):
 
         # Align to 512 bytes
         page_blob_size = int((len(data) + 511) / 512) * 512
-        resp = self.client.call_storage_service(restutil.http_put, url, "",
-                        {
-                            "x-ms-date": timestamp,
-                            "x-ms-blob-type": "PageBlob",
-                            "Content-Length": "0",
-                            "x-ms-blob-content-length": ustr(page_blob_size),
-                            "x-ms-version": self.__class__.__storage_version__
-                        })
+        resp = self.client.call_storage_service(
+            restutil.http_put, url, "",
+            {"x-ms-date": timestamp, "x-ms-blob-type": "PageBlob",
+             "Content-Length": "0",
+             "x-ms-blob-content-length": ustr(page_blob_size),
+             "x-ms-version": self.__class__.__storage_version__})
         if resp.status != httpclient.CREATED:
             raise UploadError(
                 "Failed to clean up page blob: {0}".format(resp.status))
@@ -465,8 +465,9 @@ def event_param_to_v1(param):
         attr_type = 'mt:bool'
     elif param_type is float:
         attr_type = 'mt:float64'
-    return param_format.format(param.name, saxutils.quoteattr(ustr(param.value)),
-                               attr_type)
+    return param_format.format(
+        param.name, saxutils.quoteattr(ustr(param.value)),
+        attr_type)
 
 
 def event_to_v1(event):
@@ -480,6 +481,7 @@ def event_to_v1(event):
 
 
 class WireClient(object):
+
     def __init__(self, endpoint):
         logger.info("Wire server endpoint:{0}", endpoint)
         self.endpoint = endpoint
@@ -501,15 +503,15 @@ class WireClient(object):
         now = time.time()
         if now - self.last_request < 1:
             logger.verbose("Last request issued less than 1 second ago")
-            logger.verbose("Sleep {0} second to avoid throttling.", 
-                        SHORT_WAITING_INTERVAL)
+            logger.verbose("Sleep {0} second to avoid throttling.",
+                           SHORT_WAITING_INTERVAL)
             time.sleep(SHORT_WAITING_INTERVAL)
         self.last_request = now
 
         self.req_count += 1
         if self.req_count % 3 == 0:
-            logger.verbose("Sleep {0} second to avoid throttling.", 
-                        SHORT_WAITING_INTERVAL)
+            logger.verbose("Sleep {0} second to avoid throttling.",
+                           SHORT_WAITING_INTERVAL)
             time.sleep(SHORT_WAITING_INTERVAL)
             self.req_count = 0
 
@@ -567,7 +569,7 @@ class WireClient(object):
             raise ProtocolError("Failed to write cache: {0}".format(e))
 
     def call_storage_service(self, http_req, *args, **kwargs):
-        """ 
+        """
         Call storage service, handle SERVICE_UNAVAILABLE(503)
         """
         for retry in range(0, 3):
@@ -655,7 +657,7 @@ class WireClient(object):
                 last_incarnation = fileutil.read_file(incarnation_file)
             new_incarnation = goal_state.incarnation
             if last_incarnation is not None and \
-                            last_incarnation == new_incarnation:
+                    last_incarnation == new_incarnation:
                 # Goalstate is not updated.
                 return
 
@@ -693,14 +695,18 @@ class WireClient(object):
 
     def get_hosting_env(self):
         if (self.hosting_env is None):
-            local_file = os.path.join(conf.get_lib_dir(), HOSTING_ENV_FILE_NAME)
+            local_file = os.path.join(
+                conf.get_lib_dir(),
+                HOSTING_ENV_FILE_NAME)
             xml_text = self.fetch_cache(local_file)
             self.hosting_env = HostingEnv(xml_text)
         return self.hosting_env
 
     def get_shared_conf(self):
         if (self.shared_conf is None):
-            local_file = os.path.join(conf.get_lib_dir(), SHARED_CONF_FILE_NAME)
+            local_file = os.path.join(
+                conf.get_lib_dir(),
+                SHARED_CONF_FILE_NAME)
             xml_text = self.fetch_cache(local_file)
             self.shared_conf = SharedConfig(xml_text)
         return self.shared_conf
@@ -795,8 +801,9 @@ class WireClient(object):
         health_report_uri = HEALTH_REPORT_URI.format(self.endpoint)
         headers = self.get_header_for_xml_content()
         try:
-            resp = self.call_wireserver(restutil.http_post, health_report_uri,
-                                        health_report, headers=headers, max_retry=8)
+            resp = self.call_wireserver(
+                restutil.http_post, health_report_uri, health_report,
+                headers=headers, max_retry=8)
         except HttpError as e:
             raise ProtocolError((u"Failed to send provision status: {0}"
                                  u"").format(e))
@@ -820,7 +827,8 @@ class WireClient(object):
 
         if resp.status != httpclient.OK:
             logger.verbose(resp.read())
-            raise ProtocolError("Failed to send events:{0}".format(resp.status))
+            raise ProtocolError(
+                "Failed to send events:{0}".format(resp.status))
 
     def report_event(self, event_list):
         buf = {}
@@ -867,7 +875,9 @@ class WireClient(object):
             "x-ms-guest-agent-public-x509-cert": cert
         }
 
+
 class VersionInfo(object):
+
     def __init__(self, xml_text):
         """
         Query endpoint server for wire protocol version.
@@ -880,14 +890,16 @@ class VersionInfo(object):
         xml_doc = parse_doc(xml_text)
         preferred = find(xml_doc, "Preferred")
         self.preferred = findtext(preferred, "Version")
-        logger.info("Fabric preferred wire protocol version:{0}", self.preferred)
+        logger.info(
+            "Fabric preferred wire protocol version:{0}", self.preferred)
 
         self.supported = []
         supported = find(xml_doc, "Supported")
         supported_version = findall(supported, "Version")
         for node in supported_version:
             version = gettext(node)
-            logger.verbose("Fabric supported wire protocol version:{0}", version)
+            logger.verbose(
+                "Fabric supported wire protocol version:{0}", version)
             self.supported.append(version)
 
     def get_preferred(self):
@@ -898,6 +910,7 @@ class VersionInfo(object):
 
 
 class GoalState(object):
+
     def __init__(self, xml_text):
         if xml_text is None:
             raise ValueError("GoalState.xml is None")
@@ -980,6 +993,7 @@ class SharedConfig(object):
         # Not used currently
         return self
 
+
 class Certificates(object):
     """
     Object containing certificates of host and provisioned user.
@@ -1150,8 +1164,8 @@ class ExtensionsConfig(object):
 
         name = ext_handler.name
         version = ext_handler.properties.version
-        settings = [x for x in plugin_settings \
-                    if getattrib(x, "name") == name and \
+        settings = [x for x in plugin_settings
+                    if getattrib(x, "name") == name and
                     getattrib(x, "version") == version]
 
         if settings is None or len(settings) == 0:
@@ -1176,12 +1190,14 @@ class ExtensionsConfig(object):
             ext.sequenceNumber = seqNo
             ext.publicSettings = handler_settings.get("publicSettings")
             ext.protectedSettings = handler_settings.get("protectedSettings")
-            thumbprint = handler_settings.get("protectedSettingsCertThumbprint")
+            thumbprint = handler_settings.get(
+                "protectedSettingsCertThumbprint")
             ext.certificateThumbprint = thumbprint
             ext_handler.properties.extensions.append(ext)
 
 
 class ExtensionManifest(object):
+
     def __init__(self, xml_text):
         if xml_text is None:
             raise ValueError("ExtensionManifest is None")
@@ -1191,14 +1207,20 @@ class ExtensionManifest(object):
 
     def parse(self, xml_text):
         xml_doc = parse_doc(xml_text)
-        self._handle_packages(findall(find(xml_doc, "Plugins"), "Plugin"), False)
-        self._handle_packages(findall(find(xml_doc, "InternalPlugins"), "Plugin"), True)
+        self._handle_packages(
+            findall(find(xml_doc, "Plugins"), "Plugin"), False)
+        self._handle_packages(
+            findall(
+                find(xml_doc, "InternalPlugins"),
+                "Plugin"),
+            True)
 
     def _handle_packages(self, packages, isinternal):
         for package in packages:
             version = findtext(package, "Version")
 
-            disallow_major_upgrade = findtext(package, "DisallowMajorVersionUpgrade")
+            disallow_major_upgrade = findtext(
+                package, "DisallowMajorVersionUpgrade")
             if disallow_major_upgrade is None:
                 disallow_major_upgrade = ''
             disallow_major_upgrade = disallow_major_upgrade.lower() == "true"
diff --git a/azurelinuxagent/common/rdma.py b/azurelinuxagent/common/rdma.py
index 0c17e38..0f93b71 100644
--- a/azurelinuxagent/common/rdma.py
+++ b/azurelinuxagent/common/rdma.py
@@ -39,10 +39,13 @@ dapl_config_paths = [
     '/usr/local/etc/dat.conf'
 ]
 
+
 def setup_rdma_device():
     logger.verbose("Parsing SharedConfig XML contents for RDMA details")
-    xml_doc = parse_doc(
-        fileutil.read_file(os.path.join(conf.get_lib_dir(), SHARED_CONF_FILE_NAME)))
+    xml_doc = parse_doc(fileutil.read_file(
+        os.path.join(
+            conf.get_lib_dir(),
+            SHARED_CONF_FILE_NAME)))
     if xml_doc is None:
         logger.error("Could not parse SharedConfig XML document")
         return
@@ -54,18 +57,20 @@ def setup_rdma_device():
     rdma_ipv4_addr = getattrib(instance_elem, "rdmaIPv4Address")
     if not rdma_ipv4_addr:
         logger.error(
-            "Could not find rdmaIPv4Address attribute on Instance element of SharedConfig.xml document")
+            "Could not find rdmaIPv4Address attribute on Instance element of"
+            " SharedConfig.xml document")
         return
 
     rdma_mac_addr = getattrib(instance_elem, "rdmaMacAddress")
     if not rdma_mac_addr:
         logger.error(
-            "Could not find rdmaMacAddress attribute on Instance element of SharedConfig.xml document")
+            "Could not find rdmaMacAddress attribute on Instance element of"
+            " SharedConfig.xml document")
         return
 
     # add colons to the MAC address (e.g. 00155D33FF1D ->
     # 00:15:5D:33:FF:1D)
-    rdma_mac_addr = ':'.join([rdma_mac_addr[i:i+2]
+    rdma_mac_addr = ':'.join([rdma_mac_addr[i:i + 2]
                               for i in range(0, len(rdma_mac_addr), 2)])
     logger.info("Found RDMA details. IPv4={0} MAC={1}".format(
         rdma_ipv4_addr, rdma_mac_addr))
@@ -75,6 +80,7 @@ def setup_rdma_device():
     logger.info("RDMA: device is set up")
     return
 
+
 class RDMAHandler(object):
 
     driver_module_name = 'hv_network_direct'
@@ -152,6 +158,7 @@ class RDMAHandler(object):
 dapl_config_paths = [
     '/etc/dat.conf', '/etc/rdma/dat.conf', '/usr/local/etc/dat.conf']
 
+
 class RDMADeviceHandler(object):
 
     """
@@ -179,11 +186,14 @@ class RDMADeviceHandler(object):
 
     def process(self):
         RDMADeviceHandler.wait_rdma_device(
-            self.rdma_dev, self.device_check_timeout_sec, self.device_check_interval_sec)
+            self.rdma_dev,
+            self.device_check_timeout_sec,
+            self.device_check_interval_sec)
         RDMADeviceHandler.update_dat_conf(dapl_config_paths, self.ipv4_addr)
         RDMADeviceHandler.write_rdma_config_to_device(
             self.rdma_dev, self.ipv4_addr, self.mac_addr)
-        RDMADeviceHandler.update_network_interface(self.mac_addr, self.ipv4_addr)
+        RDMADeviceHandler.update_network_interface(
+            self.mac_addr, self.ipv4_addr)
 
     @staticmethod
     def update_dat_conf(paths, ipv4_addr):
@@ -206,13 +216,16 @@ class RDMADeviceHandler(object):
             logger.info("RDMA: DAPL configuration is updated")
             return
 
-        raise Exception("RDMA: DAPL configuration file not found at predefined paths")
+        raise Exception(
+            "RDMA: DAPL configuration file not found at predefined paths")
 
     @staticmethod
     def replace_dat_conf_contents(cfg, ipv4_addr):
-        old = "ofa-v2-ib0 u2.0 nonthreadsafe default libdaplofa.so.2 dapl.2.0 \"\S+ 0\""
-        new = "ofa-v2-ib0 u2.0 nonthreadsafe default libdaplofa.so.2 dapl.2.0 \"{0} 0\"".format(
-            ipv4_addr)
+        old = "ofa-v2-ib0 u2.0 nonthreadsafe default libdaplofa.so.2 " \
+              "dapl.2.0 \"\S+ 0\""
+        new = "ofa-v2-ib0 u2.0 nonthreadsafe default libdaplofa.so.2 " \
+              "dapl.2.0 \"{0} 0\"".format(
+                  ipv4_addr)
         return re.sub(old, new, cfg)
 
     @staticmethod
@@ -226,42 +239,49 @@ class RDMADeviceHandler(object):
 
     @staticmethod
     def generate_rdma_config(ipv4_addr, mac_addr):
-        return 'rdmaMacAddress="{0}" rdmaIPv4Address="{1}"'.format(mac_addr, ipv4_addr)
+        return 'rdmaMacAddress="{0}" rdmaIPv4Address="{1}"'.format(
+            mac_addr, ipv4_addr)
 
     @staticmethod
     def wait_rdma_device(path, timeout_sec, check_interval_sec):
-        logger.info("RDMA: waiting for device={0} timeout={1}s".format(path, timeout_sec))
-        total_retries = timeout_sec/check_interval_sec
+        logger.info(
+            "RDMA: waiting for device={0} timeout={1}s".format(
+                path, timeout_sec))
+        total_retries = timeout_sec / check_interval_sec
         n = 0
         while n < total_retries:
             if os.path.exists(path):
                 logger.info("RDMA: device ready")
                 return
-            logger.verbose(
-                "RDMA: device not ready, sleep {0}s".format(check_interval_sec))
+            logger.verbose("RDMA: device not ready, sleep {0}s".format(
+                check_interval_sec))
             time.sleep(check_interval_sec)
             n += 1
         logger.error("RDMA device wait timed out")
-        raise Exception("The device did not show up in {0} seconds ({1} retries)".format(
-            timeout_sec, total_retries))
+        raise Exception(
+            "The device did not show up in {0} seconds ({1} retries)".format(
+                timeout_sec, total_retries))
 
     @staticmethod
     def update_network_interface(mac_addr, ipv4_addr):
-        netmask=16
-        
+        netmask = 16
+
         logger.info("RDMA: will update the network interface with IPv4/MAC")
 
-        if_name=RDMADeviceHandler.get_interface_by_mac(mac_addr)
+        if_name = RDMADeviceHandler.get_interface_by_mac(mac_addr)
         logger.info("RDMA: network interface found: {0}", if_name)
         logger.info("RDMA: bringing network interface up")
         if shellutil.run("ifconfig {0} up".format(if_name)) != 0:
-            raise Exception("Could not bring up RMDA interface: {0}".format(if_name))
+            raise Exception(
+                "Could not bring up RMDA interface: {0}".format(if_name))
 
         logger.info("RDMA: configuring IPv4 addr and netmask on interface")
         addr = '{0}/{1}'.format(ipv4_addr, netmask)
         if shellutil.run("ifconfig {0} {1}".format(if_name, addr)) != 0:
-            raise Exception("Could set addr to {1} on {0}".format(if_name, addr))
-        logger.info("RDMA: network address and netmask configured on interface")
+            raise Exception("Could set addr to {1} on {0}".format(
+                if_name, addr))
+        logger.info("RDMA: network address and netmask configured "
+                    "on interface")
 
     @staticmethod
     def get_interface_by_mac(mac):
@@ -269,7 +289,7 @@ class RDMADeviceHandler(object):
         if ret != 0:
             raise Exception("Failed to list network interfaces")
         output = output.replace('\n', '')
-        match = re.search(r"(eth\d).*(HWaddr|ether) {0}".format(mac), 
+        match = re.search(r"(eth\d).*(HWaddr|ether) {0}".format(mac),
                           output, re.IGNORECASE)
         if match is None:
             raise Exception("Failed to get ifname with mac: {0}".format(mac))
diff --git a/azurelinuxagent/common/utils/__init__.py b/azurelinuxagent/common/utils/__init__.py
index 1ea2f38..2ef4c16 100644
--- a/azurelinuxagent/common/utils/__init__.py
+++ b/azurelinuxagent/common/utils/__init__.py
@@ -14,4 +14,3 @@
 #
 # Requires Python 2.4+ and Openssl 1.0+
 #
-
diff --git a/azurelinuxagent/common/utils/cryptutil.py b/azurelinuxagent/common/utils/cryptutil.py
index b35bda0..ee0ca2b 100644
--- a/azurelinuxagent/common/utils/cryptutil.py
+++ b/azurelinuxagent/common/utils/cryptutil.py
@@ -23,7 +23,9 @@ from azurelinuxagent.common.future import ustr, bytebuffer
 from azurelinuxagent.common.exception import CryptError
 import azurelinuxagent.common.utils.shellutil as shellutil
 
+
 class CryptUtil(object):
+
     def __init__(self, openssl_cmd):
         self.openssl_cmd = openssl_cmd
 
@@ -37,20 +39,20 @@ class CryptUtil(object):
         shellutil.run(cmd)
 
     def get_pubkey_from_prv(self, file_name):
-        cmd = "{0} rsa -in {1} -pubout 2>/dev/null".format(self.openssl_cmd, 
+        cmd = "{0} rsa -in {1} -pubout 2>/dev/null".format(self.openssl_cmd,
                                                            file_name)
         pub = shellutil.run_get_output(cmd)[1]
         return pub
 
     def get_pubkey_from_crt(self, file_name):
-        cmd = "{0} x509 -in {1} -pubkey -noout".format(self.openssl_cmd, 
+        cmd = "{0} x509 -in {1} -pubkey -noout".format(self.openssl_cmd,
                                                        file_name)
         pub = shellutil.run_get_output(cmd)[1]
         return pub
 
     def get_thumbprint_from_crt(self, file_name):
-        cmd="{0} x509 -in {1} -fingerprint -noout".format(self.openssl_cmd, 
-                                                          file_name)
+        cmd = "{0} x509 -in {1} -fingerprint -noout".format(self.openssl_cmd,
+                                                            file_name)
         thumbprint = shellutil.run_get_output(cmd)[1]
         thumbprint = thumbprint.rstrip().split('=')[1].replace(':', '').upper()
         return thumbprint
@@ -58,26 +60,26 @@ class CryptUtil(object):
     def decrypt_p7m(self, p7m_file, trans_prv_file, trans_cert_file, pem_file):
         cmd = ("{0} cms -decrypt -in {1} -inkey {2} -recip {3} "
                "| {4} pkcs12 -nodes -password pass: -out {5}"
-               "").format(self.openssl_cmd, p7m_file, trans_prv_file, 
+               "").format(self.openssl_cmd, p7m_file, trans_prv_file,
                           trans_cert_file, self.openssl_cmd, pem_file)
         shellutil.run(cmd)
 
     def crt_to_ssh(self, input_file, output_file):
-        shellutil.run("ssh-keygen -i -m PKCS8 -f {0} >> {1}".format(input_file,
-                                                                    output_file))
+        shellutil.run("ssh-keygen -i -m PKCS8 -f {0} >> {1}".
+                      format(input_file, output_file))
 
     def asn1_to_ssh(self, pubkey):
         lines = pubkey.split("\n")
         lines = [x for x in lines if not x.startswith("----")]
         base64_encoded = "".join(lines)
         try:
-            #TODO remove pyasn1 dependency
+            # TODO remove pyasn1 dependency
             from pyasn1.codec.der import decoder as der_decoder
             der_encoded = base64.b64decode(base64_encoded)
             der_encoded = der_decoder.decode(der_encoded)[0][1]
             key = der_decoder.decode(self.bits_to_bytes(der_encoded))[0]
-            n=key[0]
-            e=key[1]
+            n = key[0]
+            e = key[1]
             keydata = bytearray()
             keydata.extend(struct.pack('>I', len("ssh-rsa")))
             keydata.extend(b"ssh-rsa")
@@ -87,7 +89,7 @@ class CryptUtil(object):
             keydata.extend(b"\0")
             keydata.extend(self.num_to_bytes(n))
             keydata_base64 = base64.b64encode(bytebuffer(keydata))
-            return ustr(b"ssh-rsa " +  keydata_base64 + b"\n", 
+            return ustr(b"ssh-rsa " + keydata_base64 + b"\n",
                         encoding='utf-8')
         except ImportError as e:
             raise CryptError("Failed to load pyasn1.codec.der")
@@ -118,4 +120,3 @@ class CryptUtil(object):
                 curr = 0
                 index = 7
         return bytes(byte_array)
-
diff --git a/azurelinuxagent/common/utils/fileutil.py b/azurelinuxagent/common/utils/fileutil.py
index 7ef4fef..184b79d 100644
--- a/azurelinuxagent/common/utils/fileutil.py
+++ b/azurelinuxagent/common/utils/fileutil.py
@@ -30,6 +30,7 @@ import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.utils.textutil as textutil
 
+
 def copy_file(from_path, to_path=None, to_dir=None):
     if to_path is None:
         to_path = os.path.join(to_dir, os.path.basename(from_path))
@@ -51,12 +52,14 @@ def read_file(filepath, asbin=False, remove_bom=False, encoding='utf-8'):
             return data
 
         if remove_bom:
-            #Remove bom on bytes data before it is converted into string.
+            # Remove bom on bytes data before it is converted into string.
             data = textutil.remove_bom(data)
         data = ustr(data, encoding=encoding)
         return data
 
-def write_file(filepath, contents, asbin=False, encoding='utf-8', append=False):
+
+def write_file(
+        filepath, contents, asbin=False, encoding='utf-8', append=False):
     """
     Write 'contents' to 'filepath'.
     """
@@ -67,6 +70,7 @@ def write_file(filepath, contents, asbin=False, encoding='utf-8', append=False):
     with open(filepath, mode) as out_file:
         out_file.write(data)
 
+
 def append_file(filepath, contents, asbin=False, encoding='utf-8'):
     """
     Append 'contents' to 'filepath'.
@@ -78,6 +82,7 @@ def base_name(path):
     head, tail = os.path.split(path)
     return tail
 
+
 def get_line_startingwith(prefix, filepath):
     """
     Return line from 'filepath' if the line startswith 'prefix'
@@ -87,7 +92,8 @@ def get_line_startingwith(prefix, filepath):
             return line
     return None
 
-#End File operation util functions
+# End File operation util functions
+
 
 def mkdir(dirpath, mode=None, owner=None):
     if not os.path.isdir(dirpath):
@@ -97,6 +103,7 @@ def mkdir(dirpath, mode=None, owner=None):
     if owner is not None:
         chowner(dirpath, owner)
 
+
 def chowner(path, owner):
     if not os.path.exists(path):
         logger.error("Path does not exist: {0}".format(path))
@@ -104,17 +111,20 @@ def chowner(path, owner):
         owner_info = pwd.getpwnam(owner)
         os.chown(path, owner_info[2], owner_info[3])
 
+
 def chmod(path, mode):
     if not os.path.exists(path):
         logger.error("Path does not exist: {0}".format(path))
     else:
         os.chmod(path, mode)
 
+
 def rm_files(*args):
     for path in args:
         if os.path.isfile(path):
             os.remove(path)
 
+
 def rm_dirs(*args):
     """
     Remove all the contents under the directry
@@ -128,11 +138,13 @@ def rm_dirs(*args):
                 elif os.path.isdir(path):
                     shutil.rmtree(path)
 
+
 def trim_ext(path, ext):
     if not ext.startswith("."):
         ext = "." + ext
     return path.split(ext)[0] if path.endswith(ext) else path
 
+
 def update_conf_file(path, line_start, val, chk_err=False):
     conf = []
     if not os.path.isfile(path) and chk_err:
@@ -142,6 +154,7 @@ def update_conf_file(path, line_start, val, chk_err=False):
     conf.append(val)
     write_file(path, '\n'.join(conf))
 
+
 def search_file(target_dir_name, target_file_name):
     for root, dirs, files in os.walk(target_dir_name):
         for file_name in files:
@@ -149,11 +162,13 @@ def search_file(target_dir_name, target_file_name):
                 return os.path.join(root, file_name)
     return None
 
+
 def chmod_tree(path, mode):
     for root, dirs, files in os.walk(path):
         for file_name in files:
             os.chmod(os.path.join(root, file_name), mode)
 
+
 def findstr_in_file(file_path, pattern_str):
     """
     Return match object if found in file.
@@ -168,4 +183,3 @@ def findstr_in_file(file_path, pattern_str):
         raise
 
     return None
-
diff --git a/azurelinuxagent/common/utils/flexible_version.py b/azurelinuxagent/common/utils/flexible_version.py
index 2fce88d..a707a0e 100644
--- a/azurelinuxagent/common/utils/flexible_version.py
+++ b/azurelinuxagent/common/utils/flexible_version.py
@@ -1,6 +1,7 @@
 from distutils import version
 import re
 
+
 class FlexibleVersion(version.Version):
     """
     A more flexible implementation of distutils.version.StrictVersion
@@ -11,7 +12,8 @@ class FlexibleVersion(version.Version):
     - the separator between version numbers:
         '1-2-3' is allowed when '-' is specified as separator
     - a flexible pre-release separator:
-        '1.2.3.alpha1', '1.2.3-alpha1', and '1.2.3alpha1' are considered equivalent
+        '1.2.3.alpha1', '1.2.3-alpha1', and '1.2.3alpha1' are considered
+        equivalent
     - an arbitrary ordering of pre-release tags:
         1.1alpha3 < 1.1beta2 < 1.1rc1 < 1.1
         when ["alpha", "beta", "rc"] is specified as pre-release tag list
@@ -20,8 +22,9 @@ class FlexibleVersion(version.Version):
         http://stackoverflow.com/questions/12255554/sort-versions-in-python
     """
 
-    def __init__(self, vstring=None, sep='.', prerel_tags=('alpha', 'beta', 'rc')):
-        version.Version.__init__(self) 
+    def __init__(self, vstring=None, sep='.',
+                 prerel_tags=('alpha', 'beta', 'rc')):
+        version.Version.__init__(self)
 
         if sep is None:
             sep = '.'
@@ -30,7 +33,8 @@ class FlexibleVersion(version.Version):
 
         self.sep = sep
         self.prerel_sep = ''
-        self.prerel_tags = tuple(prerel_tags) if prerel_tags is not None else ()
+        self.prerel_tags = tuple(
+            prerel_tags) if prerel_tags is not None else ()
 
         self._compile_pattern()
 
@@ -76,23 +80,29 @@ class FlexibleVersion(version.Version):
         if tag is not None and tag_num is not None:
             self.prerelease = (tag, int(tag_num) if len(tag_num) else None)
 
-        self.version = tuple(map(int, self.sep_re.split(m.group(self._nn_version))))
+        self.version = tuple(
+            map(int, self.sep_re.split(m.group(self._nn_version))))
         return
 
     def __add__(self, increment):
         version = list(self.version)
         version[-1] += increment
-        vstring = self._assemble(version, self.sep, self.prerel_sep, self.prerelease)
-        return FlexibleVersion(vstring=vstring, sep=self.sep, prerel_tags=self.prerel_tags)
+        vstring = self._assemble(
+            version, self.sep, self.prerel_sep, self.prerelease)
+        return FlexibleVersion(
+            vstring=vstring, sep=self.sep, prerel_tags=self.prerel_tags)
 
     def __sub__(self, decrement):
         version = list(self.version)
         if version[-1] <= 0:
-            raise ArithmeticError("Cannot decrement final numeric component of {0} below zero" \
-                .format(self))
+            raise ArithmeticError(
+                "Cannot decrement final numeric component of {0} below zero".
+                format(self))
         version[-1] -= decrement
-        vstring = self._assemble(version, self.sep, self.prerel_sep, self.prerelease)
-        return FlexibleVersion(vstring=vstring, sep=self.sep, prerel_tags=self.prerel_tags)
+        vstring = self._assemble(
+            version, self.sep, self.prerel_sep, self.prerelease)
+        return FlexibleVersion(
+            vstring=vstring, sep=self.sep, prerel_tags=self.prerel_tags)
 
     def __repr__(self):
         return "{cls} ('{vstring}', '{sep}', {prerel_tags})"\
@@ -103,7 +113,8 @@ class FlexibleVersion(version.Version):
                 prerel_tags=self.prerel_tags)
 
     def __str__(self):
-        return self._assemble(self.version, self.sep, self.prerel_sep, self.prerelease)
+        return self._assemble(
+            self.version, self.sep, self.prerel_sep, self.prerelease)
 
     def __ge__(self, that):
         return not self.__lt__(that)
@@ -162,12 +173,13 @@ class FlexibleVersion(version.Version):
 
         if self.prerel_tags:
             tags = '|'.join(re.escape(tag) for tag in self.prerel_tags)
-            self.prerel_tags_set = dict(zip(self.prerel_tags, range(len(self.prerel_tags))))
-            release_re = '(?:{prerel_sep}(?P<{tn}>{tags})(?P<{nn}>\d*))?'.format(
-                        prerel_sep=self._re_prerel_sep,
-                        tags=tags,
-                        tn=self._nn_prerel_tag,
-                        nn=self._nn_prerel_num)
+            self.prerel_tags_set = dict(
+                zip(self.prerel_tags, range(len(self.prerel_tags))))
+            release_re = '(?:{prerel_sep}(?P<{tn}>{tags})(?P<{nn}>\d*))?'.\
+            format(prerel_sep=self._re_prerel_sep,
+                   tags=tags,
+                   tn=self._nn_prerel_tag,
+                   nn=self._nn_prerel_num)
         else:
             release_re = ''
 
@@ -185,15 +197,18 @@ class FlexibleVersion(version.Version):
 
     def _ensure_compatible(self, that):
         """
-        Ensures the instances have the same structure and, if so, returns length compatible
-        version lists (so that x.y.0.0 is equivalent to x.y).
+        Ensures the instances have the same structure and, if so, returns
+        length compatible version lists (so that x.y.0.0 is equivalent to x.y).
         """
         if self.prerel_tags != that.prerel_tags or self.sep != that.sep:
-            raise ValueError("Unable to compare: versions have different structures")
+            raise ValueError(
+                "Unable to compare: versions have different structures")
 
         this_version = list(self.version[:])
         that_version = list(that.version[:])
-        while len(this_version) < len(that_version): this_version.append(0)
-        while len(that_version) < len(this_version): that_version.append(0)
+        while len(this_version) < len(that_version):
+            this_version.append(0)
+        while len(that_version) < len(this_version):
+            that_version.append(0)
 
         return this_version, that_version
diff --git a/azurelinuxagent/common/utils/restutil.py b/azurelinuxagent/common/utils/restutil.py
index a789650..eeb7b53 100644
--- a/azurelinuxagent/common/utils/restutil.py
+++ b/azurelinuxagent/common/utils/restutil.py
@@ -32,6 +32,7 @@ REST api util functions
 
 RETRY_WAITING_INTERVAL = 10
 
+
 def _parse_url(url):
     o = urlparse(url)
     rel_uri = o.path
@@ -44,6 +45,7 @@ def _parse_url(url):
         secure = True
     return o.hostname, o.port, secure, rel_uri
 
+
 def get_http_proxy():
     """
     Get http_proxy and https_proxy from environment variables.
@@ -53,15 +55,17 @@ def get_http_proxy():
     port = conf.get_httpproxy_port()
     return (host, port)
 
+
 def _http_request(method, host, rel_uri, port=None, data=None, secure=False,
-                 headers=None, proxy_host=None, proxy_port=None):
+                  headers=None, proxy_host=None, proxy_port=None):
     url, conn = None, None
     if secure:
         port = 443 if port is None else port
         if proxy_host is not None and proxy_port is not None:
-            conn = httpclient.HTTPSConnection(proxy_host, proxy_port, timeout=10)
+            conn = httpclient.HTTPSConnection(
+                proxy_host, proxy_port, timeout=10)
             conn.set_tunnel(host, port)
-            #If proxy is used, full url is needed.
+            # If proxy is used, full url is needed.
             url = "https://{0}:{1}{2}".format(host, port, rel_uri)
         else:
             conn = httpclient.HTTPSConnection(host, port, timeout=10)
@@ -69,20 +73,23 @@ def _http_request(method, host, rel_uri, port=None, data=None, secure=False,
     else:
         port = 80 if port is None else port
         if proxy_host is not None and proxy_port is not None:
-            conn = httpclient.HTTPConnection(proxy_host, proxy_port, timeout=10)
-            #If proxy is used, full url is needed.
+            conn = httpclient.HTTPConnection(
+                proxy_host, proxy_port, timeout=10)
+            # If proxy is used, full url is needed.
             url = "http://{0}:{1}{2}".format(host, port, rel_uri)
         else:
             conn = httpclient.HTTPConnection(host, port, timeout=10)
             url = rel_uri
-    if headers == None:
+    if headers is None:
         conn.request(method, url, data)
     else:
         conn.request(method, url, data, headers)
     resp = conn.getresponse()
     return resp
 
-def http_request(method, url, data, headers=None, max_retry=3, chk_proxy=False):
+
+def http_request(
+        method, url, data, headers=None, max_retry=3, chk_proxy=False):
     """
     Sending http request to server
     On error, sleep 10 and retry max_retry times.
@@ -92,28 +99,29 @@ def http_request(method, url, data, headers=None, max_retry=3, chk_proxy=False):
     logger.verbose("    Header={0}", headers)
     host, port, secure, rel_uri = _parse_url(url)
 
-    #Check proxy
+    # Check proxy
     proxy_host, proxy_port = (None, None)
     if chk_proxy:
         proxy_host, proxy_port = get_http_proxy()
 
-    #If httplib module is not built with ssl support. Fallback to http
+    # If httplib module is not built with ssl support. Fallback to http
     if secure and not hasattr(httpclient, "HTTPSConnection"):
         logger.warn("httplib is not built with ssl support")
         secure = False
 
-    #If httplib module doesn't support https tunnelling. Fallback to http
+    # If httplib module doesn't support https tunnelling. Fallback to http
     if secure and \
             proxy_host is not None and \
             proxy_port is not None and \
             not hasattr(httpclient.HTTPSConnection, "set_tunnel"):
-        logger.warn("httplib doesn't support https tunnelling(new in python 2.7)")
+        logger.warn(
+            "httplib doesn't support https tunnelling(new in python 2.7)")
         secure = False
 
     for retry in range(0, max_retry):
         try:
-            resp = _http_request(method, host, rel_uri, port=port, data=data, 
-                                 secure=secure, headers=headers, 
+            resp = _http_request(method, host, rel_uri, port=port, data=data,
+                                 secure=secure, headers=headers,
                                  proxy_host=proxy_host, proxy_port=proxy_port)
             logger.verbose("HTTP Resp: Status={0}", resp.status)
             logger.verbose("    Header={0}", resp.getheaders())
@@ -126,31 +134,36 @@ def http_request(method, url, data, headers=None, max_retry=3, chk_proxy=False):
         if retry < max_retry - 1:
             logger.info("Retry={0}, {1} {2}", retry, method, url)
             time.sleep(RETRY_WAITING_INTERVAL)
-    
+
     if url is not None and len(url) > 100:
-        url_log = url[0: 100] #In case the url is too long
+        url_log = url[0: 100]  # In case the url is too long
     else:
         url_log = url
     raise HttpError("HTTP Err: {0} {1}".format(method, url_log))
 
+
 def http_get(url, headers=None, max_retry=3, chk_proxy=False):
-    return http_request("GET", url, data=None, headers=headers, 
+    return http_request("GET", url, data=None, headers=headers,
                         max_retry=max_retry, chk_proxy=chk_proxy)
 
+
 def http_head(url, headers=None, max_retry=3, chk_proxy=False):
-    return http_request("HEAD", url, None, headers=headers, 
+    return http_request("HEAD", url, None, headers=headers,
                         max_retry=max_retry, chk_proxy=chk_proxy)
 
+
 def http_post(url, data, headers=None, max_retry=3, chk_proxy=False):
-    return http_request("POST", url, data, headers=headers, 
+    return http_request("POST", url, data, headers=headers,
                         max_retry=max_retry, chk_proxy=chk_proxy)
 
+
 def http_put(url, data, headers=None, max_retry=3, chk_proxy=False):
-    return http_request("PUT", url, data, headers=headers, 
+    return http_request("PUT", url, data, headers=headers,
                         max_retry=max_retry, chk_proxy=chk_proxy)
 
+
 def http_delete(url, headers=None, max_retry=3, chk_proxy=False):
-    return http_request("DELETE", url, None, headers=headers, 
+    return http_request("DELETE", url, None, headers=headers,
                         max_retry=max_retry, chk_proxy=chk_proxy)
 
-#End REST api util functions
+# End REST api util functions
diff --git a/azurelinuxagent/common/utils/shellutil.py b/azurelinuxagent/common/utils/shellutil.py
index d273c92..b14af30 100644
--- a/azurelinuxagent/common/utils/shellutil.py
+++ b/azurelinuxagent/common/utils/shellutil.py
@@ -23,13 +23,14 @@ import subprocess
 from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.logger as logger
 
-if not hasattr(subprocess,'check_output'):
+if not hasattr(subprocess, 'check_output'):
     def check_output(*popenargs, **kwargs):
         r"""Backport from subprocess module from python 2.7"""
         if 'stdout' in kwargs:
             raise ValueError('stdout argument not allowed, '
                              'it will be overridden.')
-        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
+        process = subprocess.Popen(
+            stdout=subprocess.PIPE, *popenargs, **kwargs)
         output, unused_err = process.communicate()
         retcode = process.poll()
         if retcode:
@@ -41,49 +42,56 @@ if not hasattr(subprocess,'check_output'):
 
     # Exception classes used by this module.
     class CalledProcessError(Exception):
+
         def __init__(self, returncode, cmd, output=None):
             self.returncode = returncode
             self.cmd = cmd
             self.output = output
+
         def __str__(self):
             return ("Command '{0}' returned non-zero exit status {1}"
                     "").format(self.cmd, self.returncode)
 
-    subprocess.check_output=check_output
-    subprocess.CalledProcessError=CalledProcessError
+    subprocess.check_output = check_output
+    subprocess.CalledProcessError = CalledProcessError
 
 
 """
 Shell command util functions
 """
+
+
 def run(cmd, chk_err=True):
     """
     Calls run_get_output on 'cmd', returning only the return code.
     If chk_err=True then errors will be reported in the log.
     If chk_err=False then errors will be suppressed from the log.
     """
-    retcode,out=run_get_output(cmd,chk_err)
+    retcode, out = run_get_output(cmd, chk_err)
     return retcode
 
+
 def run_get_output(cmd, chk_err=True, log_cmd=True):
     """
     Wrapper for subprocess.check_output.
-    Execute 'cmd'.  Returns return code and STDOUT, trapping expected exceptions.
+    Execute 'cmd'.  Returns return code and STDOUT, trapping expected
+    exceptions.
     Reports exceptions to Error if chk_err parameter is True
     """
     if log_cmd:
         logger.verbose(u"run cmd '{0}'", cmd)
     try:
-        output=subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)
+        output = subprocess.check_output(
+            cmd, stderr=subprocess.STDOUT, shell=True)
         output = ustr(output, encoding='utf-8', errors="backslashreplace")
-    except subprocess.CalledProcessError as e :
+    except subprocess.CalledProcessError as e:
         output = ustr(e.output, encoding='utf-8', errors="backslashreplace")
         if chk_err:
             if log_cmd:
                 logger.error(u"run cmd '{0}' failed", e.cmd)
             logger.error(u"Error Code:{0}", e.returncode)
             logger.error(u"Result:{0}", output)
-        return e.returncode, output 
+        return e.returncode, output
     return 0, output
 
 
@@ -93,7 +101,8 @@ def quote(word_list):
     byte-literal single quote.
 
     The resulting string is safe for use with ``shell=True`` in ``subprocess``,
-    and in ``os.system``. ``assert shlex.split(ShellQuote(wordList)) == wordList``.
+    and in ``os.system``.
+    ``assert shlex.split(ShellQuote(wordList)) == wordList``.
 
     See POSIX.1:2013 Vol 3, Chap 2, Sec 2.2.2:
     http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_02
@@ -101,7 +110,10 @@ def quote(word_list):
     if not isinstance(word_list, (tuple, list)):
         word_list = (word_list,)
 
-    return " ".join(list("'{0}'".format(s.replace("'", "'\\''")) for s in word_list))
+    return " ".join(
+        list(
+            "'{0}'".format(s.replace("'", "'\\''"))
+            for s in word_list))
 
 
 # End shell command util functions
diff --git a/azurelinuxagent/common/utils/textutil.py b/azurelinuxagent/common/utils/textutil.py
index f03c7e6..e6f7acb 100644
--- a/azurelinuxagent/common/utils/textutil.py
+++ b/azurelinuxagent/common/utils/textutil.py
@@ -120,7 +120,8 @@ def hex_dump3(buf, offset, length):
     """
     Dump range of buf in formatted hex.
     """
-    return ''.join(['%02X' % str_to_ord(char) for char in buf[offset:offset + length]])
+    return ''.join(['%02X' % str_to_ord(char)
+                    for char in buf[offset: offset + length]])
 
 
 def hex_dump2(buf):
@@ -141,9 +142,9 @@ def is_printable(ch):
     """
     Return True if character is displayable.
     """
-    return (is_in_range(ch, str_to_ord('A'), str_to_ord('Z'))
-            or is_in_range(ch, str_to_ord('a'), str_to_ord('z'))
-            or is_in_range(ch, str_to_ord('0'), str_to_ord('9')))
+    return (is_in_range(ch, str_to_ord('A'), str_to_ord('Z')) or
+            is_in_range(ch, str_to_ord('a'), str_to_ord('z')) or
+            is_in_range(ch, str_to_ord('0'), str_to_ord('9')))
 
 
 def hex_dump(buffer, size):
@@ -157,7 +158,7 @@ def hex_dump(buffer, size):
         if (i % 16) == 0:
             result += "%06X: " % i
         byte = buffer[i]
-        if type(byte) == str:
+        if isinstance(byte, str):
             byte = ord(byte.decode('latin1'))
         result += "%02X " % byte
         if (i & 15) == 7:
@@ -172,7 +173,7 @@ def hex_dump(buffer, size):
             result += " "
             for j in range(i - (i % 16), i + 1):
                 byte = buffer[j]
-                if type(byte) == str:
+                if isinstance(byte, str):
                     byte = str_to_ord(byte.decode('latin1'))
                 k = '.'
                 if is_printable(byte):
@@ -188,7 +189,7 @@ def str_to_ord(a):
     Allows indexing into a string or an array of integers transparently.
     Generic utility function.
     """
-    if type(a) == type(b'') or type(a) == type(u''):
+    if isinstance(a, type(b'')) or isinstance(a, type(u'')):
         a = ord(a)
     return a
 
@@ -252,7 +253,7 @@ def set_ini_config(config, name, val):
 
 def remove_bom(c):
     if str_to_ord(c[0]) > 128 and str_to_ord(c[1]) > 128 and \
-                    str_to_ord(c[2]) > 128:
+            str_to_ord(c[2]) > 128:
         c = c[3:]
     return c
 
diff --git a/azurelinuxagent/common/version.py b/azurelinuxagent/common/version.py
index 6c4b475..e012b6a 100644
--- a/azurelinuxagent/common/version.py
+++ b/azurelinuxagent/common/version.py
@@ -83,6 +83,7 @@ def set_current_agent():
     return agent, FlexibleVersion(version)
 CURRENT_AGENT, CURRENT_VERSION = set_current_agent()
 
+
 def is_current_agent_installed():
     return CURRENT_AGENT == AGENT_LONG_VERSION
 
diff --git a/azurelinuxagent/daemon/main.py b/azurelinuxagent/daemon/main.py
index d3185a1..ddef45e 100644
--- a/azurelinuxagent/daemon/main.py
+++ b/azurelinuxagent/daemon/main.py
@@ -35,22 +35,25 @@ from azurelinuxagent.common.protocol import get_protocol_util
 from azurelinuxagent.common.rdma import RDMADeviceHandler, setup_rdma_device
 from azurelinuxagent.common.utils.textutil import parse_doc, find, getattrib
 from azurelinuxagent.common.version import AGENT_LONG_NAME, AGENT_VERSION, \
-                                     DISTRO_NAME, DISTRO_VERSION, \
-                                     DISTRO_FULL_NAME, PY_VERSION_MAJOR, \
-                                     PY_VERSION_MINOR, PY_VERSION_MICRO
+    DISTRO_NAME, DISTRO_VERSION, \
+    DISTRO_FULL_NAME, PY_VERSION_MAJOR, \
+    PY_VERSION_MINOR, PY_VERSION_MICRO
 from azurelinuxagent.daemon.resourcedisk import get_resourcedisk_handler
 from azurelinuxagent.daemon.scvmm import get_scvmm_handler
 from azurelinuxagent.pa.provision import get_provision_handler
 from azurelinuxagent.pa.rdma import get_rdma_handler
 from azurelinuxagent.ga.update import get_update_handler
 
+
 def get_daemon_handler():
     return DaemonHandler()
 
+
 class DaemonHandler(object):
     """
     Main thread of daemon. It will invoke other threads to do actual work
     """
+
     def __init__(self):
         self.running = True
         self.osutil = get_osutil()
@@ -59,7 +62,7 @@ class DaemonHandler(object):
         logger.info("{0} Version:{1}", AGENT_LONG_NAME, AGENT_VERSION)
         logger.info("OS: {0} {1}", DISTRO_NAME, DISTRO_VERSION)
         logger.info("Python: {0}.{1}.{2}", PY_VERSION_MAJOR, PY_VERSION_MINOR,
-            PY_VERSION_MICRO)
+                    PY_VERSION_MICRO)
 
         self.check_pid()
 
@@ -68,12 +71,11 @@ class DaemonHandler(object):
                 self.daemon()
             except Exception as e:
                 err_msg = traceback.format_exc()
-                add_event("WALA", is_success=False, message=ustr(err_msg), 
+                add_event("WALA", is_success=False, message=ustr(err_msg),
                           op=WALAEventOperation.UnhandledError)
                 logger.info("Sleep 15 seconds and restart daemon")
                 time.sleep(15)
 
-
     def check_pid(self):
         """Check whether daemon is already running"""
         pid = None
@@ -84,11 +86,11 @@ class DaemonHandler(object):
         if self.osutil.check_pid_alive(pid):
             logger.info("Daemon is already running: {0}", pid)
             sys.exit(0)
-            
+
         fileutil.write_file(pid_file, ustr(os.getpid()))
 
     def daemon(self):
-        logger.info("Run daemon") 
+        logger.info("Run daemon")
 
         self.protocol_util = get_protocol_util()
         self.scvmm_handler = get_scvmm_handler()
@@ -109,7 +111,7 @@ class DaemonHandler(object):
             self.resourcedisk_handler.run()
 
         # Always redetermine the protocol start (e.g., wireserver vs.
-        # on-premise) since a VHD can move between environments        
+        # on-premise) since a VHD can move between environments
         self.protocol_util.clear_protocol()
 
         self.provision_handler.run()
@@ -125,6 +127,6 @@ class DaemonHandler(object):
                 logger.error("Error setting up rdma device: %s" % e)
         else:
             logger.info("RDMA capabilities are not enabled, skipping")
-        
+
         while self.running:
             self.update_handler.run_latest()
diff --git a/azurelinuxagent/daemon/resourcedisk/__init__.py b/azurelinuxagent/daemon/resourcedisk/__init__.py
index 021cecd..e99750c 100644
--- a/azurelinuxagent/daemon/resourcedisk/__init__.py
+++ b/azurelinuxagent/daemon/resourcedisk/__init__.py
@@ -17,4 +17,5 @@
 # Requires Python 2.4+ and Openssl 1.0+
 #
 
-from azurelinuxagent.daemon.resourcedisk.factory import get_resourcedisk_handler
+from azurelinuxagent.daemon.resourcedisk.factory import \
+    get_resourcedisk_handler
diff --git a/azurelinuxagent/daemon/resourcedisk/factory.py b/azurelinuxagent/daemon/resourcedisk/factory.py
index 76e5a23..f921448 100644
--- a/azurelinuxagent/daemon/resourcedisk/factory.py
+++ b/azurelinuxagent/daemon/resourcedisk/factory.py
@@ -18,16 +18,16 @@
 import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.utils.textutil import Version
 from azurelinuxagent.common.version import DISTRO_NAME, \
-                                           DISTRO_VERSION, \
-                                           DISTRO_FULL_NAME
+    DISTRO_VERSION, \
+    DISTRO_FULL_NAME
 from .default import ResourceDiskHandler
 from .freebsd import FreeBSDResourceDiskHandler
 
-def get_resourcedisk_handler(distro_name=DISTRO_NAME, 
+
+def get_resourcedisk_handler(distro_name=DISTRO_NAME,
                              distro_version=DISTRO_VERSION,
                              distro_full_name=DISTRO_FULL_NAME):
     if distro_name == "freebsd":
         return FreeBSDResourceDiskHandler()
 
     return ResourceDiskHandler()
-
diff --git a/azurelinuxagent/daemon/resourcedisk/freebsd.py b/azurelinuxagent/daemon/resourcedisk/freebsd.py
index 36a3ac9..7a9f657 100644
--- a/azurelinuxagent/daemon/resourcedisk/freebsd.py
+++ b/azurelinuxagent/daemon/resourcedisk/freebsd.py
@@ -22,6 +22,7 @@ import azurelinuxagent.common.utils.shellutil as shellutil
 from azurelinuxagent.common.exception import ResourceDiskError
 from azurelinuxagent.daemon.resourcedisk.default import ResourceDiskHandler
 
+
 class FreeBSDResourceDiskHandler(ResourceDiskHandler):
     """
     This class handles resource disk mounting for FreeBSD.
@@ -32,8 +33,10 @@ class FreeBSDResourceDiskHandler(ResourceDiskHandler):
 
     There are 2 variations based on partition table type:
     1. MBR: The resource disk partition is /dev/da1s1
-    2. GPT: The resource disk partition is /dev/da1p2, /dev/da1p1 is for reserved usage.
+    2. GPT: The resource disk partition is /dev/da1p2, /dev/da1p1 is for
+       reserved usage.
     """
+
     def __init__(self):
         super(FreeBSDResourceDiskHandler, self).__init__()
 
@@ -49,19 +52,24 @@ class FreeBSDResourceDiskHandler(ResourceDiskHandler):
 
     def mount_resource_disk(self, mount_point, fs):
         if fs != 'ufs':
-            raise ResourceDiskError("Unsupported filesystem type:{0}, only ufs is supported.".format(fs))
+            raise ResourceDiskError(
+                "Unsupported filesystem type:{0}, only ufs is supported.".
+                format(fs))
 
         # 1. Detect device
         err, output = shellutil.run_get_output('gpart list')
         if err:
-            raise ResourceDiskError("Unable to detect resource disk device:{0}".format(output))
+            raise ResourceDiskError(
+                "Unable to detect resource disk device:{0}".format(output))
         disks = self.parse_gpart_list(output)
 
         err, output = shellutil.run_get_output('camcontrol periphlist 2:1:0')
         if err:
-            raise ResourceDiskError("Unable to detect resource disk device:{0}".format(output))
+            raise ResourceDiskError(
+                "Unable to detect resource disk device:{0}".format(output))
 
-        # 'da1:  generation: 4 index: 1 status: MORE\npass2:  generation: 4 index: 2 status: LAST\n'
+        # 'da1:  generation: 4 index: 1 status: MORE\npass2:  generation: 4
+        #  index: 2 status: LAST\n'
         device = None
         for line in output.split('\n'):
             index = line.find(':')
@@ -83,9 +91,11 @@ class FreeBSDResourceDiskHandler(ResourceDiskHandler):
         elif partition_table_type == 'GPT':
             provider_name = device + 'p2'
         else:
-            raise ResourceDiskError("Unsupported partition table type:{0}".format(output))
+            raise ResourceDiskError(
+                "Unsupported partition table type:{0}".format(output))
 
-        err, output = shellutil.run_get_output('gpart show -p {0}'.format(device))
+        err, output = shellutil.run_get_output(
+            'gpart show -p {0}'.format(device))
         if err or output.find(provider_name) == -1:
             raise ResourceDiskError("Resource disk partition not found.")
 
@@ -104,14 +114,23 @@ class FreeBSDResourceDiskHandler(ResourceDiskHandler):
         mount_cmd = 'mount -t {0} {1} {2}'.format(fs, partition, mount_point)
         err = shellutil.run(mount_cmd, chk_err=False)
         if err:
-            logger.info('Creating {0} filesystem on partition {1}'.format(fs, partition))
-            err, output = shellutil.run_get_output('newfs -U {0}'.format(partition))
+            logger.info(
+                'Creating {0} filesystem on partition {1}'.format(
+                    fs, partition))
+            err, output = shellutil.run_get_output(
+                'newfs -U {0}'.format(partition))
             if err:
-                raise ResourceDiskError("Failed to create new filesystem on partition {0}, error:{1}"
-                                        .format(partition, output))
+                raise ResourceDiskError(
+                    "Failed to create new filesystem on partition {0}, "
+                    "error:{1}" .format(
+                        partition, output))
             err, output = shellutil.run_get_output(mount_cmd, chk_err=False)
             if err:
-                raise ResourceDiskError("Failed to mount partition {0}, error {1}".format(partition, output))
+                raise ResourceDiskError(
+                    "Failed to mount partition {0}, error {1}".format(
+                        partition, output))
 
-        logger.info("Resource disk partition {0} is mounted at {1} with fstype {2}", partition, mount_point, fs)
+        logger.info(
+            "Resource disk partition {0} is mounted at {1} with fstype {2}",
+            partition, mount_point, fs)
         return mount_point
diff --git a/azurelinuxagent/daemon/scvmm.py b/azurelinuxagent/daemon/scvmm.py
index dc6832a..9106d64 100644
--- a/azurelinuxagent/daemon/scvmm.py
+++ b/azurelinuxagent/daemon/scvmm.py
@@ -27,28 +27,38 @@ import azurelinuxagent.common.conf as conf
 from azurelinuxagent.common.osutil import get_osutil
 
 VMM_CONF_FILE_NAME = "linuxosconfiguration.xml"
-VMM_STARTUP_SCRIPT_NAME= "install"
+VMM_STARTUP_SCRIPT_NAME = "install"
+
 
 def get_scvmm_handler():
     return ScvmmHandler()
 
+
 class ScvmmHandler(object):
+
     def __init__(self):
         self.osutil = get_osutil()
 
     def detect_scvmm_env(self, dev_dir='/dev'):
         logger.info("Detecting Microsoft System Center VMM Environment")
-        found=False
+        found = False
 
         # try to load the ATAPI driver, continue on failure
         self.osutil.try_load_atapiix_mod()
 
-        # cycle through all available /dev/sr*|hd*|cdrom*|cd* looking for the scvmm configuration file
+        # cycle through all available /dev/sr*|hd*|cdrom*|cd* looking for the
+        # scvmm configuration file
         mount_point = conf.get_dvd_mount_point()
-        for devices in filter(lambda x: x is not None, [re.match(r'(sr[0-9]|hd[c-z]|cdrom[0-9]?|cd[0-9]+)', dev) for dev in os.listdir(dev_dir)]):
+        for devices in filter(
+            lambda x: x is not None,
+            [re.match(r'(sr[0-9]|hd[c-z]|cdrom[0-9]?|cd[0-9]+)', dev)
+             for dev in os.listdir(dev_dir)]):
             dvd_device = os.path.join(dev_dir, devices.group(0))
-            self.osutil.mount_dvd(max_retry=1, chk_err=False, dvd_device=dvd_device, mount_point=mount_point)
-            found = os.path.isfile(os.path.join(mount_point, VMM_CONF_FILE_NAME))
+            self.osutil.mount_dvd(
+                max_retry=1, chk_err=False, dvd_device=dvd_device,
+                mount_point=mount_point)
+            found = os.path.isfile(os.path.join(
+                mount_point, VMM_CONF_FILE_NAME))
             if found:
                 self.start_scvmm_agent(mount_point=mount_point)
                 break
@@ -66,7 +76,7 @@ class ScvmmHandler(object):
         devnull = open(os.devnull, 'w')
         subprocess.Popen(["/bin/bash", startup_script, "-p " + mount_point],
                          stdout=devnull, stderr=devnull)
-    
+
     def run(self):
         if self.detect_scvmm_env():
             logger.info("Exiting")
diff --git a/azurelinuxagent/distro/__init__.py b/azurelinuxagent/distro/__init__.py
index 1ea2f38..2ef4c16 100644
--- a/azurelinuxagent/distro/__init__.py
+++ b/azurelinuxagent/distro/__init__.py
@@ -14,4 +14,3 @@
 #
 # Requires Python 2.4+ and Openssl 1.0+
 #
-
diff --git a/azurelinuxagent/distro/suse/__init__.py b/azurelinuxagent/distro/suse/__init__.py
index 1ea2f38..2ef4c16 100644
--- a/azurelinuxagent/distro/suse/__init__.py
+++ b/azurelinuxagent/distro/suse/__init__.py
@@ -14,4 +14,3 @@
 #
 # Requires Python 2.4+ and Openssl 1.0+
 #
-
diff --git a/azurelinuxagent/ga/__init__.py b/azurelinuxagent/ga/__init__.py
index 1ea2f38..2ef4c16 100644
--- a/azurelinuxagent/ga/__init__.py
+++ b/azurelinuxagent/ga/__init__.py
@@ -14,4 +14,3 @@
 #
 # Requires Python 2.4+ and Openssl 1.0+
 #
-
diff --git a/azurelinuxagent/ga/env.py b/azurelinuxagent/ga/env.py
index 2d67d4b..c87a126 100644
--- a/azurelinuxagent/ga/env.py
+++ b/azurelinuxagent/ga/env.py
@@ -28,24 +28,28 @@ import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.dhcp import get_dhcp_handler
 from azurelinuxagent.common.osutil import get_osutil
 
+
 def get_env_handler():
     return EnvHandler()
 
+
 class EnvHandler(object):
     """
     Monitor changes to dhcp and hostname.
-    If dhcp clinet process re-start has occurred, reset routes, dhcp with fabric.
+    If dhcp clinet process re-start has occurred, reset routes,
+    dhcp with fabric.
 
     Monitor scsi disk.
     If new scsi disk found, set timeout
     """
+
     def __init__(self):
         self.osutil = get_osutil()
         self.dhcp_handler = get_dhcp_handler()
         self.stopped = True
         self.hostname = None
         self.dhcpid = None
-        self.server_thread=None
+        self.server_thread = None
 
     def run(self):
         if not self.stopped:
@@ -57,7 +61,7 @@ class EnvHandler(object):
         self.dhcp_handler.conf_routes()
         self.hostname = socket.gethostname()
         self.dhcpid = self.osutil.get_dhcp_pid()
-        self.server_thread = threading.Thread(target = self.monitor)
+        self.server_thread = threading.Thread(target=self.monitor)
         self.server_thread.setDaemon(True)
         self.server_thread.start()
 
@@ -91,16 +95,16 @@ class EnvHandler(object):
             self.dhcpid = self.osutil.get_dhcp_pid()
             return
 
-        #The dhcp process hasn't changed since last check
+        # The dhcp process hasn't changed since last check
         if self.osutil.check_pid_alive(self.dhcpid.strip()):
             return
 
         newpid = self.osutil.get_dhcp_pid()
         if newpid is not None and newpid != self.dhcpid:
-           logger.info("EnvMonitor: Detected dhcp client restart. "
-                       "Restoring routing table.")
-           self.dhcp_handler.conf_routes()
-           self.dhcpid = newpid
+            logger.info("EnvMonitor: Detected dhcp client restart. "
+                        "Restoring routing table.")
+            self.dhcp_handler.conf_routes()
+            self.dhcpid = newpid
 
     def stop(self):
         """
@@ -109,4 +113,3 @@ class EnvHandler(object):
         self.stopped = True
         if self.server_thread is not None:
             self.server_thread.join()
-
diff --git a/azurelinuxagent/ga/exthandlers.py b/azurelinuxagent/ga/exthandlers.py
index d3c8f32..a30770b 100644
--- a/azurelinuxagent/ga/exthandlers.py
+++ b/azurelinuxagent/ga/exthandlers.py
@@ -32,36 +32,41 @@ import azurelinuxagent.common.utils.restutil as restutil
 import azurelinuxagent.common.utils.shellutil as shellutil
 
 from azurelinuxagent.common.event import add_event, WALAEventOperation
-from azurelinuxagent.common.exception import ExtensionError, ProtocolError, HttpError
+from azurelinuxagent.common.exception import ExtensionError, ProtocolError, \
+    HttpError
 from azurelinuxagent.common.future import ustr
 from azurelinuxagent.common.version import AGENT_VERSION
 from azurelinuxagent.common.protocol.restapi import ExtHandlerStatus, \
-                                                    ExtensionStatus, \
-                                                    ExtensionSubStatus, \
-                                                    Extension, \
-                                                    VMStatus, ExtHandler, \
-                                                    get_properties, \
-                                                    set_properties
+    ExtensionStatus, \
+    ExtensionSubStatus, \
+    Extension, \
+    VMStatus, ExtHandler, \
+    get_properties, \
+    set_properties
 from azurelinuxagent.common.utils.flexible_version import FlexibleVersion
 from azurelinuxagent.common.utils.textutil import Version
 from azurelinuxagent.common.protocol import get_protocol_util
-from azurelinuxagent.common.version import AGENT_NAME, CURRENT_AGENT, CURRENT_VERSION
+from azurelinuxagent.common.version import AGENT_NAME, CURRENT_AGENT, \
+    CURRENT_VERSION
 
-#HandlerEnvironment.json schema version
+# HandlerEnvironment.json schema version
 HANDLER_ENVIRONMENT_VERSION = 1.0
 
 VALID_EXTENSION_STATUS = ['transitioning', 'error', 'success', 'warning']
 
 VALID_HANDLER_STATUS = ['Ready', 'NotReady', "Installing", "Unresponsive"]
 
+
 def validate_has_key(obj, key, fullname):
     if key not in obj:
         raise ExtensionError("Missing: {0}".format(fullname))
 
+
 def validate_in_range(val, valid_range, name):
     if val not in valid_range:
         raise ExtensionError("Invalid {0}: {1}".format(name, val))
 
+
 def parse_formatted_message(formatted_message):
     if formatted_message is None:
         return None
@@ -69,8 +74,9 @@ def parse_formatted_message(formatted_message):
     validate_has_key(formatted_message, 'message', 'formattedMessage/message')
     return formatted_message.get('message')
 
+
 def parse_ext_substatus(substatus):
-    #Check extension sub status format
+    # Check extension sub status format
     validate_has_key(substatus, 'status', 'substatus/status')
     validate_in_range(substatus['status'], VALID_EXTENSION_STATUS,
                       'substatus/status')
@@ -82,16 +88,17 @@ def parse_ext_substatus(substatus):
     status.message = parse_formatted_message(formatted_message)
     return status
 
+
 def parse_ext_status(ext_status, data):
     if data is None or len(data) is None:
         return
-    #Currently, only the first status will be reported
+    # Currently, only the first status will be reported
     data = data[0]
-    #Check extension status format
+    # Check extension status format
     validate_has_key(data, 'status', 'status')
     status_data = data['status']
     validate_has_key(status_data, 'status', 'status/status')
-    
+
     validate_in_range(status_data['status'], VALID_EXTENSION_STATUS,
                       'status/status')
 
@@ -108,15 +115,19 @@ def parse_ext_status(ext_status, data):
     for substatus in substatus_list:
         ext_status.substatusList.append(parse_ext_substatus(substatus))
 
+
 class ExtHandlerState(object):
     NotInstalled = "NotInstalled"
     Installed = "Installed"
     Enabled = "Enabled"
 
+
 def get_exthandlers_handler():
     return ExtHandlersHandler()
 
+
 class ExtHandlersHandler(object):
+
     def __init__(self):
         self.protocol_util = get_protocol_util()
         self.ext_handlers = None
@@ -132,7 +143,8 @@ class ExtHandlersHandler(object):
             msg = u"Exception retrieving extension handlers: {0}".format(
                 ustr(e))
             logger.warn(msg)
-            add_event(AGENT_NAME, version=CURRENT_VERSION, is_success=False, message=msg)
+            add_event(AGENT_NAME, version=CURRENT_VERSION,
+                      is_success=False, message=msg)
             return
 
         if self.last_etag is not None and self.last_etag == etag:
@@ -142,7 +154,7 @@ class ExtHandlersHandler(object):
         else:
             msg = u"Handle extensions updates for incarnation {0}".format(etag)
             logger.info(msg)
-            self.log_report = True #Log status report success on new config
+            self.log_report = True  # Log status report success on new config
             self.handle_ext_handlers()
             self.last_etag = etag
 
@@ -151,7 +163,7 @@ class ExtHandlersHandler(object):
     def run_status(self):
         self.report_ext_handlers_status()
         return
-   
+
     def handle_ext_handlers(self):
         if self.ext_handlers.extHandlers is None or \
                 len(self.ext_handlers.extHandlers) == 0:
@@ -159,9 +171,9 @@ class ExtHandlersHandler(object):
             return
 
         for ext_handler in self.ext_handlers.extHandlers:
-            #TODO handle install in sequence, enable in parallel
+            # TODO handle install in sequence, enable in parallel
             self.handle_ext_handler(ext_handler)
-    
+
     def handle_ext_handler(self, ext_handler):
         ext_handler_i = ExtHandlerInstance(ext_handler, self.protocol)
         try:
@@ -179,18 +191,19 @@ class ExtHandlersHandler(object):
         except ExtensionError as e:
             ext_handler_i.set_handler_status(message=ustr(e), code=-1)
             ext_handler_i.report_event(message=ustr(e), is_success=False)
-    
+
     def handle_enable(self, ext_handler_i):
 
-        ext_handler_i.decide_version() 
+        ext_handler_i.decide_version()
 
         old_ext_handler_i = ext_handler_i.get_installed_ext_handler()
         if old_ext_handler_i is not None and \
            old_ext_handler_i.version_gt(ext_handler_i):
-            raise ExtensionError(u"Downgrade not allowed")  
+            raise ExtensionError(u"Downgrade not allowed")
 
         handler_state = ext_handler_i.get_handler_state()
-        ext_handler_i.logger.info("Current handler state is: {0}", handler_state)
+        ext_handler_i.logger.info(
+            "Current handler state is: {0}", handler_state)
         if handler_state == ExtHandlerState.NotInstalled:
             ext_handler_i.set_handler_state(ExtHandlerState.NotInstalled)
 
@@ -210,23 +223,25 @@ class ExtHandlersHandler(object):
         else:
             ext_handler_i.update_settings()
 
-        ext_handler_i.enable() 
+        ext_handler_i.enable()
 
     def handle_disable(self, ext_handler_i):
         handler_state = ext_handler_i.get_handler_state()
-        ext_handler_i.logger.info("Current handler state is: {0}", handler_state)
+        ext_handler_i.logger.info(
+            "Current handler state is: {0}", handler_state)
         if handler_state == ExtHandlerState.Enabled:
             ext_handler_i.disable()
 
     def handle_uninstall(self, ext_handler_i):
         handler_state = ext_handler_i.get_handler_state()
-        ext_handler_i.logger.info("Current handler state is: {0}", handler_state)
+        ext_handler_i.logger.info(
+            "Current handler state is: {0}", handler_state)
         if handler_state != ExtHandlerState.NotInstalled:
             if handler_state == ExtHandlerState.Enabled:
                 ext_handler_i.disable()
             ext_handler_i.uninstall()
         ext_handler_i.rm_ext_handler_dir()
-    
+
     def report_ext_handlers_status(self):
         """Go thru handler_state dir, collect and report status"""
         vm_status = VMStatus()
@@ -244,23 +259,23 @@ class ExtHandlersHandler(object):
                         version=CURRENT_VERSION,
                         is_success=False,
                         message=ustr(e))
-        
+
         logger.verbose("Report vm agent status")
-        
+
         try:
             self.protocol.report_vm_status(vm_status)
         except ProtocolError as e:
             message = "Failed to report vm agent status: {0}".format(e)
-            add_event(AGENT_NAME, version=CURRENT_VERSION, is_success=False, message=message)
+            add_event(AGENT_NAME, version=CURRENT_VERSION,
+                      is_success=False, message=message)
 
         if self.log_report:
             logger.verbose("Successfully reported vm agent status")
 
-
     def report_ext_handler_status(self, vm_status, ext_handler):
         ext_handler_i = ExtHandlerInstance(ext_handler, self.protocol)
-        
-        handler_status = ext_handler_i.get_handler_status() 
+
+        handler_status = ext_handler_i.get_handler_status()
         if handler_status is None:
             return
 
@@ -280,8 +295,10 @@ class ExtHandlersHandler(object):
                 ext_handler_i.set_handler_status(message=ustr(e), code=-1)
 
         vm_status.vmAgent.extensionHandlers.append(handler_status)
-        
+
+
 class ExtHandlerInstance(object):
+
     def __init__(self, ext_handler, protocol):
         self.ext_handler = ext_handler
         self.protocol = protocol
@@ -290,7 +307,7 @@ class ExtHandlerInstance(object):
 
         prefix = "[{0}]".format(self.get_full_name())
         self.logger = logger.Logger(logger.DEFAULT_LOGGER, prefix)
-        
+
         try:
             fileutil.mkdir(self.get_log_dir(), mode=0o744)
         except IOError as e:
@@ -308,7 +325,8 @@ class ExtHandlerInstance(object):
             raise ExtensionError("Failed to get ext handler pkgs", e)
 
         # Determine the desired and installed versions
-        requested_version = FlexibleVersion(self.ext_handler.properties.version)
+        requested_version = FlexibleVersion(
+            self.ext_handler.properties.version)
         installed_version = FlexibleVersion(self.get_installed_version())
         if installed_version is None:
             installed_version = requested_version
@@ -330,14 +348,17 @@ class ExtHandlerInstance(object):
                 public_pkgs.append(pkg)
 
         internal_version = FlexibleVersion(internal_pkg.version) \
-                            if internal_pkg is not None \
-                            else FlexibleVersion()
-        public_pkgs.sort(key=lambda pkg: FlexibleVersion(pkg.version), reverse=True)
+            if internal_pkg is not None \
+            else FlexibleVersion()
+        public_pkgs.sort(
+            key=lambda pkg: FlexibleVersion(pkg.version),
+            reverse=True)
 
         # Determine the preferred version and type of upgrade occurring
         preferred_version = max(requested_version, installed_version)
         is_major_upgrade = preferred_version.major > installed_version.major
-        allow_minor_upgrade = self.ext_handler.properties.upgradePolicy == 'auto'
+        allow_minor_upgrade = \
+            self.ext_handler.properties.upgradePolicy == 'auto'
 
         # Find the first public candidate which
         # - Matches the preferred major version
@@ -348,9 +369,11 @@ class ExtHandlerInstance(object):
         public_pkg = None
         for pkg in public_pkgs:
             pkg_version = FlexibleVersion(pkg.version)
-            if pkg_version.major == preferred_version.major \
-                and (not pkg.disallow_major_upgrade or not is_major_upgrade) \
-                and (allow_minor_upgrade or pkg_version.minor == preferred_version.minor):
+            if pkg_version.major == preferred_version.major and(
+                    not pkg.disallow_major_upgrade or
+                    not is_major_upgrade) and(
+                    allow_minor_upgrade or
+                    pkg_version.minor == preferred_version. minor):
                 public_pkg = pkg
                 break
 
@@ -364,28 +387,29 @@ class ExtHandlerInstance(object):
                     break
 
         public_version = FlexibleVersion(public_pkg.version) \
-                            if public_pkg is not None \
-                            else FlexibleVersion()
+            if public_pkg is not None \
+            else FlexibleVersion()
 
         # Select the candidate
         # - Use the public candidate if there is no internal candidate or
         #   the public is more recent (e.g., a hotfix patch)
         # - Otherwise use the internal candidate
-        if internal_pkg is None or (public_pkg is not None and public_version > internal_version):
+        if internal_pkg is None or(
+                public_pkg is not None and public_version > internal_version):
             selected_pkg = public_pkg
         else:
             selected_pkg = internal_pkg
 
         selected_version = FlexibleVersion(selected_pkg.version) \
-                            if selected_pkg is not None \
-                            else FlexibleVersion()
+            if selected_pkg is not None \
+            else FlexibleVersion()
 
         # Finally, update the version only if not downgrading
         # Note:
         #  - A downgrade, which will be bound to the same major version,
         #    is allowed if the installed version is no longer available
-        if selected_pkg is None \
-            or (installed_pkg is not None and selected_version < installed_version):
+        if (selected_pkg is None or(installed_pkg is not None and
+           selected_version < installed_version)):
             self.pkg = installed_pkg
             self.ext_handler.properties.version = installed_version
         else:
@@ -407,27 +431,30 @@ class ExtHandlerInstance(object):
         lastest_version = self.get_installed_version()
         if lastest_version is None:
             return None
-        
+
         installed_handler = ExtHandler()
-        set_properties("ExtHandler", installed_handler, get_properties(self.ext_handler))
+        set_properties("ExtHandler", installed_handler,
+                       get_properties(self.ext_handler))
         installed_handler.properties.version = lastest_version
         return ExtHandlerInstance(installed_handler, self.protocol)
 
     def get_installed_version(self):
         lastest_version = None
 
-        for path in glob.iglob(os.path.join(conf.get_lib_dir(), self.ext_handler.name + "-*")):
+        for path in glob.iglob(os.path.join(
+                conf.get_lib_dir(),
+                self.ext_handler.name + "-*")):
             if not os.path.isdir(path):
                 continue
 
             separator = path.rfind('-')
-            version = FlexibleVersion(path[separator+1:])
+            version = FlexibleVersion(path[separator + 1:])
 
             if lastest_version is None or lastest_version < version:
                 lastest_version = version
 
         return str(lastest_version) if lastest_version is not None else None
-    
+
     def copy_status_files(self, old_ext_handler_i):
         self.logger.info("Copy status files from old plugin to new")
         old_ext_dir = old_ext_handler_i.get_base_dir()
@@ -445,13 +472,13 @@ class ExtHandlerInstance(object):
                 status_file = os.path.join(old_ext_status_dir, status_file)
                 if os.path.isfile(status_file):
                     shutil.copy2(status_file, new_ext_status_dir)
-    
+
     def set_operation(self, op):
         self.operation = op
 
     def report_event(self, message="", is_success=True):
         version = self.ext_handler.properties.version
-        add_event(name=self.ext_handler.name, version=version, message=message, 
+        add_event(name=self.ext_handler.name, version=version, message=message,
                   op=self.operation, is_success=is_success)
 
     def download(self):
@@ -459,14 +486,14 @@ class ExtHandlerInstance(object):
         self.set_operation(WALAEventOperation.Download)
         if self.pkg is None:
             raise ExtensionError("No package uri found")
-        
+
         package = None
         for uri in self.pkg.uris:
             try:
                 package = self.protocol.download_ext_handler_pkg(uri.uri)
-            except ProtocolError as e: 
+            except ProtocolError as e:
                 logger.warn("Failed download extension: {0}", e)
-        
+
         if package is None:
             raise ExtensionError("Failed to download extension")
 
@@ -479,25 +506,26 @@ class ExtHandlerInstance(object):
         except IOError as e:
             raise ExtensionError(u"Failed to write and unzip plugin", e)
 
-        chmod = "find {0} -type f | xargs chmod u+x".format(self.get_base_dir())
+        chmod = "find {0} -type f | xargs chmod u+x".format(
+            self.get_base_dir())
         shellutil.run(chmod)
         self.report_event(message="Download succeeded")
 
         self.logger.info("Initialize extension directory")
-        #Save HandlerManifest.json
+        # Save HandlerManifest.json
         man_file = fileutil.search_file(self.get_base_dir(),
                                         'HandlerManifest.json')
 
         if man_file is None:
             raise ExtensionError("HandlerManifest.json not found")
-        
+
         try:
             man = fileutil.read_file(man_file, remove_bom=True)
             fileutil.write_file(self.get_manifest_file(), man)
         except IOError as e:
             raise ExtensionError(u"Failed to save HandlerManifest.json", e)
 
-        #Create status and config dir
+        # Create status and config dir
         try:
             status_dir = self.get_status_dir()
             fileutil.mkdir(status_dir, mode=0o700)
@@ -506,7 +534,7 @@ class ExtHandlerInstance(object):
         except IOError as e:
             raise ExtensionError(u"Failed to create status or config dir", e)
 
-        #Save HandlerEnvironment.json
+        # Save HandlerEnvironment.json
         self.create_handler_env()
 
     def enable(self):
@@ -538,18 +566,19 @@ class ExtHandlerInstance(object):
     def uninstall(self):
         self.logger.info("Uninstall extension.")
         self.set_operation(WALAEventOperation.UnInstall)
-        
+
         try:
             man = self.load_manifest()
             self.launch_command(man.get_uninstall_command())
         except ExtensionError as e:
             self.report_event(message=ustr(e), is_success=False)
-    
+
     def rm_ext_handler_dir(self):
         try:
             handler_state_dir = self.get_handler_state_dir()
             if os.path.isdir(handler_state_dir):
-                self.logger.info("Remove ext handler dir: {0}", handler_state_dir)
+                self.logger.info(
+                    "Remove ext handler dir: {0}", handler_state_dir)
                 shutil.rmtree(handler_state_dir)
             base_dir = self.get_base_dir()
             if os.path.isdir(base_dir):
@@ -562,10 +591,10 @@ class ExtHandlerInstance(object):
     def update(self):
         self.logger.info("Update extension.")
         self.set_operation(WALAEventOperation.Update)
-        
+
         man = self.load_manifest()
         self.launch_command(man.get_update_command(), timeout=900)
-    
+
     def update_with_install(self):
         man = self.load_manifest()
         if man.is_update_with_install():
@@ -618,7 +647,7 @@ class ExtHandlerInstance(object):
             ext_status.status = "error"
 
         return ext_status
-    
+
     def report_ext_status(self):
         active_exts = []
         for ext in self.ext_handler.properties.extensions:
@@ -626,13 +655,13 @@ class ExtHandlerInstance(object):
             if ext_status is None:
                 continue
             try:
-                self.protocol.report_ext_status(self.ext_handler.name, ext.name, 
-                                                ext_status)
+                self.protocol.report_ext_status(
+                    self.ext_handler.name, ext.name, ext_status)
                 active_exts.append(ext.name)
             except ProtocolError as e:
                 self.logger.error(u"Failed to report extension status: {0}", e)
         return active_exts
-   
+
     def collect_heartbeat(self):
         man = self.load_manifest()
         if not man.is_report_heartbeat():
@@ -645,9 +674,9 @@ class ExtHandlerInstance(object):
             raise ExtensionError("Failed to get heart beat file")
         if not self.is_responsive(heartbeat_file):
             return {
-                    "status": "Unresponsive",
-                    "code": -1,
-                    "message": "Extension heartbeat is not responsive"
+                "status": "Unresponsive",
+                "code": -1,
+                "message": "Extension heartbeat is not responsive"
             }
         try:
             heartbeat_json = fileutil.read_file(heartbeat_file)
@@ -657,11 +686,11 @@ class ExtHandlerInstance(object):
         except ValueError as e:
             raise ExtensionError("Malformed heartbeat file: {0}".format(e))
         return heartbeat
- 
+
     def is_responsive(self, heartbeat_file):
-        last_update=int(time.time() - os.stat(heartbeat_file).st_mtime)
-        return  last_update > 600    # not updated for more than 10 min
-   
+        last_update = int(time.time() - os.stat(heartbeat_file).st_mtime)
+        return last_update > 600    # not updated for more than 10 min
+
     def launch_command(self, cmd, timeout=300):
         self.logger.info("Launch command:{0}", cmd)
         base_dir = self.get_base_dir()
@@ -672,7 +701,7 @@ class ExtHandlerInstance(object):
                                      cwd=base_dir,
                                      stdout=devnull)
         except Exception as e:
-            #TODO do not catch all exception
+            # TODO do not catch all exception
             raise ExtensionError("Failed to launch: {0}, {1}".format(cmd, e))
 
         retry = timeout
@@ -684,8 +713,9 @@ class ExtHandlerInstance(object):
             raise ExtensionError("Timeout({0}): {1}".format(timeout, cmd))
 
         ret = child.wait()
-        if ret == None or ret != 0:
-            raise ExtensionError("Non-zero exit code: {0}, {1}".format(ret, cmd))
+        if ret is None or ret != 0:
+            raise ExtensionError(
+                "Non-zero exit code: {0}, {1}".format(ret, cmd))
 
         self.report_event(message="Launch command succeeded: {0}".format(cmd))
 
@@ -710,12 +740,13 @@ class ExtHandlerInstance(object):
     def update_settings(self):
         if self.ext_handler.properties.extensions is None or \
                 len(self.ext_handler.properties.extensions) == 0:
-            #This is the behavior of waagent 2.0.x
-            #The new agent has to be consistent with the old one.
-            self.logger.info("Extension has no settings, write empty 0.settings")
+            # This is the behavior of waagent 2.0.x
+            # The new agent has to be consistent with the old one.
+            self.logger.info(
+                "Extension has no settings, write empty 0.settings")
             self.update_settings_file("0.settings", "")
             return
-        
+
         for ext in self.ext_handler.properties.extensions:
             settings = {
                 'publicSettings': ext.publicSettings,
@@ -723,7 +754,7 @@ class ExtHandlerInstance(object):
                 'protectedSettingsCertThumbprint': ext.certificateThumbprint
             }
             ext_settings = {
-                "runtimeSettings":[{
+                "runtimeSettings": [{
                     "handlerSettings": settings
                 }]
             }
@@ -734,21 +765,21 @@ class ExtHandlerInstance(object):
     def create_handler_env(self):
         env = [{
             "name": self.ext_handler.name,
-            "version" : HANDLER_ENVIRONMENT_VERSION,
-            "handlerEnvironment" : {
-                "logFolder" : self.get_log_dir(),
-                "configFolder" : self.get_conf_dir(),
-                "statusFolder" : self.get_status_dir(),
-                "heartbeatFile" : self.get_heartbeat_file()
+            "version": HANDLER_ENVIRONMENT_VERSION,
+            "handlerEnvironment": {
+                "logFolder": self.get_log_dir(),
+                "configFolder": self.get_conf_dir(),
+                "statusFolder": self.get_status_dir(),
+                "heartbeatFile": self.get_heartbeat_file()
             }
         }]
         try:
             fileutil.write_file(self.get_env_file(), json.dumps(env))
         except IOError as e:
             raise ExtensionError(u"Failed to save handler environment", e)
-    
+
     def get_handler_state_dir(self):
-        return os.path.join(conf.get_lib_dir(), "handler_state", 
+        return os.path.join(conf.get_lib_dir(), "handler_state",
                             self.get_full_name())
 
     def set_handler_state(self, handler_state):
@@ -758,13 +789,13 @@ class ExtHandlerInstance(object):
                 fileutil.mkdir(state_dir, 0o700)
             except IOError as e:
                 self.logger.error("Failed to create state dir: {0}", e)
-        
+
         try:
             state_file = os.path.join(state_dir, "state")
             fileutil.write_file(state_file, handler_state)
         except IOError as e:
             self.logger.error("Failed to set state: {0}", e)
-    
+
     def get_handler_state(self):
         state_dir = self.get_handler_state_dir()
         state_file = os.path.join(state_dir, "state")
@@ -776,8 +807,8 @@ class ExtHandlerInstance(object):
         except IOError as e:
             self.logger.error("Failed to get state: {0}", e)
             return ExtHandlerState.NotInstalled
-    
-    def set_handler_status(self, status="NotReady", message="", 
+
+    def set_handler_status(self, status="NotReady", message="",
                            code=0):
         state_dir = self.get_handler_state_dir()
         if not os.path.exists(state_dir):
@@ -785,7 +816,7 @@ class ExtHandlerInstance(object):
                 fileutil.mkdir(state_dir, 0o700)
             except IOError as e:
                 self.logger.error("Failed to create state dir: {0}", e)
-        
+
         handler_status = ExtHandlerStatus()
         handler_status.name = self.ext_handler.name
         handler_status.version = self.ext_handler.properties.version
@@ -795,29 +826,29 @@ class ExtHandlerInstance(object):
         status_file = os.path.join(state_dir, "status")
 
         try:
-            fileutil.write_file(status_file, 
+            fileutil.write_file(status_file,
                                 json.dumps(get_properties(handler_status)))
         except (IOError, ValueError, ProtocolError) as e:
             self.logger.error("Failed to save handler status: {0}", e)
-        
+
     def get_handler_status(self):
         state_dir = self.get_handler_state_dir()
         status_file = os.path.join(state_dir, "status")
         if not os.path.isfile(status_file):
             return None
-        
+
         try:
             data = json.loads(fileutil.read_file(status_file))
-            handler_status = ExtHandlerStatus() 
+            handler_status = ExtHandlerStatus()
             set_properties("ExtHandlerStatus", handler_status, data)
             return handler_status
         except (IOError, ValueError) as e:
             self.logger.error("Failed to get handler status: {0}", e)
 
     def get_full_name(self):
-        return "{0}-{1}".format(self.ext_handler.name, 
+        return "{0}-{1}".format(self.ext_handler.name,
                                 self.ext_handler.properties.version)
-   
+
     def get_base_dir(self):
         return os.path.join(conf.get_lib_dir(), self.get_full_name())
 
@@ -840,7 +871,9 @@ class ExtHandlerInstance(object):
         return os.path.join(conf.get_ext_log_dir(), self.ext_handler.name,
                             self.ext_handler.properties.version)
 
+
 class HandlerEnvironment(object):
+
     def __init__(self, data):
         self.data = data
 
@@ -859,7 +892,9 @@ class HandlerEnvironment(object):
     def get_heartbeat_file(self):
         return self.data["handlerEnvironment"]["heartbeatFile"]
 
+
 class HandlerManifest(object):
+
     def __init__(self, data):
         if data is None or data['handlerManifest'] is None:
             raise ExtensionError('Malformed manifest file.')
diff --git a/azurelinuxagent/ga/monitor.py b/azurelinuxagent/ga/monitor.py
index f49cef8..774c786 100644
--- a/azurelinuxagent/ga/monitor.py
+++ b/azurelinuxagent/ga/monitor.py
@@ -26,18 +26,20 @@ import azurelinuxagent.common.conf as conf
 import azurelinuxagent.common.logger as logger
 
 from azurelinuxagent.common.event import WALAEventOperation, add_event
-from azurelinuxagent.common.exception import EventError, ProtocolError, OSUtilError
+from azurelinuxagent.common.exception import EventError, ProtocolError, \
+    OSUtilError
 from azurelinuxagent.common.future import ustr
 from azurelinuxagent.common.osutil import get_osutil
 from azurelinuxagent.common.protocol import get_protocol_util
 from azurelinuxagent.common.protocol.restapi import TelemetryEventParam, \
-                                                    TelemetryEventList, \
-                                                    TelemetryEvent, \
-                                                    set_properties
-from azurelinuxagent.common.utils.textutil import parse_doc, findall, find, getattrib
+    TelemetryEventList, \
+    TelemetryEvent, \
+    set_properties
+from azurelinuxagent.common.utils.textutil import parse_doc, findall, \
+    find, getattrib
 from azurelinuxagent.common.version import DISTRO_NAME, DISTRO_VERSION, \
-                                            DISTRO_CODE_NAME, AGENT_LONG_VERSION, \
-                                            CURRENT_AGENT, CURRENT_VERSION
+    DISTRO_CODE_NAME, AGENT_LONG_VERSION, \
+    CURRENT_AGENT, CURRENT_VERSION
 
 
 def parse_event(data_str):
@@ -87,6 +89,7 @@ def get_monitor_handler():
 
 
 class MonitorHandler(object):
+
     def __init__(self):
         self.osutil = get_osutil()
         self.protocol_util = get_protocol_util()
diff --git a/azurelinuxagent/ga/update.py b/azurelinuxagent/ga/update.py
index e89608a..2b29603 100644
--- a/azurelinuxagent/ga/update.py
+++ b/azurelinuxagent/ga/update.py
@@ -41,16 +41,16 @@ from azurelinuxagent.common.future import ustr
 from azurelinuxagent.common.osutil import get_osutil
 from azurelinuxagent.common.protocol import get_protocol_util
 from azurelinuxagent.common.utils.flexible_version import FlexibleVersion
-from azurelinuxagent.common.version import AGENT_NAME, AGENT_VERSION, AGENT_LONG_VERSION, \
-                                            AGENT_DIR_GLOB, AGENT_PKG_GLOB, \
-                                            AGENT_PATTERN, AGENT_NAME_PATTERN, AGENT_DIR_PATTERN, \
-                                            CURRENT_AGENT, CURRENT_VERSION, \
-                                            is_current_agent_installed
+from azurelinuxagent.common.version import AGENT_NAME, AGENT_VERSION, \
+    AGENT_LONG_VERSION, AGENT_DIR_GLOB, AGENT_PKG_GLOB, \
+    AGENT_PATTERN, AGENT_NAME_PATTERN, AGENT_DIR_PATTERN, \
+    CURRENT_AGENT, CURRENT_VERSION, \
+    is_current_agent_installed
 
 from azurelinuxagent.ga.exthandlers import HandlerManifest
 
 
-AGENT_ERROR_FILE = "error.json" # File name for agent error record
+AGENT_ERROR_FILE = "error.json"  # File name for agent error record
 AGENT_MANIFEST_FILE = "HandlerManifest.json"
 
 CHILD_HEALTH_INTERVAL = 15 * 60
@@ -58,11 +58,11 @@ CHILD_LAUNCH_INTERVAL = 5 * 60
 CHILD_LAUNCH_RESTART_MAX = 3
 CHILD_POLL_INTERVAL = 60
 
-MAX_FAILURE = 3 # Max failure allowed for agent before blacklisted
+MAX_FAILURE = 3  # Max failure allowed for agent before blacklisted
 
 GOAL_STATE_INTERVAL = 25
 REPORT_STATUS_INTERVAL = 15
-RETAIN_INTERVAL = 24 * 60 * 60 # Retain interval for black list
+RETAIN_INTERVAL = 24 * 60 * 60  # Retain interval for black list
 
 
 def get_update_handler():
@@ -71,7 +71,8 @@ def get_update_handler():
 
 def get_python_cmd():
     major_version = platform.python_version_tuple()[0]
-    return "python" if int(major_version) <= 2 else "python{0}".format(major_version)
+    return "python" if int(major_version) <= 2 else "python{0}".format(
+        major_version)
 
 
 class UpdateHandler(object):
@@ -104,20 +105,27 @@ class UpdateHandler(object):
         """
 
         if self.child_process is not None:
-            raise Exception("Illegal attempt to launch multiple goal state Agent processes")
+            raise Exception(
+                "Illegal attempt to launch multiple goal state Agent \
+                processes")
 
         if self.signal_handler is None:
-            self.signal_handler = signal.signal(signal.SIGTERM, self.forward_signal)
+            self.signal_handler = signal.signal(
+                signal.SIGTERM, self.forward_signal)
 
         latest_agent = self.get_latest_agent()
         if latest_agent is None:
-            logger.info(u"Installed Agent {0} is the most current agent", CURRENT_AGENT)
+            logger.info(
+                u"Installed Agent {0} is the most current agent",
+                CURRENT_AGENT)
             agent_cmd = "python -u {0} -run-exthandlers".format(sys.argv[0])
             agent_dir = os.getcwd()
             agent_name = CURRENT_AGENT
             agent_version = CURRENT_VERSION
         else:
-            logger.info(u"Determined Agent {0} to be the latest agent", latest_agent.name)
+            logger.info(
+                u"Determined Agent {0} to be the latest agent",
+                latest_agent.name)
             agent_cmd = latest_agent.get_agent_cmd()
             agent_dir = latest_agent.get_agent_dir()
             agent_name = latest_agent.name
@@ -139,7 +147,9 @@ class UpdateHandler(object):
                 stdout=sys.stdout,
                 stderr=sys.stderr)
 
-            logger.info(u"Agent {0} launched with command '{1}'", agent_name, agent_cmd)
+            logger.info(
+                u"Agent {0} launched with command '{1}'", agent_name,
+                agent_cmd)
 
             ret = None
             start_time = time.time()
@@ -150,9 +160,9 @@ class UpdateHandler(object):
                     break
 
             if ret is None or ret <= 0:
-                msg = u"Agent {0} launched with command '{1}' is successfully running".format(
-                    agent_name,
-                    agent_cmd)
+                msg = u"Agent {0} launched with command '{1}' is successfully \
+                    running".format(
+                    agent_name, agent_cmd)
                 logger.info(msg)
                 add_event(
                     AGENT_NAME,
@@ -165,10 +175,9 @@ class UpdateHandler(object):
                     ret = self.child_process.wait()
 
             else:
-                msg = u"Agent {0} launched with command '{1}' failed with return code: {2}".format(
-                    agent_name,
-                    agent_cmd,
-                    ret)
+                msg = u"Agent {0} launched with command '{1}' failed with \
+                    return code: {2}".format(
+                    agent_name, agent_cmd, ret)
                 logger.warn(msg)
                 add_event(
                     AGENT_NAME,
@@ -178,19 +187,17 @@ class UpdateHandler(object):
                     message=msg)
 
             if ret is not None and ret > 0:
-                msg = u"Agent {0} launched with command '{1}' returned code: {2}".format(
-                    agent_name,
-                    agent_cmd,
-                    ret)
+                msg = u"Agent {0} launched with command '{1}' returned \
+                    code: {2}".format(
+                    agent_name, agent_cmd, ret)
                 logger.warn(msg)
                 if latest_agent is not None:
                     latest_agent.mark_failure()
 
         except Exception as e:
-            msg = u"Agent {0} launched with command '{1}' failed with exception: {2}".format(
-                agent_name,
-                agent_cmd,
-                ustr(e))
+            msg = u"Agent {0} launched with command '{1}' \
+                failed with exception: {2}".format(
+                agent_name, agent_cmd, ustr(e))
             logger.warn(msg)
             add_event(
                 AGENT_NAME,
@@ -209,7 +216,8 @@ class UpdateHandler(object):
         This is the main loop which watches for agent and extension updates.
         """
 
-        logger.info(u"Agent {0} is running as the goal state agent", CURRENT_AGENT)
+        logger.info(
+            u"Agent {0} is running as the goal state agent", CURRENT_AGENT)
 
         # Launch monitoring threads
         from azurelinuxagent.ga.monitor import get_monitor_handler
@@ -227,17 +235,20 @@ class UpdateHandler(object):
                 if self._ensure_latest_agent():
                     if len(self.agents) > 0:
                         logger.info(
-                            u"Agent {0} discovered {1} as an update and will exit",
+                            u"Agent {0} discovered {1} as an update and \
+                                    will exit",
                             CURRENT_AGENT,
                             self.agents[0].name)
                     break
 
                 exthandlers_handler.run()
-                
+
                 time.sleep(25)
 
         except Exception as e:
-            logger.warn(u"Agent {0} failed with exception: {1}", CURRENT_AGENT, ustr(e))
+            logger.warn(
+                u"Agent {0} failed with exception: {1}", CURRENT_AGENT,
+                ustr(e))
             sys.exit(1)
 
         sys.exit(0)
@@ -246,12 +257,11 @@ class UpdateHandler(object):
     def forward_signal(self, signum, frame):
         if self.child_process is None:
             return
-        
+
         logger.info(
-            u"Agent {0} forwarding signal {1} to {2}",
-            CURRENT_AGENT,
-            signum,
-            self.child_agent.name if self.child_agent is not None else CURRENT_AGENT)
+            u"Agent {0} forwarding signal {1} to {2}", CURRENT_AGENT, signum,
+            self.child_agent.name
+            if self.child_agent is not None else CURRENT_AGENT)
         self.child_process.send_signal(signum)
 
         if self.signal_handler not in (None, signal.SIG_IGN, signal.SIG_DFL):
@@ -270,9 +280,10 @@ class UpdateHandler(object):
 
         if not conf.get_autoupdate_enabled():
             return None
-        
+
         self._load_agents()
-        available_agents = [agent for agent in self.agents if agent.is_available]
+        available_agents = [agent for agent in self.agents
+                            if agent.is_available]
         return available_agents[0] if len(available_agents) >= 1 else None
 
     def _ensure_latest_agent(self, base_version=CURRENT_VERSION):
@@ -282,7 +293,8 @@ class UpdateHandler(object):
 
         now = time.time()
         if self.last_attempt_time is not None:
-            next_attempt_time = self.last_attempt_time + conf.get_autoupdate_frequency()
+            next_attempt_time = self.last_attempt_time + \
+                conf.get_autoupdate_frequency()
         else:
             next_attempt_time = now
         if next_attempt_time > now:
@@ -310,18 +322,20 @@ class UpdateHandler(object):
             logger.info(u"Incarnation {0} has no agent updates", etag)
             return False
 
-        manifests = [m for m in manifest_list.vmAgentManifests if m.family == family]
+        manifests = [m for m in manifest_list.vmAgentManifests
+                     if m.family == family]
         if len(manifests) == 0:
-            logger.info(u"Incarnation {0} has no agent family {1} updates", etag, family)
+            logger.info(
+                u"Incarnation {0} has no agent family {1} updates", etag,
+                family)
             return False
 
         try:
             pkg_list = protocol.get_vmagent_pkgs(manifests[0])
         except ProtocolError as e:
-            msg= u"Incarnation {0} failed to get {1} package list: {2}".format(
-                etag,
-                family,
-                ustr(e))
+            msg = u"Incarnation {0} failed to get {1} package list: {2}".\
+                format(
+                    etag, family, ustr(e))
             logger.warn(msg)
             add_event(
                 AGENT_NAME,
@@ -331,11 +345,14 @@ class UpdateHandler(object):
                 message=msg)
             return False
 
-        # Set the agents to those available for download at least as current as the existing agent
-        # and remove from disk any agent no longer reported to the VM.
+        # Set the agents to those available for download at least as current
+        # as the existing agent and remove from disk any agent no longer
+        # reported to the VM.
         # Note:
-        #  The code leaves on disk available, but blacklisted, agents so as to preserve the state.
-        #  Otherwise, those agents could be again downloaded and inappropriately retried.
+        #  The code leaves on disk available, but blacklisted, agents so as
+        # to preserve the state.
+        # Otherwise, those agents could be again downloaded and inappropriately
+        # retried.
         self._set_agents([GuestAgent(pkg=pkg) for pkg in pkg_list.versions])
         self._purge_agents()
         self._filter_blacklisted_agents()
@@ -352,7 +369,8 @@ class UpdateHandler(object):
             self.child_agent = None
             return
 
-        if self.child_agent is None or latest_agent.version != self.child_agent.version:
+        if (self.child_agent is None or
+           latest_agent.version != self.child_agent.version):
             self.child_agent = latest_agent
             self.child_launch_time = None
             self.child_launch_attempts = 0
@@ -363,16 +381,18 @@ class UpdateHandler(object):
         self.child_launch_attempts += 1
 
         if (time.time() - self.child_launch_time) <= CHILD_LAUNCH_INTERVAL \
-            and self.child_launch_attempts >= CHILD_LAUNCH_RESTART_MAX:
-                msg = u"Agent {0} restarted more than {1} times in {2} seconds".format(
+                and self.child_launch_attempts >= CHILD_LAUNCH_RESTART_MAX:
+            msg = u"Agent {0} restarted more than {1} times in {2} seconds". \
+                format(
                     self.child_agent.name,
                     CHILD_LAUNCH_RESTART_MAX,
                     CHILD_LAUNCH_INTERVAL)
-                raise Exception(msg)
+            raise Exception(msg)
         return
 
     def _filter_blacklisted_agents(self):
-        self.agents = [agent for agent in self.agents if not agent.is_blacklisted]
+        self.agents = [agent for agent in self.agents
+                       if not agent.is_blacklisted]
         return
 
     def _load_agents(self):
@@ -381,12 +401,18 @@ class UpdateHandler(object):
         """
         if len(self.agents) <= 0:
             try:
-                path = os.path.join(conf.get_lib_dir(), "{0}-*".format(AGENT_NAME))
-                self._set_agents([GuestAgent(path=agent_dir)
-                                    for agent_dir in glob.iglob(path) if os.path.isdir(agent_dir)])
+                path = os.path.join(
+                    conf.get_lib_dir(),
+                    "{0}-*".format(AGENT_NAME))
+                self._set_agents(
+                    [GuestAgent(path=agent_dir)
+                     for agent_dir in glob.iglob(path)
+                     if os.path.isdir(agent_dir)])
                 self._filter_blacklisted_agents()
             except Exception as e:
-                logger.warn(u"Exception occurred loading available agents: {0}", ustr(e))
+                logger.warn(
+                    u"Exception occurred loading available agents: {0}",
+                    ustr(e))
         return
 
     def _purge_agents(self):
@@ -397,9 +423,11 @@ class UpdateHandler(object):
         path = os.path.join(conf.get_lib_dir(), "{0}-*".format(AGENT_NAME))
 
         known_versions = [agent.version for agent in self.agents]
-        if not is_current_agent_installed() and CURRENT_VERSION not in known_versions:
+        if (not is_current_agent_installed() and
+           CURRENT_VERSION not in known_versions):
             logger.warn(
-                u"Running Agent {0} was not found in the agent manifest - adding to list",
+                u"Running Agent {0} was not found in the agent manifest - "
+                "adding to list",
                 CURRENT_VERSION)
             known_versions.append(CURRENT_VERSION)
 
@@ -407,15 +435,20 @@ class UpdateHandler(object):
             try:
                 name = fileutil.trim_ext(agent_path, "zip")
                 m = AGENT_DIR_PATTERN.match(name)
-                if m is not None and FlexibleVersion(m.group(1)) not in known_versions:
+                if m is not None and FlexibleVersion(
+                        m.group(1)) not in known_versions:
                     if os.path.isfile(agent_path):
-                        logger.info(u"Purging outdated Agent file {0}", agent_path)
+                        logger.info(
+                            u"Purging outdated Agent file {0}", agent_path)
                         os.remove(agent_path)
                     else:
-                        logger.info(u"Purging outdated Agent directory {0}", agent_path)
+                        logger.info(
+                            u"Purging outdated Agent directory {0}",
+                            agent_path)
                         shutil.rmtree(agent_path)
             except Exception as e:
-                logger.warn(u"Purging {0} raised exception: {1}", agent_path, ustr(e))
+                logger.warn(
+                    u"Purging {0} raised exception: {1}", agent_path, ustr(e))
         return
 
     def _set_agents(self, agents=[]):
@@ -425,18 +458,19 @@ class UpdateHandler(object):
 
 
 class GuestAgent(object):
+
     def __init__(self, path=None, pkg=None):
         self.pkg = pkg
         version = None
         if path is not None:
             m = AGENT_DIR_PATTERN.match(path)
-            if m == None:
+            if m is None:
                 raise UpdateError(u"Illegal agent directory: {0}".format(path))
             version = m.group(1)
         elif self.pkg is not None:
             version = pkg.version
 
-        if version == None:
+        if version is None:
             raise UpdateError(u"Illegal agent version: {0}".format(version))
         self.version = FlexibleVersion(version)
 
@@ -481,7 +515,8 @@ class GuestAgent(object):
 
     @property
     def is_downloaded(self):
-        return self.is_blacklisted or os.path.isfile(self.get_agent_manifest_path())
+        return self.is_blacklisted or os.path.isfile(
+            self.get_agent_manifest_path())
 
     def mark_failure(self, is_fatal=False):
         try:
@@ -492,7 +527,9 @@ class GuestAgent(object):
             if is_fatal:
                 logger.warn(u"Agent {0} is permanently blacklisted", self.name)
         except Exception as e:
-            logger.warn(u"Agent {0} failed recording error state: {1}", self.name, ustr(e))
+            logger.warn(
+                u"Agent {0} failed recording error state: {1}", self.name,
+                ustr(e))
         return
 
     def _ensure_downloaded(self):
@@ -500,18 +537,22 @@ class GuestAgent(object):
             logger.info(u"Ensuring Agent {0} is downloaded", self.name)
 
             if self.is_blacklisted:
-                logger.info(u"Agent {0} is blacklisted - skipping download", self.name)
+                logger.info(
+                    u"Agent {0} is blacklisted - skipping download", self.name)
                 return
 
             if self.is_downloaded:
-                logger.info(u"Agent {0} was previously downloaded - skipping download", self.name)
+                logger.info(
+                    u"Agent {0} was previously downloaded - skipping download",
+                    self.name)
                 self._load_manifest()
                 return
 
             if self.pkg is None:
-                raise UpdateError(u"Agent {0} is missing package and download URIs".format(
-                    self.name))
-            
+                raise UpdateError(
+                    u"Agent {0} is missing package and download URIs".format(
+                        self.name))
+
             self._download()
             self._unpack()
             self._load_manifest()
@@ -530,9 +571,11 @@ class GuestAgent(object):
             # Note the failure, blacklist the agent if the package downloaded
             # - An exception with a downloaded package indicates the package
             #   is corrupt (e.g., missing the HandlerManifest.json file)
-            self.mark_failure(is_fatal=os.path.isfile(self.get_agent_pkg_path()))
+            self.mark_failure(is_fatal=os.path.isfile(
+                self.get_agent_pkg_path()))
 
-            msg = u"Agent {0} download failed with exception: {1}".format(self.name, ustr(e))
+            msg = u"Agent {0} download failed with exception: {1}".format(
+                self.name, ustr(e))
             logger.warn(msg)
             add_event(
                 AGENT_NAME,
@@ -550,14 +593,20 @@ class GuestAgent(object):
                 resp = restutil.http_get(uri.uri, chk_proxy=True)
                 if resp.status == restutil.httpclient.OK:
                     package = resp.read()
-                    fileutil.write_file(self.get_agent_pkg_path(), bytearray(package), asbin=True)
-                    logger.info(u"Agent {0} downloaded from {1}", self.name, uri.uri)
+                    fileutil.write_file(
+                        self.get_agent_pkg_path(),
+                        bytearray(package),
+                        asbin=True)
+                    logger.info(
+                        u"Agent {0} downloaded from {1}", self.name, uri.uri)
                     break
             except restutil.HttpError as e:
-                logger.warn(u"Agent {0} download from {1} failed", self.name, uri.uri)
+                logger.warn(
+                    u"Agent {0} download from {1} failed", self.name, uri.uri)
 
         if not os.path.isfile(self.get_agent_pkg_path()):
-            msg = u"Unable to download Agent {0} from any URI".format(self.name)
+            msg = u"Unable to download Agent {0} from any URI".format(
+                self.name)
             add_event(
                 AGENT_NAME,
                 op=WALAEventOperation.Download,
@@ -572,26 +621,32 @@ class GuestAgent(object):
             if self.error is None:
                 self.error = GuestAgentError(self.get_agent_error_file())
             self.error.load()
-            logger.info(u"Agent {0} error state: {1}", self.name, ustr(self.error))
+            logger.info(u"Agent {0} error state: {1}",
+                        self.name, ustr(self.error))
         except Exception as e:
-            logger.warn(u"Agent {0} failed loading error state: {1}", self.name, ustr(e))
+            logger.warn(
+                u"Agent {0} failed loading error state: {1}", self.name,
+                ustr(e))
         return
 
     def _load_manifest(self):
         path = self.get_agent_manifest_path()
         if not os.path.isfile(path):
-            msg = u"Agent {0} is missing the {1} file".format(self.name, AGENT_MANIFEST_FILE)
+            msg = u"Agent {0} is missing the {1} file".format(
+                self.name, AGENT_MANIFEST_FILE)
             raise UpdateError(msg)
 
         with open(path, "r") as manifest_file:
             try:
                 manifests = json.load(manifest_file)
             except Exception as e:
-                msg = u"Agent {0} has a malformed {1}".format(self.name, AGENT_MANIFEST_FILE)
+                msg = u"Agent {0} has a malformed {1}".format(
+                    self.name, AGENT_MANIFEST_FILE)
                 raise UpdateError(msg)
-            if type(manifests) is list:
+            if isinstance(manifests, list):
                 if len(manifests) <= 0:
-                    msg = u"Agent {0} has an empty {1}".format(self.name, AGENT_MANIFEST_FILE)
+                    msg = u"Agent {0} has an empty {1}".format(
+                        self.name, AGENT_MANIFEST_FILE)
                     raise UpdateError(msg)
                 manifest = manifests[0]
             else:
@@ -613,9 +668,9 @@ class GuestAgent(object):
             self.name,
             self.get_agent_manifest_path())
         logger.verbose(u"Successfully loaded Agent {0} {1}: {2}",
-            self.name,
-            AGENT_MANIFEST_FILE,
-            ustr(self.manifest.data))
+                       self.name,
+                       AGENT_MANIFEST_FILE,
+                       ustr(self.manifest.data))
         return
 
     def _unpack(self):
@@ -623,7 +678,9 @@ class GuestAgent(object):
             if os.path.isdir(self.get_agent_dir()):
                 shutil.rmtree(self.get_agent_dir())
 
-            zipfile.ZipFile(self.get_agent_pkg_path()).extractall(self.get_agent_dir())
+            zipfile.ZipFile(
+                self.get_agent_pkg_path()).extractall(
+                self.get_agent_dir())
 
         except Exception as e:
             msg = u"Exception unpacking Agent {0} from {1}: {2}".format(
@@ -646,6 +703,7 @@ class GuestAgent(object):
 
 
 class GuestAgentError(object):
+
     def __init__(self, path):
         if path is None:
             raise UpdateError(u"GuestAgentError requires a path")
@@ -654,7 +712,7 @@ class GuestAgentError(object):
         self.clear()
         self.load()
         return
-   
+
     def mark_failure(self, is_fatal=False):
         self.last_failure = time.time()
         self.failure_count += 1
@@ -666,7 +724,7 @@ class GuestAgentError(object):
         self.failure_count = 0
         self.was_fatal = False
         return
-    
+
     def clear_old_failure(self):
         if self.last_failure <= 0.0:
             return
@@ -689,7 +747,7 @@ class GuestAgentError(object):
             with open(self.path, 'w') as f:
                 json.dump(self.to_json(), f)
         return
-    
+
     def from_json(self, data):
         self.last_failure = max(
             self.last_failure,
@@ -704,8 +762,8 @@ class GuestAgentError(object):
         data = {
             u"last_failure": self.last_failure,
             u"failure_count": self.failure_count,
-            u"was_fatal" : self.was_fatal
-        }  
+            u"was_fatal": self.was_fatal
+        }
         return data
 
     def __str__(self):
diff --git a/azurelinuxagent/pa/__init__.py b/azurelinuxagent/pa/__init__.py
index 1ea2f38..2ef4c16 100644
--- a/azurelinuxagent/pa/__init__.py
+++ b/azurelinuxagent/pa/__init__.py
@@ -14,4 +14,3 @@
 #
 # Requires Python 2.4+ and Openssl 1.0+
 #
-
diff --git a/azurelinuxagent/pa/deprovision/coreos.py b/azurelinuxagent/pa/deprovision/coreos.py
index 079a913..81b302c 100644
--- a/azurelinuxagent/pa/deprovision/coreos.py
+++ b/azurelinuxagent/pa/deprovision/coreos.py
@@ -19,16 +19,18 @@
 
 import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.pa.deprovision.default import DeprovisionHandler, \
-                                                   DeprovisionAction
+    DeprovisionAction
+
 
 class CoreOSDeprovisionHandler(DeprovisionHandler):
+
     def __init__(self):
         super(CoreOSDeprovisionHandler, self).__init__()
 
     def setup(self, deluser):
-        warnings, actions = super(CoreOSDeprovisionHandler, self).setup(deluser)
+        warnings, actions = super(
+            CoreOSDeprovisionHandler, self).setup(deluser)
         warnings.append("WARNING! /etc/machine-id will be removed.")
         files_to_del = ['/etc/machine-id']
         actions.append(DeprovisionAction(fileutil.rm_files, files_to_del))
         return warnings, actions
-
diff --git a/azurelinuxagent/pa/deprovision/default.py b/azurelinuxagent/pa/deprovision/default.py
index b570c31..330aef2 100644
--- a/azurelinuxagent/pa/deprovision/default.py
+++ b/azurelinuxagent/pa/deprovision/default.py
@@ -25,7 +25,9 @@ import azurelinuxagent.common.utils.shellutil as shellutil
 from azurelinuxagent.common.osutil import get_osutil
 from azurelinuxagent.common.protocol import get_protocol_util
 
+
 class DeprovisionAction(object):
+
     def __init__(self, func, args=[], kwargs={}):
         self.func = func
         self.args = args
@@ -34,7 +36,9 @@ class DeprovisionAction(object):
     def invoke(self):
         self.func(*self.args, **self.kwargs)
 
+
 class DeprovisionHandler(object):
+
     def __init__(self):
         self.osutil = get_osutil()
         self.protocol_util = get_protocol_util()
@@ -57,10 +61,9 @@ class DeprovisionHandler(object):
         username = ovfenv.username
         warnings.append(("WARNING! {0} account and entire home directory "
                          "will be deleted.").format(username))
-        actions.append(DeprovisionAction(self.osutil.del_account, 
+        actions.append(DeprovisionAction(self.osutil.del_account,
                                          [username]))
 
-
     def regen_ssh_host_key(self, warnings, actions):
         warnings.append("WARNING! All SSH host key pairs will be deleted.")
         actions.append(DeprovisionAction(shellutil.run,
@@ -80,7 +83,10 @@ class DeprovisionHandler(object):
         actions.append(DeprovisionAction(fileutil.rm_dirs, dirs_to_del))
 
         # For Freebsd
-        actions.append(DeprovisionAction(fileutil.rm_files, ["/var/db/dhclient.leases.hn0"]))
+        actions.append(
+            DeprovisionAction(
+                fileutil.rm_files,
+                ["/var/db/dhclient.leases.hn0"]))
 
     def del_lib_dir(self, warnings, actions):
         dirs_to_del = [conf.get_lib_dir()]
@@ -88,9 +94,9 @@ class DeprovisionHandler(object):
 
     def reset_hostname(self, warnings, actions):
         localhost = ["localhost.localdomain"]
-        actions.append(DeprovisionAction(self.osutil.set_hostname, 
+        actions.append(DeprovisionAction(self.osutil.set_hostname,
                                          localhost))
-        actions.append(DeprovisionAction(self.osutil.set_dhcp_hostname, 
+        actions.append(DeprovisionAction(self.osutil.set_dhcp_hostname,
                                          localhost))
 
     def setup(self, deluser):
@@ -127,5 +133,3 @@ class DeprovisionHandler(object):
 
         for action in actions:
             action.invoke()
-
-
diff --git a/azurelinuxagent/pa/deprovision/ubuntu.py b/azurelinuxagent/pa/deprovision/ubuntu.py
index 14f90de..46b6ec8 100644
--- a/azurelinuxagent/pa/deprovision/ubuntu.py
+++ b/azurelinuxagent/pa/deprovision/ubuntu.py
@@ -21,7 +21,8 @@ import os
 import azurelinuxagent.common.logger as logger
 import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.pa.deprovision.default import DeprovisionHandler, \
-                                                   DeprovisionAction
+    DeprovisionAction
+
 
 def del_resolv():
     if os.path.realpath('/etc/resolv.conf') != '/run/resolvconf/resolv.conf':
@@ -30,18 +31,19 @@ def del_resolv():
     else:
         logger.info("resolvconf is enabled; leaving /etc/resolv.conf intact")
         fileutil.rm_files('/etc/resolvconf/resolv.conf.d/tail',
-                             '/etc/resolvconf/resolv.conf.d/originial')
+                          '/etc/resolvconf/resolv.conf.d/originial')
 
 
 class UbuntuDeprovisionHandler(DeprovisionHandler):
+
     def __init__(self):
         super(UbuntuDeprovisionHandler, self).__init__()
 
     def setup(self, deluser):
-        warnings, actions = super(UbuntuDeprovisionHandler, self).setup(deluser)
+        warnings, actions = super(
+            UbuntuDeprovisionHandler, self).setup(deluser)
         warnings.append("WARNING! Nameserver configuration in "
                         "/etc/resolvconf/resolv.conf.d/{tail,originial} "
                         "will be deleted.")
         actions.append(DeprovisionAction(del_resolv))
         return warnings, actions
-
diff --git a/azurelinuxagent/pa/provision/default.py b/azurelinuxagent/pa/provision/default.py
index b07c147..8b7b635 100644
--- a/azurelinuxagent/pa/provision/default.py
+++ b/azurelinuxagent/pa/provision/default.py
@@ -25,14 +25,15 @@ from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.conf as conf
 from azurelinuxagent.common.event import add_event, WALAEventOperation
 from azurelinuxagent.common.exception import ProvisionError, ProtocolError, \
-                                             OSUtilError
+    OSUtilError
 from azurelinuxagent.common.protocol.restapi import ProvisionStatus
 import azurelinuxagent.common.utils.shellutil as shellutil
 import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.common.osutil import get_osutil
 from azurelinuxagent.common.protocol import get_protocol_util
 
-CUSTOM_DATA_FILE="CustomData"
+CUSTOM_DATA_FILE = "CustomData"
+
 
 class ProvisionHandler(object):
 
@@ -41,10 +42,10 @@ class ProvisionHandler(object):
         self.protocol_util = get_protocol_util()
 
     def run(self):
-        #If provision is not enabled, return
+        # If provision is not enabled, return
         if not conf.get_provision_enabled():
             logger.info("Provisioning is disabled. Skip.")
-            return 
+            return
 
         provisioned = os.path.join(conf.get_lib_dir(), "provisioned")
         if os.path.isfile(provisioned):
@@ -57,11 +58,11 @@ class ProvisionHandler(object):
         except ProtocolError as e:
             self.report_event("Failed to copy ovf-env.xml: {0}".format(e))
             return
-    
+
         self.protocol_util.get_protocol_by_file()
 
         self.report_not_ready("Provisioning", "Starting")
-        
+
         try:
             logger.info("Start provisioning")
             self.provision(ovfenv)
@@ -76,18 +77,20 @@ class ProvisionHandler(object):
 
         self.report_ready(thumbprint)
         self.report_event("Provision succeed", is_success=True)
-           
+
     def reg_ssh_host_key(self):
         keypair_type = conf.get_ssh_host_keypair_type()
         if conf.get_regenerate_ssh_host_key():
             shellutil.run("rm -f /etc/ssh/ssh_host_*key*")
-            shellutil.run(("ssh-keygen -N '' -t {0} -f /etc/ssh/ssh_host_{1}_key"
-                           "").format(keypair_type, keypair_type))
+            shellutil.run(
+                ("ssh-keygen -N '' -t {0} -f /etc/ssh/ssh_host_{1}_key"
+                 "").format(keypair_type, keypair_type))
         thumbprint = self.get_ssh_host_key_thumbprint(keypair_type)
         return thumbprint
 
     def get_ssh_host_key_thumbprint(self, keypair_type):
-        cmd = "ssh-keygen -lf /etc/ssh/ssh_host_{0}_key.pub".format(keypair_type)
+        cmd = "ssh-keygen -lf /etc/ssh/ssh_host_{0}_key.pub".format(
+            keypair_type)
         ret = shellutil.run_get_output(cmd)
         if ret[0] == 0:
             return ret[1].rstrip().split()[1].replace(':', '')
@@ -107,13 +110,13 @@ class ProvisionHandler(object):
             self.config_user_account(ovfenv)
 
             self.save_customdata(ovfenv)
-            
+
             if conf.get_delete_root_password():
                 self.osutil.del_root_password()
 
         except OSUtilError as e:
             raise ProvisionError("Failed to handle ovf-env.xml: {0}".format(e))
-        
+
     def config_user_account(self, ovfenv):
         logger.info("Create user account if not exists")
         self.osutil.useradd(ovfenv.username)
@@ -123,15 +126,16 @@ class ProvisionHandler(object):
             crypt_id = conf.get_password_cryptid()
             salt_len = conf.get_password_crypt_salt_len()
             self.osutil.chpasswd(ovfenv.username, ovfenv.user_password,
-                            crypt_id=crypt_id, salt_len=salt_len)
-         
+                                 crypt_id=crypt_id, salt_len=salt_len)
+
         logger.info("Configure sudoer")
-        self.osutil.conf_sudoer(ovfenv.username, nopasswd=ovfenv.user_password is None)
+        self.osutil.conf_sudoer(
+            ovfenv.username, nopasswd=ovfenv.user_password is None)
 
         logger.info("Configure sshd")
         self.osutil.conf_sshd(ovfenv.disable_ssh_password_auth)
 
-        #Disable selinux temporary
+        # Disable selinux temporary
         sel = self.osutil.is_selinux_enforcing()
         if sel:
             self.osutil.set_selinux_enforce(0)
@@ -152,11 +156,11 @@ class ProvisionHandler(object):
         logger.info("Save custom data")
         lib_dir = conf.get_lib_dir()
         if conf.get_decode_customdata():
-            customdata= self.osutil.decode_customdata(customdata)
+            customdata = self.osutil.decode_customdata(customdata)
 
         customdata_file = os.path.join(lib_dir, CUSTOM_DATA_FILE)
         fileutil.write_file(customdata_file, customdata)
-        
+
         if conf.get_execute_customdata():
             logger.info("Execute custom data")
             os.chmod(customdata_file, 0o700)
@@ -193,4 +197,3 @@ class ProvisionHandler(object):
             protocol.report_provision_status(status)
         except ProtocolError as e:
             self.report_event(ustr(e))
-
diff --git a/azurelinuxagent/pa/provision/factory.py b/azurelinuxagent/pa/provision/factory.py
index 9bbe35c..7c2ff16 100644
--- a/azurelinuxagent/pa/provision/factory.py
+++ b/azurelinuxagent/pa/provision/factory.py
@@ -18,15 +18,15 @@
 import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.utils.textutil import Version
 from azurelinuxagent.common.version import DISTRO_NAME, DISTRO_VERSION, \
-                                     DISTRO_FULL_NAME
+    DISTRO_FULL_NAME
 from .default import ProvisionHandler
 from .ubuntu import UbuntuProvisionHandler
 
-def get_provision_handler(distro_name=DISTRO_NAME, 
-                            distro_version=DISTRO_VERSION,
-                            distro_full_name=DISTRO_FULL_NAME):
+
+def get_provision_handler(distro_name=DISTRO_NAME,
+                          distro_version=DISTRO_VERSION,
+                          distro_full_name=DISTRO_FULL_NAME):
     if distro_name == "ubuntu":
         return UbuntuProvisionHandler()
 
     return ProvisionHandler()
-
diff --git a/azurelinuxagent/pa/provision/ubuntu.py b/azurelinuxagent/pa/provision/ubuntu.py
index c334f23..d96f7dc 100644
--- a/azurelinuxagent/pa/provision/ubuntu.py
+++ b/azurelinuxagent/pa/provision/ubuntu.py
@@ -32,12 +32,15 @@ from azurelinuxagent.pa.provision.default import ProvisionHandler
 """
 On ubuntu image, provision could be disabled.
 """
+
+
 class UbuntuProvisionHandler(ProvisionHandler):
+
     def __init__(self):
         super(UbuntuProvisionHandler, self).__init__()
 
     def run(self):
-        #If provision is enabled, run default provision handler
+        # If provision is enabled, run default provision handler
         if conf.get_provision_enabled():
             super(UbuntuProvisionHandler, self).run()
             return
@@ -53,19 +56,19 @@ class UbuntuProvisionHandler(ProvisionHandler):
         protocol = self.protocol_util.get_protocol()
         self.report_not_ready("Provisioning", "Starting")
         logger.info("Sleep 15 seconds to prevent throttling")
-        time.sleep(15) #Sleep to prevent throttling
+        time.sleep(15)  # Sleep to prevent throttling
         try:
             logger.info("Wait for ssh host key to be generated.")
             thumbprint = self.wait_for_ssh_host_key()
             fileutil.write_file(provisioned, "")
             logger.info("Finished provisioning")
-           
+
         except ProvisionError as e:
             logger.error("Provision failed: {0}", e)
             self.report_not_ready("ProvisioningFailed", ustr(e))
             self.report_event(ustr(e))
             return
-            
+
         self.report_ready(thumbprint)
         self.report_event("Provision succeed", is_success=True)
 
diff --git a/azurelinuxagent/pa/rdma/centos.py b/azurelinuxagent/pa/rdma/centos.py
index c527e1b..f9dd783 100644
--- a/azurelinuxagent/pa/rdma/centos.py
+++ b/azurelinuxagent/pa/rdma/centos.py
@@ -67,7 +67,7 @@ class CentOSRDMAHandler(RDMAHandler):
             self.update_rdma_package(fw_version)
 
     def is_rdma_package_up_to_date(self, pkg, fw_version):
-        # Example match (pkg name, -, followed by 3 segments, fw_version and -):
+        # Example match(pkg name, -, followed by 3 segments, fw_version and -):
         # - pkg=microsoft-hyper-v-rdma-4.1.0.142-20160323.x86_64
         # - fw_version=142
         pattern = '{0}-\d\.\d\.\d\.({1})-'.format(
@@ -144,7 +144,8 @@ class CentOSRDMAHandler(RDMAHandler):
 
         # Install kernel mode driver (kmod-microsoft-hyper-v-rdma-*)
         kmod_pkg = self.get_file_by_pattern(
-            pkgs, "%s-\d\.\d\.\d\.+(%s)-\d{8}\.x86_64.rpm" % (self.rdma_kernel_mode_package_name, fw_version))
+            pkgs, "%s-\d\.\d\.\d\.+(%s)-\d{8}\.x86_64.rpm" %
+            (self.rdma_kernel_mode_package_name, fw_version))
         if not kmod_pkg:
             raise Exception("RDMA kernel mode package not found")
         kmod_pkg_path = os.path.join(pkg_dir, kmod_pkg)
@@ -153,7 +154,8 @@ class CentOSRDMAHandler(RDMAHandler):
 
         # Install user mode driver (microsoft-hyper-v-rdma-*)
         umod_pkg = self.get_file_by_pattern(
-            pkgs, "%s-\d\.\d\.\d\.+(%s)-\d{8}\.x86_64.rpm" % (self.rdma_user_mode_package_name, fw_version))
+            pkgs, "%s-\d\.\d\.\d\.+(%s)-\d{8}\.x86_64.rpm" %
+            (self.rdma_user_mode_package_name, fw_version))
         if not umod_pkg:
             raise Exception("RDMA user mode package not found")
         umod_pkg_path = os.path.join(pkg_dir, umod_pkg)
@@ -197,7 +199,8 @@ class CentOSRDMAHandler(RDMAHandler):
                     "RDMA: kvp package %s does not exist, skipping" % kvp_pkg)
             else:
                 logger.info('RDMA: erasing kvp package "%s"' % kvp_pkg)
-                if shellutil.run("yum erase -q -y %s" % kvp_pkg, chk_err=False) == 0:
+                if shellutil.run(
+                        "yum erase -q -y %s" % kvp_pkg, chk_err=False) == 0:
                     logger.info("RDMA: successfully erased package")
                 else:
                     logger.error("RDMA: failed to erase package")
diff --git a/azurelinuxagent/pa/rdma/factory.py b/azurelinuxagent/pa/rdma/factory.py
index 535b3d3..a73f713 100644
--- a/azurelinuxagent/pa/rdma/factory.py
+++ b/azurelinuxagent/pa/rdma/factory.py
@@ -37,5 +37,7 @@ def get_rdma_handler(
     if distro_full_name == 'CentOS Linux' or distro_full_name == 'CentOS':
         return CentOSRDMAHandler(distro_version)
 
-    logger.info("No RDMA handler exists for distro='{0}' version='{1}'", distro_full_name, distro_version)
+    logger.info(
+        "No RDMA handler exists for distro='{0}' version='{1}'",
+        distro_full_name, distro_version)
     return RDMAHandler()
diff --git a/azurelinuxagent/pa/rdma/suse.py b/azurelinuxagent/pa/rdma/suse.py
index f0d8d0f..56c5682 100644
--- a/azurelinuxagent/pa/rdma/suse.py
+++ b/azurelinuxagent/pa/rdma/suse.py
@@ -79,7 +79,7 @@ class SUSERDMAHandler(RDMAHandler):
 
         logger.info("RDMA: looking for fw version %s in packages" % fw_version)
         for entry in driver_package_versions:
-            if not fw_version in version:
+            if fw_version not in version:
                 logger.info("Package '%s' is not a match." % entry)
             else:
                 logger.info("Package '%s' is a match. Installing." % entry)
diff --git a/bin/waagent b/bin/waagent
index e65bc0c..f73fdf6 100755
--- a/bin/waagent
+++ b/bin/waagent
@@ -27,7 +27,7 @@ import os
 import imp
 import sys
 
-if __name__ == '__main__' :
+if __name__ == '__main__':
     import azurelinuxagent.agent as agent
     """
     Invoke main method of agent
@@ -46,4 +46,3 @@ if __name__ == 'waagent':
         raise ImportError("Can't load waagent")
     agent20 = imp.load_source('waagent', agent20_path)
     __all__ = dir(agent20)
-
diff --git a/makepkg.py b/makepkg.py
index ca7ad20..29601b8 100755
--- a/makepkg.py
+++ b/makepkg.py
@@ -7,7 +7,8 @@ import shutil
 import subprocess
 import sys
 
-from azurelinuxagent.common.version import AGENT_NAME, AGENT_VERSION, AGENT_LONG_VERSION
+from azurelinuxagent.common.version import AGENT_NAME, AGENT_VERSION, \
+    AGENT_LONG_VERSION
 from azurelinuxagent.ga.update import AGENT_MANIFEST_FILE
 
 
@@ -33,6 +34,7 @@ egg_path = os.path.join(bin_path, AGENT_LONG_VERSION + ".egg")
 manifest_path = os.path.join(target_path, AGENT_MANIFEST_FILE)
 pkg_name = os.path.join(output_path, AGENT_LONG_VERSION + ".zip")
 
+
 def do(*args):
     try:
         subprocess.check_output(args, stderr=subprocess.STDOUT)
@@ -58,7 +60,8 @@ args.append("--dist-dir={0}".format(bin_path))
 print "Creating egg {0}".format(egg_path)
 do(*args)
 
-egg_name = os.path.join("bin", os.path.basename(glob.glob(os.path.join(bin_path, "*"))[0]))
+egg_name = os.path.join("bin", os.path.basename(
+    glob.glob(os.path.join(bin_path, "*"))[0]))
 
 print "Writing {0}".format(manifest_path)
 with open(manifest_path, mode='w') as manifest:
diff --git a/setup.py b/setup.py
index da91778..811d8db 100755
--- a/setup.py
+++ b/setup.py
@@ -19,42 +19,52 @@
 
 import os
 from azurelinuxagent.common.version import AGENT_NAME, AGENT_VERSION, \
-                                     AGENT_DESCRIPTION, \
-                                     DISTRO_NAME, DISTRO_VERSION, DISTRO_FULL_NAME
+    AGENT_DESCRIPTION, \
+    DISTRO_NAME, DISTRO_VERSION, DISTRO_FULL_NAME
 
 from azurelinuxagent.common.osutil import get_osutil
 import setuptools
 from setuptools import find_packages
-from setuptools.command.install import install as  _install
+from setuptools.command.install import install as _install
 
 root_dir = os.path.dirname(os.path.abspath(__file__))
 os.chdir(root_dir)
 
+
 def set_files(data_files, dest=None, src=None):
     data_files.append((dest, src))
 
-def set_bin_files(data_files, dest="/usr/sbin", 
+
+def set_bin_files(data_files, dest="/usr/sbin",
                   src=["bin/waagent", "bin/waagent2.0"]):
     data_files.append((dest, src))
 
+
 def set_conf_files(data_files, dest="/etc", src=["config/waagent.conf"]):
     data_files.append((dest, src))
 
-def set_logrotate_files(data_files, dest="/etc/logrotate.d", 
+
+def set_logrotate_files(data_files, dest="/etc/logrotate.d",
                         src=["config/waagent.logrotate"]):
     data_files.append((dest, src))
 
+
 def set_sysv_files(data_files, dest="/etc/rc.d/init.d", src=["init/waagent"]):
     data_files.append((dest, src))
 
-def set_systemd_files(data_files, dest="/lib/systemd/system", 
+
+def set_systemd_files(data_files, dest="/lib/systemd/system",
                       src=["init/waagent.service"]):
     data_files.append((dest, src))
 
+
 def set_rc_files(data_files, dest="/etc/rc.d/", src=["init/freebsd/waagent"]):
     data_files.append((dest, src))
 
-def set_udev_files(data_files, dest="/etc/udev/rules.d/", src=["config/66-azure-storage.rules", "config/99-azure-product-uuid.rules"]):
+
+def set_udev_files(data_files, dest="/etc/udev/rules.d/",
+                   src=["config/66-azure-storage.rules",
+                        "config/99-azure-product-uuid.rules"]):
     data_files.append((dest, src))
 
 
@@ -62,7 +72,7 @@ def get_data_files(name, version, fullname):
     """
     Determine data_files according to distro name, version and init system type
     """
-    data_files=[]
+    data_files = []
 
     if name == 'redhat' or name == 'centos':
         set_bin_files(data_files)
@@ -72,19 +82,19 @@ def get_data_files(name, version, fullname):
         if version.startswith("6"):
             set_sysv_files(data_files)
         else:
-            #redhat7.0+ use systemd
+            # redhat7.0+ use systemd
             set_systemd_files(data_files, dest="/usr/lib/systemd/system")
             if version.startswith("7.1"):
-                #TODO this is a mitigation to systemctl bug on 7.1
+                # TODO this is a mitigation to systemctl bug on 7.1
                 set_sysv_files(data_files)
 
     elif name == 'coreos':
         set_bin_files(data_files, dest="/usr/share/oem/bin")
-        set_conf_files(data_files, dest="/usr/share/oem", 
+        set_conf_files(data_files, dest="/usr/share/oem",
                        src=["config/coreos/waagent.conf"])
         set_logrotate_files(data_files)
         set_udev_files(data_files)
-        set_files(data_files, dest="/usr/share/oem", 
+        set_files(data_files, dest="/usr/share/oem",
                   src=["init/coreos/cloud-config.yml"])
     elif name == 'ubuntu':
         set_bin_files(data_files)
@@ -92,17 +102,17 @@ def get_data_files(name, version, fullname):
         set_logrotate_files(data_files)
         set_udev_files(data_files, src=["config/99-azure-product-uuid.rules"])
         if version.startswith("12") or version.startswith("14"):
-            #Ubuntu12.04/14.04 - uses upstart
+            # Ubuntu12.04/14.04 - uses upstart
             set_files(data_files, dest="/etc/init",
                       src=["init/ubuntu/walinuxagent.conf"])
-            set_files(data_files, dest='/etc/default', 
+            set_files(data_files, dest='/etc/default',
                       src=['init/ubuntu/walinuxagent'])
         elif fullname == 'Snappy Ubuntu Core':
-            set_files(data_files, dest="<TODO>", 
+            set_files(data_files, dest="<TODO>",
                       src=["init/ubuntu/snappy/walinuxagent.yml"])
         else:
-            #Ubuntu15.04+ uses systemd
-            set_systemd_files(data_files, 
+            # Ubuntu15.04+ uses systemd
+            set_systemd_files(data_files,
                               src=["init/ubuntu/walinuxagent.service"])
     elif name == 'suse':
         set_bin_files(data_files)
@@ -112,17 +122,17 @@ def get_data_files(name, version, fullname):
         if fullname == 'SUSE Linux Enterprise Server' and \
                 version.startswith('11') or \
                 fullname == 'openSUSE' and version.startswith('13.1'):
-            set_sysv_files(data_files, dest='/etc/init.d', 
+            set_sysv_files(data_files, dest='/etc/init.d',
                            src=["init/suse/waagent"])
         else:
-            #sles 12+ and openSUSE 13.2+ use systemd
+            # sles 12+ and openSUSE 13.2+ use systemd
             set_systemd_files(data_files, dest='/usr/lib/systemd/system')
     elif name == 'freebsd':
         set_bin_files(data_files, dest="/usr/local/sbin")
         set_conf_files(data_files, src=["config/freebsd/waagent.conf"])
         set_rc_files(data_files)
     else:
-        #Use default setting
+        # Use default setting
         set_bin_files(data_files)
         set_conf_files(data_files)
         set_logrotate_files(data_files)
@@ -130,6 +140,7 @@ def get_data_files(name, version, fullname):
         set_sysv_files(data_files)
     return data_files
 
+
 class install(_install):
     user_options = _install.user_options + [
         # This will magically show up in member variable 'init_system'
@@ -143,13 +154,13 @@ class install(_install):
 
     def initialize_options(self):
         _install.initialize_options(self)
-        self.init_system=None
+        self.init_system = None
         self.lnx_distro = DISTRO_NAME
         self.lnx_distro_version = DISTRO_VERSION
         self.lnx_distro_fullname = DISTRO_FULL_NAME
         self.register_service = False
         self.skip_data_files = False
-        
+
     def finalize_options(self):
         _install.finalize_options(self)
         if self.skip_data_files:
@@ -172,14 +183,14 @@ setuptools.setup(
     name=AGENT_NAME,
     version=AGENT_VERSION,
     long_description=AGENT_DESCRIPTION,
-    author= 'Yue Zhang, Stephen Zarkos, Eric Gable',
-    author_email = 'walinuxagent@microsoft.com',
-    platforms = 'Linux',
+    author='Yue Zhang, Stephen Zarkos, Eric Gable',
+    author_email='walinuxagent@microsoft.com',
+    platforms='Linux',
     url='https://github.com/Azure/WALinuxAgent',
-    license = 'Apache License Version 2.0',
+    license='Apache License Version 2.0',
     packages=find_packages(exclude=["tests"]),
     py_modules=["__main__"],
-    cmdclass = {
+    cmdclass={
         'install': install
     }
 )
diff --git a/tests/common/dhcp/test_dhcp.py b/tests/common/dhcp/test_dhcp.py
index c27ffe8..e45a692 100644
--- a/tests/common/dhcp/test_dhcp.py
+++ b/tests/common/dhcp/test_dhcp.py
@@ -22,6 +22,7 @@ from tests.tools import *
 
 
 class TestDHCP(AgentTestCase):
+
     def test_wireserver_route_exists(self):
         # setup
         dhcp_handler = dhcp.get_dhcp_handler()
diff --git a/tests/common/osutil/test_default.py b/tests/common/osutil/test_default.py
index d9d00f6..e6170ae 100644
--- a/tests/common/osutil/test_default.py
+++ b/tests/common/osutil/test_default.py
@@ -25,6 +25,7 @@ from tests.tools import *
 
 
 class TestOSUtil(AgentTestCase):
+
     def test_restart(self):
         # setup
         retries = 3
@@ -33,11 +34,15 @@ class TestOSUtil(AgentTestCase):
             run_patch.return_value = 1
 
             # execute
-            osutil.DefaultOSUtil.restart_if(osutil.DefaultOSUtil(), ifname=ifname, retries=retries, wait=0)
+            osutil.DefaultOSUtil.restart_if(
+                osutil.DefaultOSUtil(),
+                ifname=ifname, retries=retries, wait=0)
 
             # assert
             self.assertEqual(run_patch.call_count, retries)
-            self.assertEqual(run_patch.call_args_list[0][0][0], 'ifdown {0} && ifup {0}'.format(ifname))
+            self.assertEqual(
+                run_patch.call_args_list[0][0][0],
+                'ifdown {0} && ifup {0}'.format(ifname))
 
     def test_get_first_if(self):
         ifname, ipaddr = osutil.DefaultOSUtil().get_first_if()
@@ -62,7 +67,8 @@ class TestOSUtil(AgentTestCase):
         mo = mock.mock_open(read_data=routing_table)
         with patch(open_patch(), mo):
             self.assertFalse(osutil.DefaultOSUtil().is_primary_interface('lo'))
-            self.assertTrue(osutil.DefaultOSUtil().is_primary_interface('eth0'))
+            self.assertTrue(
+                osutil.DefaultOSUtil().is_primary_interface('eth0'))
 
     def test_multiple_default_routes(self):
         routing_table = "\
@@ -72,7 +78,8 @@ class TestOSUtil(AgentTestCase):
 
         mo = mock.mock_open(read_data=routing_table)
         with patch(open_patch(), mo):
-            self.assertTrue(osutil.DefaultOSUtil().is_primary_interface('low1'))
+            self.assertTrue(
+                osutil.DefaultOSUtil().is_primary_interface('low1'))
 
     def test_multiple_interfaces(self):
         routing_table = "\
@@ -82,7 +89,8 @@ class TestOSUtil(AgentTestCase):
 
         mo = mock.mock_open(read_data=routing_table)
         with patch(open_patch(), mo):
-            self.assertTrue(osutil.DefaultOSUtil().is_primary_interface('first'))
+            self.assertTrue(
+                osutil.DefaultOSUtil().is_primary_interface('first'))
 
     def test_interface_flags(self):
         routing_table = "\
@@ -92,7 +100,8 @@ class TestOSUtil(AgentTestCase):
 
         mo = mock.mock_open(read_data=routing_table)
         with patch(open_patch(), mo):
-            self.assertTrue(osutil.DefaultOSUtil().is_primary_interface('flgs'))
+            self.assertTrue(
+                osutil.DefaultOSUtil().is_primary_interface('flgs'))
 
     def test_no_interface(self):
         routing_table = "\
@@ -102,9 +111,12 @@ class TestOSUtil(AgentTestCase):
 
         mo = mock.mock_open(read_data=routing_table)
         with patch(open_patch(), mo):
-            self.assertFalse(osutil.DefaultOSUtil().is_primary_interface('ndst'))
-            self.assertFalse(osutil.DefaultOSUtil().is_primary_interface('nflg'))
-            self.assertFalse(osutil.DefaultOSUtil().is_primary_interface('invalid'))
+            self.assertFalse(
+                osutil.DefaultOSUtil().is_primary_interface('ndst'))
+            self.assertFalse(
+                osutil.DefaultOSUtil().is_primary_interface('nflg'))
+            self.assertFalse(osutil.DefaultOSUtil(
+            ).is_primary_interface('invalid'))
 
     def test_no_primary_does_not_throw(self):
         with patch.object(osutil.DefaultOSUtil, 'get_primary_interface') \
@@ -118,27 +130,41 @@ class TestOSUtil(AgentTestCase):
             self.assertFalse(exception)
 
     def test_dhcp_lease_default(self):
-        self.assertTrue(osutil.DefaultOSUtil().get_dhcp_lease_endpoint() is None)
+        self.assertTrue(osutil.DefaultOSUtil(
+        ).get_dhcp_lease_endpoint() is None)
 
     def test_dhcp_lease_ubuntu(self):
-        with patch.object(glob, "glob", return_value=['/var/lib/dhcp/dhclient.eth0.leases']):
-            with patch(open_patch(), mock.mock_open(read_data=load_data("dhcp.leases"))):
-                endpoint = get_osutil(distro_name='ubuntu', distro_version='12.04').get_dhcp_lease_endpoint()
+        with patch.object(glob, "glob",
+                          return_value=['/var/lib/dhcp/dhclient.eth0.leases']):
+            with patch(open_patch(),
+                       mock.mock_open(read_data=load_data("dhcp.leases"))):
+                endpoint = get_osutil(
+                    distro_name='ubuntu',
+                    distro_version='12.04').get_dhcp_lease_endpoint()
                 self.assertTrue(endpoint is not None)
                 self.assertEqual(endpoint, "168.63.129.16")
 
-                endpoint = get_osutil(distro_name='ubuntu', distro_version='12.04').get_dhcp_lease_endpoint()
+                endpoint = get_osutil(
+                    distro_name='ubuntu',
+                    distro_version='12.04').get_dhcp_lease_endpoint()
                 self.assertTrue(endpoint is not None)
                 self.assertEqual(endpoint, "168.63.129.16")
 
-                endpoint = get_osutil(distro_name='ubuntu', distro_version='14.04').get_dhcp_lease_endpoint()
+                endpoint = get_osutil(
+                    distro_name='ubuntu',
+                    distro_version='14.04').get_dhcp_lease_endpoint()
                 self.assertTrue(endpoint is not None)
                 self.assertEqual(endpoint, "168.63.129.16")
 
     def test_dhcp_lease_multi(self):
-        with patch.object(glob, "glob", return_value=['/var/lib/dhcp/dhclient.eth0.leases']):
-            with patch(open_patch(), mock.mock_open(read_data=load_data("dhcp.leases.multi"))):
-                endpoint = get_osutil(distro_name='ubuntu', distro_version='12.04').get_dhcp_lease_endpoint()
+        with patch.object(glob, "glob",
+                          return_value=['/var/lib/dhcp/dhclient.eth0.leases']):
+            with patch(open_patch(),
+                       mock.mock_open(
+                           read_data=load_data("dhcp.leases.multi"))):
+                endpoint = get_osutil(
+                    distro_name='ubuntu',
+                    distro_version='12.04').get_dhcp_lease_endpoint()
                 self.assertTrue(endpoint is not None)
                 self.assertEqual(endpoint, "second")
 
diff --git a/tests/common/test_version.py b/tests/common/test_version.py
index 6a4dc38..f36e04f 100644
--- a/tests/common/test_version.py
+++ b/tests/common/test_version.py
@@ -40,6 +40,7 @@ from azurelinuxagent.common.version import *
 
 
 class TestCurrentAgentName(AgentTestCase):
+
     def setUp(self):
         AgentTestCase.setUp(self)
         return
diff --git a/tests/daemon/test_daemon.py b/tests/daemon/test_daemon.py
index 263af49..4218fd8 100644
--- a/tests/daemon/test_daemon.py
+++ b/tests/daemon/test_daemon.py
@@ -19,28 +19,32 @@ from tests.tools import *
 from azurelinuxagent.common.exception import *
 from azurelinuxagent.daemon import *
 
+
 class MockDaemonCall(object):
+
     def __init__(self, daemon_handler, count):
         self.daemon_handler = daemon_handler
         self.count = count
 
     def __call__(self, *args, **kw):
         self.count = self.count - 1
-        #Stop daemon after restarting for n times
+        # Stop daemon after restarting for n times
         if self.count <= 0:
             self.daemon_handler.running = False
         raise Exception("Mock unhandled exception")
 
+
 @patch("time.sleep")
 class TestDaemon(AgentTestCase):
+
     def test_daemon_restart(self, mock_sleep):
-        #Mock daemon function
+        # Mock daemon function
         daemon_handler = get_daemon_handler()
         mock_daemon = Mock(side_effect=MockDaemonCall(daemon_handler, 2))
         daemon_handler.daemon = mock_daemon
 
         daemon_handler.check_pid = Mock()
- 
+
         daemon_handler.run()
 
         mock_sleep.assert_any_call(15)
@@ -59,7 +63,6 @@ class TestDaemon(AgentTestCase):
 
         daemon_handler.check_pid()
         mock_exit.assert_any_call(0)
-   
+
 if __name__ == '__main__':
     unittest.main()
-
diff --git a/tests/distro/test_resourceDisk.py b/tests/distro/test_resourceDisk.py
index 198fd49..13dc9a9 100644
--- a/tests/distro/test_resourceDisk.py
+++ b/tests/distro/test_resourceDisk.py
@@ -21,7 +21,9 @@
 from tests.tools import *
 from azurelinuxagent.daemon.resourcedisk import get_resourcedisk_handler
 
+
 class TestResourceDisk(AgentTestCase):
+
     def test_mkfile(self):
         # setup
         test_file = os.path.join(self.tmp_dir, 'test_file')
diff --git a/tests/distro/test_scvmm.py b/tests/distro/test_scvmm.py
index 2437170..23088a5 100644
--- a/tests/distro/test_scvmm.py
+++ b/tests/distro/test_scvmm.py
@@ -25,7 +25,9 @@ import azurelinuxagent.daemon.scvmm as scvmm
 from azurelinuxagent.daemon.main import *
 from azurelinuxagent.common.osutil.default import DefaultOSUtil
 
+
 class TestSCVMM(AgentTestCase):
+
     def test_scvmm_detection_with_file(self):
         # setup
         conf.get_dvd_mount_point = Mock(return_value=self.tmp_dir)
@@ -48,7 +50,6 @@ class TestSCVMM(AgentTestCase):
                     # cleanup
                     os.remove(scvmm_file)
 
-
     def test_scvmm_detection_with_multiple_cdroms(self):
         # setup
         conf.get_dvd_mount_point = Mock(return_value=self.tmp_dir)
@@ -60,10 +61,12 @@ class TestSCVMM(AgentTestCase):
                 scvmm.ScvmmHandler().detect_scvmm_env()
                 # assert
                 assert patch_mount.call_count == 3
-                assert patch_mount.call_args_list[0][1]['dvd_device'] == '/dev/sr0'
-                assert patch_mount.call_args_list[1][1]['dvd_device'] == '/dev/sr1'
-                assert patch_mount.call_args_list[2][1]['dvd_device'] == '/dev/sr2'
-
+                assert patch_mount.call_args_list[
+                    0][1]['dvd_device'] == '/dev/sr0'
+                assert patch_mount.call_args_list[
+                    1][1]['dvd_device'] == '/dev/sr1'
+                assert patch_mount.call_args_list[
+                    2][1]['dvd_device'] == '/dev/sr2'
 
     def test_scvmm_detection_without_file(self):
         # setup
@@ -73,7 +76,8 @@ class TestSCVMM(AgentTestCase):
         if os.path.exists(scvmm_file):
             os.remove(scvmm_file)
 
-        with mock.patch.object(scvmm.ScvmmHandler, 'start_scvmm_agent') as patch_start:
+        with mock.patch.object(scvmm.ScvmmHandler,
+                               'start_scvmm_agent') as patch_start:
             # execute
             scvmm.ScvmmHandler().detect_scvmm_env()
             # assert
diff --git a/tests/ga/test_extension.py b/tests/ga/test_extension.py
index 71c219c..d3695d1 100644
--- a/tests/ga/test_extension.py
+++ b/tests/ga/test_extension.py
@@ -21,11 +21,12 @@ from azurelinuxagent.common.protocol import get_protocol_util
 from azurelinuxagent.ga.exthandlers import *
 from azurelinuxagent.common.protocol.wire import WireProtocol
 
+
 @patch("azurelinuxagent.common.protocol.wire.CryptUtil")
 @patch("azurelinuxagent.common.utils.restutil.http_get")
 class TestExtension(AgentTestCase):
 
-    def _assert_handler_status(self, report_vm_status, expected_status, 
+    def _assert_handler_status(self, report_vm_status, expected_status,
                                expected_ext_count, version):
         self.assertTrue(report_vm_status.called)
         args, kw = report_vm_status.call_args
@@ -33,12 +34,12 @@ class TestExtension(AgentTestCase):
         self.assertNotEquals(0, len(vm_status.vmAgent.extensionHandlers))
         handler_status = vm_status.vmAgent.extensionHandlers[0]
         self.assertEquals(expected_status, handler_status.status)
-        self.assertEquals("OSTCExtensions.ExampleHandlerLinux", 
+        self.assertEquals("OSTCExtensions.ExampleHandlerLinux",
                           handler_status.name)
         self.assertEquals(version, handler_status.version)
         self.assertEquals(expected_ext_count, len(handler_status.extensions))
         return
-    
+
     def _assert_no_handler_status(self, report_vm_status):
         self.assertTrue(report_vm_status.called)
         args, kw = report_vm_status.call_args
@@ -50,7 +51,7 @@ class TestExtension(AgentTestCase):
         """Test enable/disable/uninstall of an extension"""
         handler = get_exthandlers_handler()
 
-        #Mock protocol to return test data
+        # Mock protocol to return test data
         mock_http_get.side_effect = test_data.mock_http_get
         MockCryptUtil.side_effect = test_data.mock_crypt_util
 
@@ -61,55 +62,60 @@ class TestExtension(AgentTestCase):
 
         handler.protocol_util.get_protocol = Mock(return_value=protocol)
         return handler, protocol
-        
+
     def test_ext_handler(self, *args):
         test_data = WireProtocolData(DATA_FILE)
         exthandlers_handler, protocol = self._create_mock(test_data, *args)
 
-        #Test enable scenario. 
+        # Test enable scenario.
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 1, "1.0.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 1, "1.0.0")
         self._assert_ext_status(protocol.report_ext_status, "success", 0)
 
-        #Test goal state not changed
+        # Test goal state not changed
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 1, "1.0.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 1, "1.0.0")
 
-        #Test goal state changed
+        # Test goal state changed
         test_data.goal_state = test_data.goal_state.replace("<Incarnation>1<",
                                                             "<Incarnation>2<")
-        test_data.ext_conf = test_data.ext_conf.replace("seqNo=\"0\"", 
+        test_data.ext_conf = test_data.ext_conf.replace("seqNo=\"0\"",
                                                         "seqNo=\"1\"")
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 1, "1.0.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 1, "1.0.0")
         self._assert_ext_status(protocol.report_ext_status, "success", 1)
-        
-        #Test upgrade
+
+        # Test upgrade
         test_data.goal_state = test_data.goal_state.replace("<Incarnation>2<",
                                                             "<Incarnation>3<")
         test_data.ext_conf = test_data.ext_conf.replace("1.0.0", "1.1.0")
-        test_data.ext_conf = test_data.ext_conf.replace("seqNo=\"1\"", 
+        test_data.ext_conf = test_data.ext_conf.replace("seqNo=\"1\"",
                                                         "seqNo=\"2\"")
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 1, "1.1.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 1, "1.1.0")
         self._assert_ext_status(protocol.report_ext_status, "success", 2)
 
-        #Test disable
+        # Test disable
         test_data.goal_state = test_data.goal_state.replace("<Incarnation>3<",
                                                             "<Incarnation>4<")
         test_data.ext_conf = test_data.ext_conf.replace("enabled", "disabled")
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "NotReady", 
+        self._assert_handler_status(protocol.report_vm_status, "NotReady",
                                     1, "1.1.0")
 
-        #Test uninstall
+        # Test uninstall
         test_data.goal_state = test_data.goal_state.replace("<Incarnation>4<",
                                                             "<Incarnation>5<")
-        test_data.ext_conf = test_data.ext_conf.replace("disabled", "uninstall")
+        test_data.ext_conf = test_data.ext_conf.replace(
+            "disabled", "uninstall")
         exthandlers_handler.run()
         self._assert_no_handler_status(protocol.report_vm_status)
 
-        #Test uninstall again!
+        # Test uninstall again!
         test_data.goal_state = test_data.goal_state.replace("<Incarnation>5<",
                                                             "<Incarnation>6<")
         exthandlers_handler.run()
@@ -120,23 +126,25 @@ class TestExtension(AgentTestCase):
         exthandlers_handler, protocol = self._create_mock(test_data, *args)
 
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 0, "1.0.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 0, "1.0.0")
 
     def test_ext_handler_no_public_settings(self, *args):
         test_data = WireProtocolData(DATA_FILE_EXT_NO_PUBLIC)
         exthandlers_handler, protocol = self._create_mock(test_data, *args)
 
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 1, "1.0.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 1, "1.0.0")
 
     def test_ext_handler_no_ext(self, *args):
         test_data = WireProtocolData(DATA_FILE_NO_EXT)
         exthandlers_handler, protocol = self._create_mock(test_data, *args)
 
-        #Assert no extension handler status
+        # Assert no extension handler status
         exthandlers_handler.run()
         self._assert_no_handler_status(protocol.report_vm_status)
-    
+
     @patch('azurelinuxagent.ga.exthandlers.add_event')
     def test_ext_handler_download_failure(self, mock_add_event, *args):
         test_data = WireProtocolData(DATA_FILE)
@@ -153,11 +161,11 @@ class TestExtension(AgentTestCase):
     def test_ext_handler_io_error(self, mock_fileutil, *args):
         test_data = WireProtocolData(DATA_FILE)
         exthandlers_handler, protocol = self._create_mock(test_data, *args)
-    
+
         mock_fileutil.write_file.return_value = IOError("Mock IO Error")
         exthandlers_handler.run()
 
-    def _assert_ext_status(self, report_ext_status, expected_status, 
+    def _assert_ext_status(self, report_ext_status, expected_status,
                            expected_seq_no):
         self.assertTrue(report_ext_status.called)
         args, kw = report_ext_status.call_args
@@ -169,20 +177,23 @@ class TestExtension(AgentTestCase):
         test_data = WireProtocolData(DATA_FILE)
         exthandlers_handler, protocol = self._create_mock(test_data, *args)
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 1, "1.0.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 1, "1.0.0")
 
-        #Remove status file and re-run collecting extension status
-        status_file = os.path.join(self.tmp_dir, 
+        # Remove status file and re-run collecting extension status
+        status_file = os.path.join(self.tmp_dir,
                                    "OSTCExtensions.ExampleHandlerLinux-1.0.0",
                                    "status", "0.status")
         self.assertTrue(os.path.isfile(status_file))
         os.remove(status_file)
 
         exthandlers_handler.run()
-        self._assert_handler_status(protocol.report_vm_status, "Ready", 1, "1.0.0")
+        self._assert_handler_status(
+            protocol.report_vm_status, "Ready", 1, "1.0.0")
         self._assert_ext_status(protocol.report_ext_status, "error", 0)
 
-    def test_ext_handler_version_decide_autoupgrade_internalversion(self, *args):
+    def test_ext_handler_version_decide_autoupgrade_internalversion(
+            self, *args):
         for internal in [False, True]:
             for autoupgrade in [False, True]:
                 if internal:
@@ -201,49 +212,63 @@ class TestExtension(AgentTestCase):
                         datafile = DATA_FILE
                         decision_version = '1.0.0'
 
-                _, protocol = self._create_mock(WireProtocolData(datafile), *args)
+                _, protocol = self._create_mock(
+                    WireProtocolData(datafile), *args)
                 ext_handlers, _ = protocol.get_ext_handlers()
                 self.assertEqual(1, len(ext_handlers.extHandlers))
                 ext_handler = ext_handlers.extHandlers[0]
-                self.assertEqual('OSTCExtensions.ExampleHandlerLinux', ext_handler.name)
-                self.assertEqual(config_version, ext_handler.properties.version, "config version.")
+                self.assertEqual(
+                    'OSTCExtensions.ExampleHandlerLinux', ext_handler.name)
+                self.assertEqual(
+                    config_version, ext_handler.properties.version,
+                    "config version.")
                 ExtHandlerInstance(ext_handler, protocol).decide_version()
-                self.assertEqual(decision_version, ext_handler.properties.version, "decision version.")
+                self.assertEqual(
+                    decision_version, ext_handler.properties.version,
+                    "decision version.")
 
     def test_ext_handler_version_decide_between_minor_versions(self, *args):
         """
         Using v2.x~v4.x for unit testing
         Available versions via manifest XML (I stands for internal):
-        2.0.0, 2.1.0, 2.1.1, 2.2.0, 2.3.0(I), 2.4.0(I), 3.0, 3.1, 4.0.0.0, 4.0.0.1, 4.1.0.0
+        2.0.0, 2.1.0, 2.1.1, 2.2.0, 2.3.0(I), 2.4.0(I),
+        3.0, 3.1, 4.0.0.0, 4.0.0.1, 4.1.0.0
         See tests/data/wire/manifest.xml for possible versions
         """
 
-        # (installed_version, config_version, exptected_version, autoupgrade_expected_version)
+        # (installed_version, config_version, exptected_version,
+        #     autoupgrade_expected_version)
         cases = [
-            (None,  '2.0',     '2.0.0',    '2.2.0'),
-            (None,  '2.0.0',   '2.0.0',    '2.2.0'),
-            ('1.0', '1.0.0',   '1.0.0',    '1.1.0'),
-            (None,  '2.1.0',   '2.1.1',    '2.2.0'),
-            (None,  '2.2.0',   '2.2.0',    '2.2.0'),
-            (None,  '2.3.0',   '2.3.0',    '2.3.0'),
-            (None,  '2.4.0',   '2.4.0',    '2.4.0'),
-            (None,  '3.0',     '3.0',      '3.1'),
-            (None,  '4.0',     '4.0.0.1',  '4.1.0.0'),
+            (None, '2.0', '2.0.0', '2.2.0'),
+            (None, '2.0.0', '2.0.0', '2.2.0'),
+            ('1.0', '1.0.0', '1.0.0', '1.1.0'),
+            (None, '2.1.0', '2.1.1', '2.2.0'),
+            (None, '2.2.0', '2.2.0', '2.2.0'),
+            (None, '2.3.0', '2.3.0', '2.3.0'),
+            (None, '2.4.0', '2.4.0', '2.4.0'),
+            (None, '3.0', '3.0', '3.1'),
+            (None, '4.0', '4.0.0.1', '4.1.0.0'),
         ]
 
         _, protocol = self._create_mock(WireProtocolData(DATA_FILE), *args)
         version_uri = Mock()
-        version_uri.uri = 'http://some/Microsoft.OSTCExtensions_ExampleHandlerLinux_asiaeast_manifest.xml'
-
-        for (installed_version, config_version, expected_version, autoupgrade_expected_version) in cases:
+        version_uri.uri = 'http://some/Microsoft.OSTCExtensions_Example' + \
+            'HandlerLinux_asiaeast_manifest.xml'
+
+        for (
+                installed_version,
+                config_version,
+                expected_version,
+                autoupgrade_expected_version) in cases:
             ext_handler = Mock()
             ext_handler.properties = Mock()
             ext_handler.name = 'OSTCExtensions.ExampleHandlerLinux'
             ext_handler.versionUris = [version_uri]
             ext_handler.properties.version = config_version
-            
+
             ext_handler_instance = ExtHandlerInstance(ext_handler, protocol)
-            ext_handler_instance.get_installed_version = Mock(return_value=installed_version)
+            ext_handler_instance.get_installed_version = Mock(
+                return_value=installed_version)
 
             ext_handler_instance.decide_version()
             self.assertEqual(expected_version, ext_handler.properties.version)
@@ -252,12 +277,13 @@ class TestExtension(AgentTestCase):
             ext_handler.properties.upgradePolicy = 'auto'
 
             ext_handler_instance = ExtHandlerInstance(ext_handler, protocol)
-            ext_handler_instance.get_installed_version = Mock(return_value=installed_version)
+            ext_handler_instance.get_installed_version = Mock(
+                return_value=installed_version)
 
             ext_handler_instance.decide_version()
-            self.assertEqual(autoupgrade_expected_version, ext_handler.properties.version)
+            self.assertEqual(autoupgrade_expected_version,
+                             ext_handler.properties.version)
 
 
 if __name__ == '__main__':
     unittest.main()
-
diff --git a/tests/ga/test_monitor.py b/tests/ga/test_monitor.py
index 838d037..d6e3247 100644
--- a/tests/ga/test_monitor.py
+++ b/tests/ga/test_monitor.py
@@ -19,11 +19,12 @@ from tests.tools import *
 from azurelinuxagent.common.exception import *
 from azurelinuxagent.ga.monitor import *
 
+
 class TestMonitor(AgentTestCase):
+
     def test_parse_xml_event(self):
         data_str = load_data('ext/event.xml')
         event = parse_xml_event(data_str)
         self.assertNotEquals(None, event)
         self.assertNotEquals(0, event.parameters)
         self.assertNotEquals(None, event.parameters[0])
-
diff --git a/tests/ga/test_update.py b/tests/ga/test_update.py
index 74804fb..fde9a2b 100644
--- a/tests/ga/test_update.py
+++ b/tests/ga/test_update.py
@@ -42,15 +42,15 @@ from azurelinuxagent.common.version import AGENT_NAME, AGENT_VERSION
 from azurelinuxagent.ga.update import *
 
 NO_ERROR = {
-    "last_failure" : 0.0,
-    "failure_count" : 0,
-    "was_fatal" : False
+    "last_failure": 0.0,
+    "failure_count": 0,
+    "was_fatal": False
 }
 
 WITH_ERROR = {
-    "last_failure" : 42.42,
-    "failure_count" : 2,
-    "was_fatal" : False
+    "last_failure": 42.42,
+    "failure_count": 2,
+    "was_fatal": False
 }
 
 EMPTY_MANIFEST = {
@@ -105,6 +105,7 @@ def faux_logger():
 
 
 class UpdateTestCase(AgentTestCase):
+
     def setUp(self):
         AgentTestCase.setUp(self)
         return
@@ -119,18 +120,20 @@ class UpdateTestCase(AgentTestCase):
         return get_agents(in_dir=self.tmp_dir)
 
     def agent_dir(self, version):
-        return os.path.join(self.tmp_dir, "{0}-{1}".format(AGENT_NAME, version))
+        return os.path.join(
+            self.tmp_dir, "{0}-{1}".format(AGENT_NAME, version))
 
     def agent_paths(self):
-        paths = glob.glob(os.path.join(self.tmp_dir, "*"))
-        paths.sort()
+        paths = sorted(glob.glob(os.path.join(self.tmp_dir, "*")))
         return paths
 
     def agent_pkgs(self):
         return get_agent_pkgs(in_dir=self.tmp_dir)
 
     def agent_versions(self):
-        v = [FlexibleVersion(AGENT_DIR_PATTERN.match(a).group(1)) for a in self.agent_dirs()]
+        v = [
+            FlexibleVersion(AGENT_DIR_PATTERN.match(a).group(1))
+            for a in self.agent_dirs()]
         v.sort(reverse=True)
         return v
 
@@ -158,7 +161,8 @@ class UpdateTestCase(AgentTestCase):
                 fileutil.trim_ext(agent, "zip")))
         return
 
-    def prepare_agents(self, base_version=AGENT_VERSION, count=5, is_available=True):
+    def prepare_agents(
+            self, base_version=AGENT_VERSION, count=5, is_available=True):
         base_v = FlexibleVersion(base_version)
 
         # Ensure the test data is copied over
@@ -167,19 +171,20 @@ class UpdateTestCase(AgentTestCase):
             self.copy_agents(get_agent_pkgs()[0])
             self.expand_agents()
             count -= 1
-        
+
         # Determine the most recent agent version
         versions = self.agent_versions()
         src_v = FlexibleVersion(str(versions[0]))
 
-        # If the most recent agent is newer the minimum requested, use the agent version
+        # If the most recent agent is newer the minimum requested, use the
+        # agent version
         if base_v < src_v:
             base_v = src_v
 
         # Create agent packages and directories
         return self.replicate_agents(
             src_v=src_v,
-            count=count-agent_count,
+            count=count - agent_count,
             is_available=is_available)
 
     def remove_agents(self):
@@ -194,14 +199,14 @@ class UpdateTestCase(AgentTestCase):
         return
 
     def replicate_agents(
-        self,
-        count=5,
-        src_v=AGENT_VERSION,
-        is_available=True,
-        increment=1):
+            self,
+            count=5,
+            src_v=AGENT_VERSION,
+            is_available=True,
+            increment=1):
         from_path = self.agent_dir(src_v)
         dst_v = FlexibleVersion(str(src_v))
-        for i in range(0,count):
+        for i in range(0, count):
             dst_v += increment
             to_path = self.agent_dir(dst_v)
             shutil.copyfile(from_path + ".zip", to_path + ".zip")
@@ -211,11 +216,12 @@ class UpdateTestCase(AgentTestCase):
                 os.path.join(to_path, self.agent_bin(dst_v)))
             if not is_available:
                 GuestAgent(to_path).mark_failure(is_fatal=True)
-        
+
         return dst_v
 
 
 class TestGuestAgentError(UpdateTestCase):
+
     def test_creation(self):
         self.assertRaises(TypeError, GuestAgentError)
         self.assertRaises(UpdateError, GuestAgentError, None)
@@ -271,11 +277,11 @@ class TestGuestAgentError(UpdateTestCase):
 
         for i in range(0, MAX_FAILURE):
             err.mark_failure()
-        
+
         # Agent failed >= MAX_FAILURE, it should be blacklisted
         self.assertTrue(err.is_blacklisted)
         self.assertEqual(MAX_FAILURE, err.failure_count)
-        
+
         # Clear old failure does not clear recent failure
         err.clear_old_failure()
         self.assertTrue(err.is_blacklisted)
@@ -315,6 +321,7 @@ class TestGuestAgentError(UpdateTestCase):
 
 
 class TestGuestAgent(UpdateTestCase):
+
     def setUp(self):
         UpdateTestCase.setUp(self)
         self.copy_agents(get_agent_file_path())
@@ -344,11 +351,13 @@ class TestGuestAgent(UpdateTestCase):
             os.path.join(self.agent_path, AGENT_ERROR_FILE),
             agent.get_agent_error_file())
 
-        path = ".".join((os.path.join(conf.get_lib_dir(), get_agent_name()), "zip"))
+        path = ".".join(
+            (os.path.join(conf.get_lib_dir(), get_agent_name()), "zip"))
         self.assertEqual(path, agent.get_agent_pkg_path())
 
         self.assertTrue(agent.is_downloaded)
-        # Note: Agent will get blacklisted since the package for this test is invalid
+        # Note: Agent will get blacklisted since the package for this test is
+        # invalid
         self.assertTrue(agent.is_blacklisted)
         self.assertFalse(agent.is_available)
         return
@@ -377,7 +386,7 @@ class TestGuestAgent(UpdateTestCase):
         self.assertFalse(agent.is_available)
         agent._unpack()
         self.assertTrue(agent.is_available)
-        
+
         agent.mark_failure(is_fatal=True)
         self.assertFalse(agent.is_available)
         return
@@ -390,7 +399,7 @@ class TestGuestAgent(UpdateTestCase):
         agent._unpack()
         self.assertFalse(agent.is_blacklisted)
         self.assertEqual(agent.is_blacklisted, agent.error.is_blacklisted)
-        
+
         agent.mark_failure(is_fatal=True)
         self.assertTrue(agent.is_blacklisted)
         self.assertEqual(agent.is_blacklisted, agent.error.is_blacklisted)
@@ -437,7 +446,9 @@ class TestGuestAgent(UpdateTestCase):
         agent = GuestAgent(path=self.agent_path)
         agent._unpack()
         agent._load_manifest()
-        self.assertEqual(agent.manifest.get_enable_command(), agent.get_agent_cmd())
+        self.assertEqual(
+            agent.manifest.get_enable_command(),
+            agent.get_agent_cmd())
         return
 
     @patch("azurelinuxagent.ga.update.GuestAgent._ensure_downloaded")
@@ -488,7 +499,7 @@ class TestGuestAgent(UpdateTestCase):
         self.assertFalse(os.path.isdir(self.agent_path))
 
         agent_pkg = load_bin_data(os.path.join("ga", get_agent_file_name()))
-        mock_http_get.return_value= ResponseMock(response=agent_pkg)
+        mock_http_get.return_value = ResponseMock(response=agent_pkg)
 
         pkg = ExtHandlerPackage(version=str(get_agent_version()))
         pkg.uris.append(ExtHandlerPackageUri())
@@ -504,8 +515,9 @@ class TestGuestAgent(UpdateTestCase):
         self.remove_agents()
         self.assertFalse(os.path.isdir(self.agent_path))
 
-        mock_http_get.return_value= ResponseMock(status=restutil.httpclient.SERVICE_UNAVAILABLE)
-        
+        mock_http_get.return_value = ResponseMock(
+            status=restutil.httpclient.SERVICE_UNAVAILABLE)
+
         pkg = ExtHandlerPackage(version=str(get_agent_version()))
         pkg.uris.append(ExtHandlerPackageUri())
         agent = GuestAgent(pkg=pkg)
@@ -521,7 +533,7 @@ class TestGuestAgent(UpdateTestCase):
         self.assertFalse(os.path.isdir(self.agent_path))
 
         agent_pkg = load_bin_data(os.path.join("ga", get_agent_file_name()))
-        mock_http_get.return_value= ResponseMock(response=agent_pkg)
+        mock_http_get.return_value = ResponseMock(response=agent_pkg)
 
         pkg = ExtHandlerPackage(version=str(get_agent_version()))
         pkg.uris.append(ExtHandlerPackageUri())
@@ -531,7 +543,9 @@ class TestGuestAgent(UpdateTestCase):
         self.assertTrue(agent.is_downloaded)
         return
 
-    @patch("azurelinuxagent.ga.update.GuestAgent._download", side_effect=UpdateError)
+    @patch(
+        "azurelinuxagent.ga.update.GuestAgent._download",
+        side_effect=UpdateError)
     def test_ensure_downloaded_download_fails(self, mock_download):
         self.remove_agents()
         self.assertFalse(os.path.isdir(self.agent_path))
@@ -546,7 +560,9 @@ class TestGuestAgent(UpdateTestCase):
         return
 
     @patch("azurelinuxagent.ga.update.GuestAgent._download")
-    @patch("azurelinuxagent.ga.update.GuestAgent._unpack", side_effect=UpdateError)
+    @patch(
+        "azurelinuxagent.ga.update.GuestAgent._unpack",
+        side_effect=UpdateError)
     def test_ensure_downloaded_unpack_fails(self, mock_download, mock_unpack):
         self.assertFalse(os.path.isdir(self.agent_path))
 
@@ -561,8 +577,11 @@ class TestGuestAgent(UpdateTestCase):
 
     @patch("azurelinuxagent.ga.update.GuestAgent._download")
     @patch("azurelinuxagent.ga.update.GuestAgent._unpack")
-    @patch("azurelinuxagent.ga.update.GuestAgent._load_manifest", side_effect=UpdateError)
-    def test_ensure_downloaded_load_manifest_fails(self, mock_download, mock_unpack, mock_manifest):
+    @patch(
+        "azurelinuxagent.ga.update.GuestAgent._load_manifest",
+        side_effect=UpdateError)
+    def test_ensure_downloaded_load_manifest_fails(
+            self, mock_download, mock_unpack, mock_manifest):
         self.assertFalse(os.path.isdir(self.agent_path))
 
         pkg = ExtHandlerPackage(version=str(get_agent_version()))
@@ -577,7 +596,8 @@ class TestGuestAgent(UpdateTestCase):
     @patch("azurelinuxagent.ga.update.GuestAgent._download")
     @patch("azurelinuxagent.ga.update.GuestAgent._unpack")
     @patch("azurelinuxagent.ga.update.GuestAgent._load_manifest")
-    def test_ensure_download_skips_blacklisted(self, mock_download, mock_unpack, mock_manifest):
+    def test_ensure_download_skips_blacklisted(
+            self, mock_download, mock_unpack, mock_manifest):
         agent = GuestAgent(path=self.agent_path)
         agent.clear_error()
         agent.mark_failure(is_fatal=True)
@@ -596,6 +616,7 @@ class TestGuestAgent(UpdateTestCase):
 
 
 class TestUpdate(UpdateTestCase):
+
     def setUp(self):
         UpdateTestCase.setUp(self)
         self.update_handler = get_update_handler()
@@ -622,18 +643,20 @@ class TestUpdate(UpdateTestCase):
             base_version=FlexibleVersion(AGENT_VERSION),
             protocol=None,
             versions=None):
-        
+
         latest_version = self.prepare_agents()
         if versions is None or len(versions) <= 0:
             versions = [latest_version]
 
-        etag = self.update_handler.last_etag if self.update_handler.last_etag is not None else 42
+        etag = self.update_handler.last_etag if self.update_handler.last_etag \
+            is not None else 42
         if protocol is None:
             protocol = ProtocolMock(etag=etag, versions=versions)
         self.update_handler.protocol_util = protocol
         conf.get_autoupdate_gafamily = Mock(return_value=protocol.family)
 
-        return self.update_handler._ensure_latest_agent(base_version=base_version)
+        return self.update_handler._ensure_latest_agent(
+            base_version=base_version)
 
     def test_ensure_latest_agent_returns_true_on_first_use(self):
         self.assertEqual(None, self.update_handler.last_etag)
@@ -649,7 +672,8 @@ class TestUpdate(UpdateTestCase):
         self.replicate_agents(src_v=old_version, count=old_count, increment=-1)
         all_count = len(self.agent_versions())
 
-        self.assertTrue(self._test_ensure_latest_agent(versions=self.agent_versions()))
+        self.assertTrue(self._test_ensure_latest_agent(
+            versions=self.agent_versions()))
         self.assertEqual(all_count, len(self.update_handler.agents))
         return
 
@@ -657,9 +681,10 @@ class TestUpdate(UpdateTestCase):
         self.prepare_agents()
         agent_count = self.agent_count()
         self.assertEqual(5, agent_count)
-        
+
         agent_versions = self.agent_versions()[:3]
-        self.assertTrue(self._test_ensure_latest_agent(versions=agent_versions))
+        self.assertTrue(self._test_ensure_latest_agent(
+            versions=agent_versions))
         self.assertEqual(len(agent_versions), len(self.update_handler.agents))
         self.assertEqual(agent_versions, self.agent_versions())
         return
@@ -678,11 +703,13 @@ class TestUpdate(UpdateTestCase):
     def test_ensure_latest_agent_skips_if_when_no_new_versions(self):
         self.prepare_agents()
         base_version = self.agent_versions()[0] + 1
-        self.assertFalse(self._test_ensure_latest_agent(base_version=base_version))
+        self.assertFalse(self._test_ensure_latest_agent(
+            base_version=base_version))
         return
 
     def test_ensure_latest_agent_skips_when_no_versions(self):
-        self.assertFalse(self._test_ensure_latest_agent(protocol=ProtocolMock()))
+        self.assertFalse(self._test_ensure_latest_agent(
+            protocol=ProtocolMock()))
         return
 
     def test_ensure_latest_agent_skips_when_updates_are_disabled(self):
@@ -722,25 +749,30 @@ class TestUpdate(UpdateTestCase):
 
     def test_evaluate_agent_health_raises_exception_for_restarting_agent(self):
         self.update_handler.child_launch_time = time.time() - (4 * 60)
-        self.update_handler.child_launch_attempts = CHILD_LAUNCH_RESTART_MAX - 1
+        self.update_handler.child_launch_attempts = CHILD_LAUNCH_RESTART_MAX \
+            - 1
         self.assertRaises(Exception, self._test_evaluate_agent_health)
         return
 
-    def test_evaluate_agent_health_will_not_raise_exception_for_long_restarts(self):
+    def test_evaluate_agent_health_will_not_raise_exception_for_long_restarts(
+            self):
         self.update_handler.child_launch_time = time.time() - 24 * 60
         self.update_handler.child_launch_attempts = CHILD_LAUNCH_RESTART_MAX
         self._test_evaluate_agent_health()
         return
 
-    def test_evaluate_agent_health_will_not_raise_exception_too_few_restarts(self):
+    def test_evaluate_agent_health_will_not_raise_exception_too_few_restarts(
+            self):
         self.update_handler.child_launch_time = time.time()
-        self.update_handler.child_launch_attempts = CHILD_LAUNCH_RESTART_MAX - 2
+        self.update_handler.child_launch_attempts = CHILD_LAUNCH_RESTART_MAX \
+            - 2
         self._test_evaluate_agent_health()
         return
 
     def test_evaluate_agent_health_resets_with_new_agent(self):
         self.update_handler.child_launch_time = time.time() - (4 * 60)
-        self.update_handler.child_launch_attempts = CHILD_LAUNCH_RESTART_MAX - 1
+        self.update_handler.child_launch_attempts = CHILD_LAUNCH_RESTART_MAX \
+            - 1
         self._test_evaluate_agent_health(child_agent_index=1)
         self.assertEqual(1, self.update_handler.child_launch_attempts)
         return
@@ -748,8 +780,11 @@ class TestUpdate(UpdateTestCase):
     def test_filter_blacklisted_agents(self):
         self.prepare_agents()
 
-        self.update_handler._set_agents([GuestAgent(path=path) for path in self.agent_dirs()])
-        self.assertEqual(len(self.agent_dirs()), len(self.update_handler.agents))
+        self.update_handler._set_agents(
+            [GuestAgent(path=path) for path in self.agent_dirs()])
+        self.assertEqual(
+            len(self.agent_dirs()),
+            len(self.update_handler.agents))
 
         kept_agents = self.update_handler.agents[1::2]
         blacklisted_agents = self.update_handler.agents[::2]
@@ -763,7 +798,9 @@ class TestUpdate(UpdateTestCase):
         latest_version = self.prepare_agents()
 
         latest_agent = self.update_handler.get_latest_agent()
-        self.assertEqual(len(get_agents(self.tmp_dir)), len(self.update_handler.agents))
+        self.assertEqual(
+            len(get_agents(self.tmp_dir)),
+            len(self.update_handler.agents))
         self.assertEqual(latest_version, latest_agent.version)
         return
 
@@ -780,8 +817,10 @@ class TestUpdate(UpdateTestCase):
         self.prepare_agents()
         prior_agent = self.update_handler.get_latest_agent()
 
-        latest_version = self.prepare_agents(count=self.agent_count()+1, is_available=False)
-        latest_path = os.path.join(self.tmp_dir, "{0}-{1}".format(AGENT_NAME, latest_version))
+        latest_version = self.prepare_agents(
+            count=self.agent_count() + 1, is_available=False)
+        latest_path = os.path.join(
+            self.tmp_dir, "{0}-{1}".format(AGENT_NAME, latest_version))
         self.assertFalse(GuestAgent(latest_path).is_available)
 
         latest_agent = self.update_handler.get_latest_agent()
@@ -794,7 +833,9 @@ class TestUpdate(UpdateTestCase):
 
         self.assertTrue(0 <= len(self.update_handler.agents))
         self.update_handler._load_agents()
-        self.assertEqual(len(get_agents(self.tmp_dir)), len(self.update_handler.agents))
+        self.assertEqual(
+            len(get_agents(self.tmp_dir)),
+            len(self.update_handler.agents))
         return
 
     def test_load_agents_does_not_reload(self):
@@ -838,13 +879,15 @@ class TestUpdate(UpdateTestCase):
 
         # Ensure both directories and packages are removed
         for agent in purged_agents:
-            agent_path = os.path.join(self.tmp_dir, "{0}-{1}".format(AGENT_NAME, agent.version))
+            agent_path = os.path.join(
+                self.tmp_dir, "{0}-{1}".format(AGENT_NAME, agent.version))
             self.assertFalse(os.path.exists(agent_path))
             self.assertFalse(os.path.exists(agent_path + ".zip"))
 
         # Ensure kept agent directories and packages remain
         for agent in kept_agents:
-            agent_path = os.path.join(self.tmp_dir, "{0}-{1}".format(AGENT_NAME, agent.version))
+            agent_path = os.path.join(
+                self.tmp_dir, "{0}-{1}".format(AGENT_NAME, agent.version))
             self.assertTrue(os.path.exists(agent_path))
             self.assertTrue(os.path.exists(agent_path + ".zip"))
         return
@@ -879,7 +922,7 @@ class TestUpdate(UpdateTestCase):
 
     def test_run_latest_polls_and_waits_for_success(self):
         mock_child = ChildMock(return_value=None)
-        mock_time = TimeMock(time_increment=CHILD_HEALTH_INTERVAL/3)
+        mock_time = TimeMock(time_increment=CHILD_HEALTH_INTERVAL / 3)
         self._test_run_latest(mock_child=mock_child, mock_time=mock_time)
         self.assertEqual(2, mock_child.poll.call_count)
         self.assertEqual(1, mock_child.wait.call_count)
@@ -887,7 +930,7 @@ class TestUpdate(UpdateTestCase):
 
     def test_run_latest_polling_stops_at_success(self):
         mock_child = ChildMock(return_value=0)
-        mock_time = TimeMock(time_increment=CHILD_HEALTH_INTERVAL/3)
+        mock_time = TimeMock(time_increment=CHILD_HEALTH_INTERVAL / 3)
         self._test_run_latest(mock_child=mock_child, mock_time=mock_time)
         self.assertEqual(1, mock_child.poll.call_count)
         self.assertEqual(0, mock_child.wait.call_count)
@@ -907,7 +950,11 @@ class TestUpdate(UpdateTestCase):
 
         args, kwargs = self._test_run_latest()
 
-        self.assertEqual(args[0], [get_python_cmd(), "-u", sys.argv[0], "-run-exthandlers"])
+        self.assertEqual(
+            args[0],
+            [get_python_cmd(),
+             "-u", sys.argv[0],
+             "-run-exthandlers"])
         self.assertEqual(True, 'cwd' in kwargs)
         self.assertEqual(os.getcwd(), kwargs['cwd'])
         return
@@ -923,7 +970,9 @@ class TestUpdate(UpdateTestCase):
                     saved_stdout, sys.stdout = sys.stdout, stdout
                     saved_stderr, sys.stderr = sys.stderr, stderr
                     try:
-                        self._test_run_latest(mock_child=ChildMock(side_effect=faux_logger))
+                        self._test_run_latest(
+                            mock_child=ChildMock(
+                                side_effect=faux_logger))
                     finally:
                         sys.stdout = saved_stdout
                         sys.stderr = saved_stderr
@@ -961,7 +1010,8 @@ class TestUpdate(UpdateTestCase):
         self.assertEqual(0.0, latest_agent.error.last_failure)
         self.assertEqual(0, latest_agent.error.failure_count)
 
-        self._test_run_latest(mock_child=ChildMock(side_effect=Exception("Force blacklisting")))
+        self._test_run_latest(mock_child=ChildMock(
+            side_effect=Exception("Force blacklisting")))
 
         self.assertFalse(latest_agent.is_available)
         self.assertTrue(latest_agent.error.is_blacklisted)
@@ -982,7 +1032,9 @@ class TestUpdate(UpdateTestCase):
         self.assertEqual(0, mock_signal.call_count)
         return
 
-    def _test_run(self, invocations=1, calls=[call.run()], enable_updates=False):
+    def _test_run(
+            self, invocations=1, calls=[call.run()],
+            enable_updates=False):
         conf.get_autoupdate_enabled = Mock(return_value=enable_updates)
 
         # Note:
@@ -990,8 +1042,10 @@ class TestUpdate(UpdateTestCase):
         #   a reference. Incrementing an integer directly changes the
         #   reference. Incrementing an item of a list changes an item to
         #   which the code has a reference.
-        #   See http://stackoverflow.com/questions/26408941/python-nested-functions-and-variable-scope
+        # See
+        # http://stackoverflow.com/questions/26408941/python-nested-functions-and-variable-scope
         iterations = [0]
+
         def iterator(*args, **kwargs):
             iterations[0] += 1
             if iterations[0] >= invocations:
@@ -999,18 +1053,24 @@ class TestUpdate(UpdateTestCase):
             return
 
         calls = calls * invocations
-        
-        with patch('azurelinuxagent.ga.exthandlers.get_exthandlers_handler') as mock_handler:
-            with patch('azurelinuxagent.ga.monitor.get_monitor_handler') as mock_monitor:
-                with patch('azurelinuxagent.ga.env.get_env_handler') as mock_env:
-                    with patch('time.sleep', side_effect=iterator) as mock_sleep:
+
+        with (patch('azurelinuxagent.ga.exthandlers.get_exthandlers_handler')
+                as mock_handler):
+            with (patch('azurelinuxagent.ga.monitor.get_monitor_handler') as
+                    mock_monitor):
+                with (patch('azurelinuxagent.ga.env.get_env_handler')
+                        as mock_env):
+                    with (patch('time.sleep', side_effect=iterator) as
+                            mock_sleep):
                         with patch('sys.exit') as mock_exit:
 
                             self.update_handler.run()
 
                             self.assertEqual(1, mock_handler.call_count)
-                            self.assertEqual(mock_handler.return_value.method_calls, calls)
-                            self.assertEqual(invocations, mock_sleep.call_count)
+                            self.assertEqual(
+                                mock_handler.return_value.method_calls, calls)
+                            self.assertEqual(
+                                invocations, mock_sleep.call_count)
                             self.assertEqual(1, mock_monitor.call_count)
                             self.assertEqual(1, mock_env.call_count)
                             self.assertEqual(1, mock_exit.call_count)
@@ -1032,15 +1092,19 @@ class TestUpdate(UpdateTestCase):
     def test_set_agents_sets_agents(self):
         self.prepare_agents()
 
-        self.update_handler._set_agents([GuestAgent(path=path) for path in self.agent_dirs()])
+        self.update_handler._set_agents(
+            [GuestAgent(path=path) for path in self.agent_dirs()])
         self.assertTrue(len(self.update_handler.agents) > 0)
-        self.assertEqual(len(self.agent_dirs()), len(self.update_handler.agents))
+        self.assertEqual(
+            len(self.agent_dirs()),
+            len(self.update_handler.agents))
         return
 
     def test_set_agents_sorts_agents(self):
         self.prepare_agents()
 
-        self.update_handler._set_agents([GuestAgent(path=path) for path in self.agent_dirs()])
+        self.update_handler._set_agents(
+            [GuestAgent(path=path) for path in self.agent_dirs()])
 
         v = FlexibleVersion("100000")
         for a in self.update_handler.agents:
@@ -1050,6 +1114,7 @@ class TestUpdate(UpdateTestCase):
 
 
 class ChildMock(Mock):
+
     def __init__(self, return_value=0, side_effect=None):
         Mock.__init__(self, return_value=return_value, side_effect=side_effect)
 
@@ -1059,6 +1124,7 @@ class ChildMock(Mock):
 
 
 class ProtocolMock(object):
+
     def __init__(self, family="TestAgent", etag=42, versions=None):
         self.family = family
         self.etag = etag
@@ -1074,9 +1140,10 @@ class ProtocolMock(object):
 
         if self.family is not None:
             manifest = VMAgentManifest(family=self.family)
-            for i in range(0,10):
+            for i in range(0, 10):
                 manifest_uri = "https://nowhere.msft/agent/{0}".format(i)
-                manifest.versionsManifestUris.append(VMAgentManifestUri(uri=manifest_uri))
+                manifest.versionsManifestUris.append(
+                    VMAgentManifestUri(uri=manifest_uri))
             self.agent_manifests.vmAgentManifests.append(manifest)
         return
 
@@ -1087,7 +1154,7 @@ class ProtocolMock(object):
 
         for version in self.versions:
             package = ExtHandlerPackage(str(version))
-            for i in range(0,5):
+            for i in range(0, 5):
                 package_uri = "https://nowhere.msft/agent_pkg/{0}".format(i)
                 package.uris.append(ExtHandlerPackageUri(uri=package_uri))
             self.agent_packages.versions.append(package)
@@ -1104,6 +1171,7 @@ class ProtocolMock(object):
 
 
 class ResponseMock(Mock):
+
     def __init__(self, status=restutil.httpclient.OK, response=None):
         Mock.__init__(self)
         self.status = status
@@ -1115,6 +1183,7 @@ class ResponseMock(Mock):
 
 
 class TimeMock(Mock):
+
     def __init__(self, time_increment=1):
         Mock.__init__(self)
         self.next_time = time.time()
diff --git a/tests/pa/test_provision.py b/tests/pa/test_provision.py
index 6508017..2376fa8 100644
--- a/tests/pa/test_provision.py
+++ b/tests/pa/test_provision.py
@@ -21,27 +21,27 @@ from azurelinuxagent.common.protocol import OVF_FILE_NAME
 import azurelinuxagent.common.utils.fileutil as fileutil
 from azurelinuxagent.pa.provision import get_provision_handler
 
+
 class TestProvision(AgentTestCase):
- 
+
     @distros("redhat")
     def test_provision(self, distro_name, distro_version, distro_full_name):
-        provision_handler = get_provision_handler(distro_name, distro_version, 
+        provision_handler = get_provision_handler(distro_name, distro_version,
                                                   distro_full_name)
         mock_osutil = MagicMock()
         mock_osutil.decode_customdata = Mock(return_value="")
-        
+
         provision_handler.osutil = mock_osutil
         provision_handler.protocol_util.osutil = mock_osutil
         provision_handler.protocol_util.get_protocol_by_file = MagicMock()
         provision_handler.protocol_util.get_protocol = MagicMock()
-       
+
         conf.get_dvd_mount_point = Mock(return_value=self.tmp_dir)
         ovfenv_file = os.path.join(self.tmp_dir, OVF_FILE_NAME)
         ovfenv_data = load_data("ovf-env.xml")
         fileutil.write_file(ovfenv_file, ovfenv_data)
-         
+
         provision_handler.run()
 
 if __name__ == '__main__':
     unittest.main()
-
diff --git a/tests/protocol/mockmetadata.py b/tests/protocol/mockmetadata.py
index dce3367..cf9c807 100644
--- a/tests/protocol/mockmetadata.py
+++ b/tests/protocol/mockmetadata.py
@@ -20,22 +20,24 @@ from azurelinuxagent.common.future import httpclient
 from azurelinuxagent.common.utils.cryptutil import CryptUtil
 
 DATA_FILE = {
-        "identity": "metadata/identity.json",
-        "certificates": "metadata/certificates.json",
-        "ext_handlers": "metadata/ext_handlers.json",
-        "ext_handler_pkgs": "metadata/ext_handler_pkgs.json",
+    "identity": "metadata/identity.json",
+    "certificates": "metadata/certificates.json",
+    "ext_handlers": "metadata/ext_handlers.json",
+    "ext_handler_pkgs": "metadata/ext_handler_pkgs.json",
 }
 
 DATA_FILE_NO_EXT = DATA_FILE.copy()
 DATA_FILE_NO_EXT["ext_handlers"] = "metadata/ext_handlers_no_ext.json"
 
+
 class MetadataProtocolData(object):
+
     def __init__(self, data_files):
         self.identity = load_data(data_files.get("identity"))
         self.certificates = load_data(data_files.get("certificates"))
         self.ext_handlers = load_data(data_files.get("ext_handlers"))
         self.ext_handler_pkgs = load_data(data_files.get("ext_handler_pkgs"))
-        
+
     def mock_http_get(self, url, *args, **kwargs):
         content = None
         if url.count(u"identity?") > 0:
@@ -55,4 +57,3 @@ class MetadataProtocolData(object):
         else:
             resp.read = Mock(return_value=content.encode("utf-8"))
         return resp
-
diff --git a/tests/protocol/mockwiredata.py b/tests/protocol/mockwiredata.py
index c789de5..c5e7e15 100644
--- a/tests/protocol/mockwiredata.py
+++ b/tests/protocol/mockwiredata.py
@@ -20,17 +20,17 @@ from azurelinuxagent.common.future import httpclient
 from azurelinuxagent.common.utils.cryptutil import CryptUtil
 
 DATA_FILE = {
-        "version_info": "wire/version_info.xml",
-        "goal_state": "wire/goal_state.xml",
-        "hosting_env": "wire/hosting_env.xml",
-        "shared_config": "wire/shared_config.xml",
-        "certs": "wire/certs.xml",
-        "ext_conf": "wire/ext_conf.xml",
-        "manifest": "wire/manifest.xml",
-        "ga_manifest" : "wire/ga_manifest.xml",
-        "trans_prv": "wire/trans_prv",
-        "trans_cert": "wire/trans_cert",
-        "test_ext": "ext/sample_ext.zip"
+    "version_info": "wire/version_info.xml",
+    "goal_state": "wire/goal_state.xml",
+    "hosting_env": "wire/hosting_env.xml",
+    "shared_config": "wire/shared_config.xml",
+    "certs": "wire/certs.xml",
+    "ext_conf": "wire/ext_conf.xml",
+    "manifest": "wire/manifest.xml",
+    "ga_manifest": "wire/ga_manifest.xml",
+    "trans_prv": "wire/trans_prv",
+    "trans_cert": "wire/trans_cert",
+    "test_ext": "ext/sample_ext.zip"
 }
 
 DATA_FILE_NO_EXT = DATA_FILE.copy()
@@ -49,9 +49,12 @@ DATA_FILE_EXT_INTERNALVERSION = DATA_FILE.copy()
 DATA_FILE_EXT_INTERNALVERSION["ext_conf"] = "wire/ext_conf_internalversion.xml"
 
 DATA_FILE_EXT_AUTOUPGRADE_INTERNALVERSION = DATA_FILE.copy()
-DATA_FILE_EXT_AUTOUPGRADE_INTERNALVERSION["ext_conf"] = "wire/ext_conf_autoupgrade_internalversion.xml"
+DATA_FILE_EXT_AUTOUPGRADE_INTERNALVERSION[
+    "ext_conf"] = "wire/ext_conf_autoupgrade_internalversion.xml"
+
 
 class WireProtocolData(object):
+
     def __init__(self, data_files=DATA_FILE):
         self.version_info = load_data(data_files.get("version_info"))
         self.goal_state = load_data(data_files.get("goal_state"))
@@ -97,15 +100,15 @@ class WireProtocolData(object):
         return resp
 
     def mock_crypt_util(self, *args, **kw):
-        #Partially patch instance method of class CryptUtil
+        # Partially patch instance method of class CryptUtil
         cryptutil = CryptUtil(*args, **kw)
-        cryptutil.gen_transport_cert = Mock(side_effect=self.mock_gen_trans_cert)
+        cryptutil.gen_transport_cert = Mock(
+            side_effect=self.mock_gen_trans_cert)
         return cryptutil
-    
+
     def mock_gen_trans_cert(self, trans_prv_file, trans_cert_file):
         with open(trans_prv_file, 'w+') as prv_file:
             prv_file.write(self.trans_prv)
 
         with open(trans_cert_file, 'w+') as cert_file:
             cert_file.write(self.trans_cert)
-
diff --git a/tests/protocol/test_hostplugin.py b/tests/protocol/test_hostplugin.py
index 65c8465..d1dc10a 100644
--- a/tests/protocol/test_hostplugin.py
+++ b/tests/protocol/test_hostplugin.py
@@ -26,6 +26,7 @@ api_versions = '["2015-09-01"]'
 
 
 class TestHostPlugin(AgentTestCase):
+
     def test_fallback(self):
         with patch.object(wire.HostPluginProtocol,
                           "put_vm_status") as patch_put:
diff --git a/tests/protocol/test_metadata.py b/tests/protocol/test_metadata.py
index e2ef57a..026fce9 100644
--- a/tests/protocol/test_metadata.py
+++ b/tests/protocol/test_metadata.py
@@ -20,10 +20,12 @@ from tests.protocol.mockmetadata import *
 from azurelinuxagent.common.utils.restutil import httpclient
 from azurelinuxagent.common.protocol.metadata import MetadataProtocol
 
+
 @patch("time.sleep")
 @patch("azurelinuxagent.common.protocol.metadata.restutil")
 class TestWireProtocolGetters(AgentTestCase):
-    def _test_getters(self, test_data, mock_restutil ,_):
+
+    def _test_getters(self, test_data, mock_restutil, _):
         mock_restutil.http_get.side_effect = test_data.mock_http_get
 
         protocol = MetadataProtocol()
@@ -41,5 +43,3 @@ class TestWireProtocolGetters(AgentTestCase):
     def test_getters_no(self, *args):
         test_data = MetadataProtocolData(DATA_FILE_NO_EXT)
         self._test_getters(test_data, *args)
-
-
diff --git a/tests/protocol/test_protocol_util.py b/tests/protocol/test_protocol_util.py
index cb9a06f..ad4cd12 100644
--- a/tests/protocol/test_protocol_util.py
+++ b/tests/protocol/test_protocol_util.py
@@ -18,11 +18,12 @@
 from tests.tools import *
 from azurelinuxagent.common.exception import *
 from azurelinuxagent.common.protocol import get_protocol_util, \
-                                            TAG_FILE_NAME
+    TAG_FILE_NAME
+
 
 @patch("time.sleep")
 class TestProtocolUtil(AgentTestCase):
-    
+
     @patch("azurelinuxagent.common.protocol.util.MetadataProtocol")
     @patch("azurelinuxagent.common.protocol.util.WireProtocol")
     def test_detect_protocol(self, WireProtocol, MetadataProtocol, _):
@@ -30,22 +31,22 @@ class TestProtocolUtil(AgentTestCase):
         MetadataProtocol.return_value = MagicMock()
 
         protocol_util = get_protocol_util()
-        
+
         protocol_util.dhcp_handler = MagicMock()
         protocol_util.dhcp_handler.endpoint = "foo.bar"
 
-        #Test wire protocol is available
+        # Test wire protocol is available
         protocol = protocol_util.get_protocol()
         self.assertEquals(WireProtocol.return_value, protocol)
 
-        #Test wire protocol is not available
+        # Test wire protocol is not available
         protocol_util.clear_protocol()
         WireProtocol.return_value.detect.side_effect = ProtocolError()
 
         protocol = protocol_util.get_protocol()
         self.assertEquals(MetadataProtocol.return_value, protocol)
 
-        #Test no protocol is available
+        # Test no protocol is available
         protocol_util.clear_protocol()
         WireProtocol.return_value.detect.side_effect = ProtocolError()
 
@@ -59,12 +60,12 @@ class TestProtocolUtil(AgentTestCase):
 
         tag_file = os.path.join(self.tmp_dir, TAG_FILE_NAME)
 
-        #Test tag file doesn't exist
+        # Test tag file doesn't exist
         protocol_util.get_protocol_by_file()
         protocol_util._detect_wire_protocol.assert_any_call()
         protocol_util._detect_metadata_protocol.assert_not_called()
 
-        #Test tag file exists
+        # Test tag file exists
         protocol_util.clear_protocol()
         protocol_util._detect_wire_protocol.reset_mock()
         protocol_util._detect_metadata_protocol.reset_mock()
@@ -78,4 +79,3 @@ class TestProtocolUtil(AgentTestCase):
 
 if __name__ == '__main__':
     unittest.main()
-
diff --git a/tests/protocol/test_restapi.py b/tests/protocol/test_restapi.py
index e4b65c9..6683af2 100644
--- a/tests/protocol/test_restapi.py
+++ b/tests/protocol/test_restapi.py
@@ -23,12 +23,16 @@ import shutil
 import time
 from azurelinuxagent.common.protocol.restapi import *
 
+
 class SampleDataContract(DataContract):
+
     def __init__(self):
         self.foo = None
         self.bar = DataContractList(int)
 
+
 class TestDataContract(unittest.TestCase):
+
     def test_get_properties(self):
         obj = SampleDataContract()
         obj.foo = "foo"
@@ -40,8 +44,8 @@ class TestDataContract(unittest.TestCase):
     def test_set_properties(self):
         obj = SampleDataContract()
         data = {
-                'foo' : 1, 
-                'baz': 'a'
+            'foo': 1,
+            'baz': 'a'
         }
         set_properties('sample', obj, data)
         self.assertFalse(hasattr(obj, 'baz'))
diff --git a/tests/protocol/test_wire.py b/tests/protocol/test_wire.py
index bd3acaf..7fd36af 100644
--- a/tests/protocol/test_wire.py
+++ b/tests/protocol/test_wire.py
@@ -25,16 +25,17 @@ from azurelinuxagent.common.utils.restutil import httpclient
 from azurelinuxagent.common.utils.cryptutil import CryptUtil
 from azurelinuxagent.common.protocol.restapi import *
 from azurelinuxagent.common.protocol.wire import WireClient, WireProtocol, \
-                                          TRANSPORT_PRV_FILE_NAME, \
-                                          TRANSPORT_CERT_FILE_NAME
+    TRANSPORT_PRV_FILE_NAME, \
+    TRANSPORT_CERT_FILE_NAME
 
 data_with_bom = b'\xef\xbb\xbfhehe'
 
+
 @patch("time.sleep")
 @patch("azurelinuxagent.common.protocol.wire.CryptUtil")
 @patch("azurelinuxagent.common.protocol.wire.restutil")
 class TestWireProtocolGetters(AgentTestCase):
-    
+
     def _test_getters(self, test_data, mock_restutil, MockCryptUtil, _):
         mock_restutil.http_get.side_effect = test_data.mock_http_get
         MockCryptUtil.side_effect = test_data.mock_crypt_util
@@ -47,9 +48,9 @@ class TestWireProtocolGetters(AgentTestCase):
         for ext_handler in ext_handlers.extHandlers:
             protocol.get_ext_handler_pkgs(ext_handler)
 
-        crt1 = os.path.join(self.tmp_dir, 
-                           '33B0ABCE4673538650971C10F7D7397E71561F35.crt')
-        crt2 = os.path.join(self.tmp_dir, 
+        crt1 = os.path.join(self.tmp_dir,
+                            '33B0ABCE4673538650971C10F7D7397E71561F35.crt')
+        crt2 = os.path.join(self.tmp_dir,
                             '4037FBF5F1F3014F99B5D6C7799E9B20E6871CB3.crt')
         prv2 = os.path.join(self.tmp_dir,
                             '4037FBF5F1F3014F99B5D6C7799E9B20E6871CB3.prv')
@@ -57,7 +58,7 @@ class TestWireProtocolGetters(AgentTestCase):
         self.assertTrue(os.path.isfile(crt1))
         self.assertTrue(os.path.isfile(crt2))
         self.assertTrue(os.path.isfile(prv2))
-    
+
     def test_getters(self, *args):
         """Normal case"""
         test_data = WireProtocolData(DATA_FILE)
@@ -72,7 +73,7 @@ class TestWireProtocolGetters(AgentTestCase):
         """Extensions without any settings"""
         test_data = WireProtocolData(DATA_FILE_EXT_NO_SETTINGS)
         self._test_getters(test_data, *args)
-        
+
     def test_getters_ext_no_public(self, *args):
         """Extensions without any public settings"""
         test_data = WireProtocolData(DATA_FILE_EXT_NO_PUBLIC)
diff --git a/tests/test_import.py b/tests/test_import.py
index 39a48ab..52c332c 100644
--- a/tests/test_import.py
+++ b/tests/test_import.py
@@ -11,7 +11,9 @@ import azurelinuxagent.ga.exthandlers as exthandlers
 import azurelinuxagent.ga.monitor as monitor
 import azurelinuxagent.ga.update as update
 
+
 class TestImportHandler(AgentTestCase):
+
     def test_get_handler(self):
         osutil.get_osutil()
         protocol.get_protocol_util()
diff --git a/tests/tools.py b/tests/tools.py
index 8bf23ed..7150dc8 100644
--- a/tests/tools.py
+++ b/tests/tools.py
@@ -34,7 +34,7 @@ import azurelinuxagent.common.event as event
 import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.version import PY_VERSION_MAJOR
 
-#Import mock module for Python2 and Python3
+# Import mock module for Python2 and Python3
 try:
     from unittest.mock import Mock, patch, MagicMock, DEFAULT, call
 except ImportError:
@@ -47,12 +47,14 @@ debug = False
 if os.environ.get('DEBUG') == '1':
     debug = True
 
-#Enable verbose logger to stdout
+# Enable verbose logger to stdout
 if debug:
-    logger.add_logger_appender(logger.AppenderType.STDOUT, 
+    logger.add_logger_appender(logger.AppenderType.STDOUT,
                                logger.LogLevel.VERBOSE)
 
+
 class AgentTestCase(unittest.TestCase):
+
     def setUp(self):
         prefix = "{0}_".format(self.__class__.__name__)
         self.tmp_dir = tempfile.mkdtemp(prefix=prefix)
@@ -65,12 +67,14 @@ class AgentTestCase(unittest.TestCase):
         if not debug and self.tmp_dir is not None:
             shutil.rmtree(self.tmp_dir)
 
+
 def load_data(name):
     """Load test data"""
     path = os.path.join(data_dir, name)
     with open(path, "r") as data_file:
         return data_file.read()
 
+
 def load_bin_data(name):
     """Load test bin data"""
     path = os.path.join(data_dir, name)
@@ -99,12 +103,14 @@ supported_distro = [
 
 ]
 
+
 def open_patch():
     open_name = '__builtin__.open'
     if PY_VERSION_MAJOR == 3:
         open_name = 'builtins.open'
     return open_name
 
+
 def distros(distro_name=".*", distro_version=".*", distro_full_name=".*"):
     """Run test on multiple distros"""
     def decorator(test_method):
@@ -115,17 +121,15 @@ def distros(distro_name=".*", distro_version=".*", distro_full_name=".*"):
                    re.match(distro_version, distro[1]) and \
                    re.match(distro_full_name, distro[2]):
                     if debug:
-                        logger.info("Run {0} on {1}", test_method.__name__, 
+                        logger.info("Run {0} on {1}", test_method.__name__,
                                     distro)
                     new_args = []
                     new_args.extend(args)
                     new_args.extend(distro)
                     test_method(self, *new_args, **kwargs)
-                    #Call tearDown and setUp to create seprated environment for 
-                    #distro testing
+                    # Call tearDown and setUp to create seprated environment
+                    # for distro testing
                     self.tearDown()
                     self.setUp()
         return wrapper
     return decorator
-
-
diff --git a/tests/utils/test_file_util.py b/tests/utils/test_file_util.py
index 9a5479e..7d7d4dc 100644
--- a/tests/utils/test_file_util.py
+++ b/tests/utils/test_file_util.py
@@ -23,18 +23,20 @@ import sys
 from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.utils.fileutil as fileutil
 
+
 class TestFileOperations(AgentTestCase):
+
     def test_read_write_file(self):
-        test_file=os.path.join(self.tmp_dir, 'test_file')
+        test_file = os.path.join(self.tmp_dir, 'test_file')
         content = ustr(uuid.uuid4())
         fileutil.write_file(test_file, content)
 
         content_read = fileutil.read_file(test_file)
         self.assertEquals(content, content_read)
         os.remove(test_file)
-    
+
     def test_rw_utf8_file(self):
-        test_file=os.path.join(self.tmp_dir, 'test_file')
+        test_file = os.path.join(self.tmp_dir, 'test_file')
         content = u"\u6211"
         fileutil.write_file(test_file, content, encoding="utf-8")
 
@@ -43,14 +45,14 @@ class TestFileOperations(AgentTestCase):
         os.remove(test_file)
 
     def test_remove_bom(self):
-        test_file=os.path.join(self.tmp_dir, 'test_file')
+        test_file = os.path.join(self.tmp_dir, 'test_file')
         data = b'\xef\xbb\xbfhehe'
         fileutil.write_file(test_file, data, asbin=True)
         data = fileutil.read_file(test_file, remove_bom=True)
         self.assertNotEquals(0xbb, ord(data[0]))
-   
+
     def test_append_file(self):
-        test_file=os.path.join(self.tmp_dir, 'test_file')
+        test_file = os.path.join(self.tmp_dir, 'test_file')
         content = ustr(uuid.uuid4())
         fileutil.append_file(test_file, content)
 
diff --git a/tests/utils/test_flexible_version.py b/tests/utils/test_flexible_version.py
index 1162022..5c47b43 100644
--- a/tests/utils/test_flexible_version.py
+++ b/tests/utils/test_flexible_version.py
@@ -4,6 +4,7 @@ import unittest
 
 from azurelinuxagent.common.utils.flexible_version import FlexibleVersion
 
+
 class TestFlexibleVersion(unittest.TestCase):
 
     def setUp(self):
@@ -19,7 +20,9 @@ class TestFlexibleVersion(unittest.TestCase):
             t_escaped = re.escape(t)
             t_re = re.compile(t_escaped)
             self.assertEqual((t_escaped, t_re), self.v._compile_separator(t))
-        self.assertEqual(('', re.compile('')),  self.v._compile_separator(None))
+        self.assertEqual(
+            ('', re.compile('')),
+            self.v._compile_separator(None))
         return
 
     def test_compile_pattern(self):
@@ -219,13 +222,16 @@ class TestFlexibleVersion(unittest.TestCase):
         v2 = FlexibleVersion('1-2-3', sep='-')
         try:
             v1 == v2
-            self.assertTrue(False, "Incompatible separators failed to raise an exception")
+            self.assertTrue(
+                False, "Incompatible separators failed to raise an exception")
         except ValueError:
             pass
         except Exception as e:
             t = e.__class__.__name__
-            self.assertTrue(False, "Incompatible separators raised an unexpected exception: {0}" \
-                .format(t))
+            self.assertTrue(
+                False,
+                "Incompatible separators raised an unexpected "
+                "exception: {0}" .format(t))
         return
 
     def test_ensure_compatible_prerel(self):
@@ -233,13 +239,16 @@ class TestFlexibleVersion(unittest.TestCase):
         v2 = FlexibleVersion('1.2.3', prerel_tags=('a', 'b', 'c'))
         try:
             v1 == v2
-            self.assertTrue(False, "Incompatible prerel_tags failed to raise an exception")
+            self.assertTrue(
+                False, "Incompatible prerel_tags failed to raise an exception")
         except ValueError:
             pass
         except Exception as e:
             t = e.__class__.__name__
-            self.assertTrue(False, "Incompatible prerel_tags raised an unexpected exception: {0}" \
-                .format(t))
+            self.assertTrue(
+                False,
+                "Incompatible prerel_tags raised an unexpected \
+                exception: {0}" .format(t))
         return
 
     def test_ensure_compatible_prerel_length(self):
@@ -247,13 +256,16 @@ class TestFlexibleVersion(unittest.TestCase):
         v2 = FlexibleVersion('1.2.3', prerel_tags=('a', 'b'))
         try:
             v1 == v2
-            self.assertTrue(False, "Incompatible prerel_tags failed to raise an exception")
+            self.assertTrue(
+                False, "Incompatible prerel_tags failed to raise an exception")
         except ValueError:
             pass
         except Exception as e:
             t = e.__class__.__name__
-            self.assertTrue(False, "Incompatible prerel_tags raised an unexpected exception: {0}" \
-                .format(t))
+            self.assertTrue(
+                False,
+                "Incompatible prerel_tags raised an unexpected \
+                exception: {0}" .format(t))
         return
 
     def test_ensure_compatible_prerel_order(self):
@@ -261,21 +273,24 @@ class TestFlexibleVersion(unittest.TestCase):
         v2 = FlexibleVersion('1.2.3', prerel_tags=('b', 'a'))
         try:
             v1 == v2
-            self.assertTrue(False, "Incompatible prerel_tags failed to raise an exception")
+            self.assertTrue(
+                False, "Incompatible prerel_tags failed to raise an exception")
         except ValueError:
             pass
         except Exception as e:
             t = e.__class__.__name__
-            self.assertTrue(False, "Incompatible prerel_tags raised an unexpected exception: {0}" \
-                .format(t))
+            self.assertTrue(
+                False,
+                "Incompatible prerel_tags raised an unexpected \
+                exception: {0}" .format(t))
         return
 
     def test_major(self):
         tests = {
-            '1' : 1,
-            '1.2' : 1,
-            '1.2.3' : 1,
-            '1.2.3.4' : 1
+            '1': 1,
+            '1.2': 1,
+            '1.2.3': 1,
+            '1.2.3.4': 1
         }
         for test in iter(tests):
             expectation = tests[test]
@@ -286,10 +301,10 @@ class TestFlexibleVersion(unittest.TestCase):
 
     def test_minor(self):
         tests = {
-            '1' : 0,
-            '1.2' : 2,
-            '1.2.3' : 2,
-            '1.2.3.4' : 2
+            '1': 0,
+            '1.2': 2,
+            '1.2.3': 2,
+            '1.2.3.4': 2
         }
         for test in iter(tests):
             expectation = tests[test]
@@ -300,10 +315,10 @@ class TestFlexibleVersion(unittest.TestCase):
 
     def test_patch(self):
         tests = {
-            '1' : 0,
-            '1.2' : 0,
-            '1.2.3' : 3,
-            '1.2.3.4' : 3
+            '1': 0,
+            '1.2': 0,
+            '1.2.3': 3,
+            '1.2.3.4': 3
         }
         for test in iter(tests):
             expectation = tests[test]
@@ -328,7 +343,7 @@ class TestFlexibleVersion(unittest.TestCase):
     def test_decrement(self):
         src_v = FlexibleVersion('1.0.0.0.10')
         dst_v = FlexibleVersion(str(src_v))
-        for i in range(1,10):
+        for i in range(1, 10):
             dst_v -= 1
             self.assertEqual(i, src_v.version[-1] - dst_v.version[-1])
         return
@@ -341,13 +356,15 @@ class TestFlexibleVersion(unittest.TestCase):
             pass
         except Exception as e:
             t = e.__class__.__name__
-            self.assertTrue(False, "Decrement raised an unexpected exception: {0}".format(t))
+            self.assertTrue(
+                False, "Decrement raised an unexpected exception: {0}".format(
+                    t))
         return
 
     def test_increment(self):
         src_v = FlexibleVersion('1.0.0.0.0')
         dst_v = FlexibleVersion(str(src_v))
-        for i in range(1,10):
+        for i in range(1, 10):
             dst_v += 1
             self.assertEqual(i, dst_v.version[-1] - src_v.version[-1])
         return
@@ -413,7 +430,8 @@ class TestFlexibleVersion(unittest.TestCase):
     def test_order(self):
         test0 = ["1.7.0", "1.7.0rc0", "1.11.0"]
         expected0 = ['1.7.0rc0', '1.7.0', '1.11.0']
-        self.assertEqual(expected0, list(map(str, sorted([FlexibleVersion(v) for v in test0]))))
+        self.assertEqual(expected0, list(
+            map(str, sorted([FlexibleVersion(v) for v in test0]))))
 
         test1 = [
             '2.0.2rc2',
@@ -443,22 +461,27 @@ class TestFlexibleVersion(unittest.TestCase):
             '2.2.0',
             '3.0.1'
         ]
-        self.assertEqual(expected1, list(map(str, sorted([FlexibleVersion(v) for v in test1]))))
+        self.assertEqual(expected1, list(
+            map(str, sorted([FlexibleVersion(v) for v in test1]))))
 
-        self.assertEqual(FlexibleVersion("1.0.0.0.0.0.0.0"), FlexibleVersion("1"))
+        self.assertEqual(
+            FlexibleVersion("1.0.0.0.0.0.0.0"),
+            FlexibleVersion("1"))
 
         self.assertFalse(FlexibleVersion("1.0") > FlexibleVersion("1.0"))
         self.assertFalse(FlexibleVersion("1.0") < FlexibleVersion("1.0"))
-        
+
         self.assertTrue(FlexibleVersion("1.0") < FlexibleVersion("1.1"))
         self.assertTrue(FlexibleVersion("1.9") < FlexibleVersion("1.10"))
         self.assertTrue(FlexibleVersion("1.9.9") < FlexibleVersion("1.10.0"))
-        self.assertTrue(FlexibleVersion("1.0.0.0") < FlexibleVersion("1.2.0.0"))
+        self.assertTrue(FlexibleVersion("1.0.0.0") <
+                        FlexibleVersion("1.2.0.0"))
 
         self.assertTrue(FlexibleVersion("1.1") > FlexibleVersion("1.0"))
         self.assertTrue(FlexibleVersion("1.10") > FlexibleVersion("1.9"))
         self.assertTrue(FlexibleVersion("1.10.0") > FlexibleVersion("1.9.9"))
-        self.assertTrue(FlexibleVersion("1.2.0.0") > FlexibleVersion("1.0.0.0"))
+        self.assertTrue(FlexibleVersion("1.2.0.0") >
+                        FlexibleVersion("1.0.0.0"))
 
         self.assertTrue(FlexibleVersion("1.0") <= FlexibleVersion("1.1"))
         self.assertTrue(FlexibleVersion("1.1") > FlexibleVersion("1.0"))
diff --git a/tests/utils/test_rest_util.py b/tests/utils/test_rest_util.py
index 874e527..385a486 100644
--- a/tests/utils/test_rest_util.py
+++ b/tests/utils/test_rest_util.py
@@ -23,6 +23,7 @@ import azurelinuxagent.common.utils.restutil as restutil
 from azurelinuxagent.common.future import ustr, httpclient
 import azurelinuxagent.common.logger as logger
 
+
 class TestHttpOperations(AgentTestCase):
 
     def test_parse_url(self):
@@ -36,11 +37,11 @@ class TestHttpOperations(AgentTestCase):
         self.assertEquals("abc.def", host)
         self.assertEquals("/", rel_uri)
         self.assertEquals(False, secure)
-        
+
         test_uri = "https://abc.def/ghi?jkl=mn"
         host, port, secure, rel_uri = restutil._parse_url(test_uri)
         self.assertEquals(True, secure)
-    
+
         test_uri = "http://abc.def:80/"
         host, port, secure, rel_uri = restutil._parse_url(test_uri)
         self.assertEquals("abc.def", host)
@@ -53,7 +54,6 @@ class TestHttpOperations(AgentTestCase):
         self.assertEquals(None, host)
         self.assertEquals(rel_uri, "None")
 
-
     @patch("azurelinuxagent.common.future.httpclient.HTTPSConnection")
     @patch("azurelinuxagent.common.future.httpclient.HTTPConnection")
     def test_http_request(self, HTTPConnection, HTTPSConnection):
@@ -62,38 +62,39 @@ class TestHttpOperations(AgentTestCase):
         mock_httpconn.getresponse = Mock(return_value=mock_httpresp)
         HTTPConnection.return_value = mock_httpconn
         HTTPSConnection.return_value = mock_httpconn
-       
+
         mock_httpresp.read = Mock(return_value="_(:3| <)_")
 
-        #Test http get
+        # Test http get
         resp = restutil._http_request("GET", "foo", "bar")
         self.assertNotEquals(None, resp)
         self.assertEquals("_(:3| <)_", resp.read())
-    
-        #Test https get
+
+        # Test https get
         resp = restutil._http_request("GET", "foo", "bar", secure=True)
         self.assertNotEquals(None, resp)
         self.assertEquals("_(:3| <)_", resp.read())
-        
-        #Test http get with proxy
+
+        # Test http get with proxy
         mock_httpresp.read = Mock(return_value="_(:3| <)_")
-        resp = restutil._http_request("GET", "foo", "bar", proxy_host="foo.bar",
-                                      proxy_port=23333)
+        resp = restutil._http_request(
+            "GET", "foo", "bar", proxy_host="foo.bar", proxy_port=23333)
         self.assertNotEquals(None, resp)
         self.assertEquals("_(:3| <)_", resp.read())
-    
-        #Test https get
+
+        # Test https get
         resp = restutil._http_request("GET", "foo", "bar", secure=True)
         self.assertNotEquals(None, resp)
         self.assertEquals("_(:3| <)_", resp.read())
-        
-        #Test https get with proxy
+
+        # Test https get with proxy
         mock_httpresp.read = Mock(return_value="_(:3| <)_")
-        resp = restutil._http_request("GET", "foo", "bar", proxy_host="foo.bar",
-                                      proxy_port=23333, secure=True)
+        resp = restutil._http_request(
+            "GET", "foo", "bar", proxy_host="foo.bar", proxy_port=23333,
+            secure=True)
         self.assertNotEquals(None, resp)
         self.assertEquals("_(:3| <)_", resp.read())
-    
+
     @patch("time.sleep")
     @patch("azurelinuxagent.common.utils.restutil._http_request")
     def test_http_request_with_retry(self, _http_request, sleep):
@@ -101,22 +102,24 @@ class TestHttpOperations(AgentTestCase):
         mock_httpresp.read = Mock(return_value="hehe")
         _http_request.return_value = mock_httpresp
 
-        #Test http get
-        resp = restutil.http_get("http://foo.bar") 
+        # Test http get
+        resp = restutil.http_get("http://foo.bar")
         self.assertEquals("hehe", resp.read())
 
-        #Test https get
-        resp = restutil.http_get("https://foo.bar") 
+        # Test https get
+        resp = restutil.http_get("https://foo.bar")
         self.assertEquals("hehe", resp.read())
-        
-        #Test http failure
+
+        # Test http failure
         _http_request.side_effect = httpclient.HTTPException("Http failure")
-        self.assertRaises(restutil.HttpError, restutil.http_get, "http://foo.bar")
+        self.assertRaises(restutil.HttpError,
+                          restutil.http_get, "http://foo.bar")
 
-        #Test http failure
+        # Test http failure
         _http_request.side_effect = IOError("IO failure")
-        self.assertRaises(restutil.HttpError, restutil.http_get, "http://foo.bar")
-    
+        self.assertRaises(restutil.HttpError,
+                          restutil.http_get, "http://foo.bar")
+
 if __name__ == '__main__':
     unittest.main()
 if __name__ == '__main__':
diff --git a/tests/utils/test_shell_util.py b/tests/utils/test_shell_util.py
index 57e6c33..04967c2 100644
--- a/tests/utils/test_shell_util.py
+++ b/tests/utils/test_shell_util.py
@@ -23,7 +23,9 @@ import os
 import azurelinuxagent.common.utils.shellutil as shellutil
 import test
 
+
 class TestrunCmd(AgentTestCase):
+
     def test_run_get_output(self):
         output = shellutil.run_get_output(u"ls /")
         self.assertNotEquals(None, output)
@@ -31,7 +33,7 @@ class TestrunCmd(AgentTestCase):
 
         err = shellutil.run_get_output(u"ls /not-exists")
         self.assertNotEquals(0, err[0])
-            
+
         err = shellutil.run_get_output(u"ls 我")
         self.assertNotEquals(0, err[0])
 
diff --git a/tests/utils/test_text_util.py b/tests/utils/test_text_util.py
index 9ac0707..372b09c 100644
--- a/tests/utils/test_text_util.py
+++ b/tests/utils/test_text_util.py
@@ -23,7 +23,9 @@ from azurelinuxagent.common.future import ustr
 import azurelinuxagent.common.utils.textutil as textutil
 from azurelinuxagent.common.utils.textutil import Version
 
+
 class TestTextUtil(AgentTestCase):
+
     def test_get_password_hash(self):
         password_hash = textutil.gen_password_hash("asdf", 6, 10)
         self.assertNotEquals(None, password_hash)
@@ -31,12 +33,12 @@ class TestTextUtil(AgentTestCase):
         self.assertNotEquals(None, password_hash)
 
     def test_remove_bom(self):
-        #Test bom could be removed
+        # Test bom could be removed
         data = ustr(b'\xef\xbb\xbfhehe', encoding='utf-8')
         data = textutil.remove_bom(data)
         self.assertNotEquals(0xbb, data[0])
-        
-        #Test string without BOM is not affected
+
+        # Test string without BOM is not affected
         data = u"hehe"
         data = textutil.remove_bom(data)
         self.assertEquals(u"h", data[0])
@@ -65,12 +67,11 @@ class TestTextUtil(AgentTestCase):
         base64_bytes = textutil.get_bytes_from_pem(content)
         self.assertEquals("certificate", base64_bytes)
 
-
         content = ("-----BEGIN PRIVATE KEY-----\n"
                    "private key\n"
                    "-----END PRIVATE Key-----\n")
         base64_bytes = textutil.get_bytes_from_pem(content)
         self.assertEquals("private key", base64_bytes)
-        
+
 if __name__ == '__main__':
     unittest.main()
-- 
2.9.2

